The tangle functions are adapted from [[https://emacs.stackexchange.com/a/29884/31428][this answer on the emacs Stack Exchange]],
which was written by [[https://emacs.stackexchange.com/users/2710/andrew-swann][Andrew Swann]].

* etc
** apk
*** repositories
:PROPERTIES:
:header-args:text+: :noweb-ref 7d9906c4-9fdb-4804-a0be-8020003d1ff9
:END:

#+begin_src text :noweb-ref no :tangle (meq/tangle-path)
<<7d9906c4-9fdb-4804-a0be-8020003d1ff9>>
#+end_src

#+begin_src text
http://postmarketos.brixit.nl/postmarketos/master
https://dl-cdn.alpinelinux.org/alpine/v3.13/main
https://dl-cdn.alpinelinux.org/alpine/v3.13/community
#+end_src

*** keys
**** build.postmarketos.org.rsa.pub
:PROPERTIES:
:header-args:text+: :noweb-ref 8c513035-368b-418f-ad7b-5a9a71385d57
:END:

#+begin_src text :noweb-ref no :tangle (meq/tangle-path)
<<8c513035-368b-418f-ad7b-5a9a71385d57>>
#+end_src

#+begin_src text
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAlXE4h6kp8aCzn6BjuOnz
Z1lcFSY+WRZ2vGUb5hEZ+YG75xYZW+yELr8P8+HSUrpBXF/HTQYKH/cNJc5zmOny
EsmcZskIYB0qgZPg02GXBV8VfjL+Es+y166g14IH2YKkdfplqHYVpCmnkmaZXQZu
ZAOEL2hyuzTAYYFhCZWHYYgdWfpnKDDlVcnw1Q3/LhADBlN63CW0UMWc5oJ7MwlY
SKriM60cHvER1YD5bdbGG/JTBFnB4djliLtvRNp+w3emwHmDhFmnYITN2WOHbYpV
P+RIfzq0IP978sKGJmd0RPuwl2ruifBYikm/F79Ko8lT2gVE40B7wqbInIGquTr1
deERIr47jcPRGl+01Svm0SxbXD1/zBNjo4wvMsZEW7Te689mFjxsXHnD7OEUQqh/
D1DhbnKJwpKwClYOi/aVDyGJunqavSR0QYPqN3nP+uXdBC4wuLI9gRS/yXNaxpMy
9AKwlD3uUhKzmJMJIu3L1/TH/vY9M5xZ2lnFduTZmL/X/4sjhyTb1ycFwU9UIY4C
u2CP/YLqiiquokgzpRfYwJyOP4quBVRC46Tejx5PzTCvnhro7LAzDoS756iBv9E/
2oxwC5VafGSChO+N8SyEBy532Gs+rcZDwUE7M9Y1GbQHW3ALMTwxstWqZ3GKWKd1
Cw6JQoywUhR09tFwQrYZao0CAwEAAQ==
-----END PUBLIC KEY-----
#+end_src

** nixos
*** makefile

#+begin_src makefile :tangle (meq/tangle-path)
<<makefile>>
#+end_src

*** .envrc

#+begin_src shell :tangle (meq/tangle-path)
<<envrc>>
#+end_src

*** shell.nix

#+name: 639828b5-661b-4ec3-91e3-b791753aa4df
#+begin_src nix :tangle (meq/tangle-path)
<<shell.nix()>>
#+end_src

*** default.nix

Adapted from [[https://github.com/edolstra/flake-compat#usage][here]]:

#+begin_src nix :tangle (meq/tangle-path)
<<default.nix()>>
#+end_src

*** home-manager
**** flake.nix
:PROPERTIES:
:header-args:nix+: :noweb-ref 8ef18fc2-ee65-4dfc-8977-69f14efd8064
:header-args:yaml+: :noweb-ref 8ef18fc2-ee65-4dfc-8977-69f14efd8064
:header-args:hy+: :noweb-ref 8ef18fc2-ee65-4dfc-8977-69f14efd8064
:header-args:python+: :noweb-ref 8ef18fc2-ee65-4dfc-8977-69f14efd8064
:header-args:shell+: :noweb-ref 8ef18fc2-ee65-4dfc-8977-69f14efd8064
:header-args:elvish+: :noweb-ref 8ef18fc2-ee65-4dfc-8977-69f14efd8064
:header-args:powershell+: :noweb-ref 8ef18fc2-ee65-4dfc-8977-69f14efd8064
:header-args:zsh+: :noweb-ref 8ef18fc2-ee65-4dfc-8977-69f14efd8064
:header-args:conf+: :noweb-ref 8ef18fc2-ee65-4dfc-8977-69f14efd8064
:header-args:vimrc+: :noweb-ref 8ef18fc2-ee65-4dfc-8977-69f14efd8064
:END:

#+begin_src text :tangle (meq/tangle-path)
<<8ef18fc2-ee65-4dfc-8977-69f14efd8064>>
#+end_src

#+begin_src nix
{
    description = "<<username>>'s home-manager config!";
    inputs = {
        bundle = {
            url = <<input-path-exists(path="./bundle", url="https://github/sylvorg/bundle", submodule='t)>>;
            type = "git";
            submodules = true;
        };
        valiant.follows = "bundle/valiant";
        nixpkgs.follows = "bundle/nixpkgs";
        flake-utils.url = github:numtide/flake-utils;
        flake-compat = {
            url = "github:edolstra/flake-compat";
            flake = false;
        };

        bash-completion = {
            url = github:scop/bash-completion;
            flake = false;
        };
        grml = {
            url = github:grml/grml-etc-core;
            flake = false;
        };
        powerline = {
            url = github:powerline/powerline;
            flake = false;
        };
        oh-my-tmux = {
            url = github:gpakosz/.tmux;
            flake = false;
        };
        aleclearmind = {
            url = github:aleclearmind/nested-tmux;
            flake = false;
        };
        nix-env-fish = {
            url = github:lilyball/nix-env.fish;
            flake = false;
        };
        kitty-themes = {
            url = github:dexpota/kitty-themes;
            flake = false;
        };

        user = {
            url = <<input-path-exists(path="./.", url=userlink)>>;
            inputs.home-manager-config.follows = "";
            type = "git";
            submodules = true;
        };
    };
    outputs = inputs@{ self, flake-utils, ... }: with builtins; with inputs.bundle.lib; with flake-utils.lib; let
        sconcat = a: b: a + b;
        sepcat = a: b: a + " " + b;
        slashcat = a: b: a + "/" + b;
        dotcat = a: b: a + "." + b;
        newcat = concatStringsSep ''\n'';
        convert = v: if (v == null) then "None"
                else if (isList v) then "[ ${concatStringsSep ", " (map convert v)} ]"
                else if (isInt v) then (toString v)
                else if (isBool v) then ''"${iron.toCapital (boolToString v)}"''
                else if (isFunction v) then (v null)
                else v;
        convertAttrs = append: n: v: let
            eq = if append then "+=" else "=";
        in if (isAttrs v)
           then (mapAttrsToList (N: V: ''\$${toUpper n}["${N}"] ${eq} ${convert V}'') v)
           else "\$${toUpper n} ${eq} ${convert v}";
        convertAssignment = n: v: "${n} = ${convert v}";
        SourceText = { config, name, ... }: with types; {
            options = {
                enable = mkSubmoduleEnableOption name;
                text = mkOption {
                    type = nullOr lines;
                    description = "";
                    default = null;
                };
                source = mkOption {
                    type = path;
                    description = "";
                };
            };
#+end_src

Adapted from [[https://github.com/nix-community/home-manager/blob/master/modules/programs/gpg.nix#L97][here]]:

#+begin_src nix
            config.source = mkIf (config.text != null) (pkgs.writeText name config.text);
#+end_src

#+begin_src nix
        };
#+end_src

Adapted from [[https://github.com/NixOS/nixpkgs/blob/master/lib/options.nix#L85][here]]:

#+begin_src nix
        mkSubmoduleEnableOption = name: mkOption {
            default = true;
            example = false;
            description =
            if name ? _type && name._type == "mdDoc"
            then lib.mdDoc "Whether to enable ${name.text}."
            else "Whether to enable ${name}.";
            type = lib.types.bool;
        };
#+end_src

#+begin_src nix
    in {
        homeModules = {
            assh = { config, options, ... }: let
                cfg = config.programs.assh;
            in {
                options.programs.assh = {
                    defaults = mkOption {
                        type = types.attrs;
                        default = {};
                        decription = "";
                    };
                    enable = mkEnableOption "assh";
                    package = mkPackageOption pkgs "assh" { };
                    alias = mkOption {
                        type = with types; nullOr nonEmptyStr;
                        default = null;
                        description = "";
                    };
                    enableGlobalIntegration = mkOption {
                        type = types.bool;
                        default = true;
                        description = "";
                    };
                    enableProfileIntegration = mkOption {
                        type = types.bool;
                        default = true;
                        description = "";
                    };
                    enableBashIntegration = mkOption {
                        type = types.bool;
                        default = true;
                        description = "";
                    };
                    enableZshIntegration = mkOption {
                        type = types.bool;
                        default = true;
                        description = "";
                    };
                    enableFishIntegration = mkOption {
                        type = types.bool;
                        default = true;
                        description = "";
                    };
                    enableElvishIntegration = mkOption {
                        type = types.bool;
                        default = true;
                        description = "";
                    };
                    enableIonIntegration = mkOption {
                        type = types.bool;
                        default = true;
                        description = "";
                    };
                    enableXonshIntegration = mkOption {
                        type = types.bool;
                        default = true;
                        description = "";
                    };
                    hosts = mkOption {
                        type = types.attrs;
                        default = {};
                        decription = "";
                    };
                    templates = mkOption {
                        type = types.attrs;
                        default = {};
                        decription = "";
                    };
                    includes = mkOption {
                        type = with types; listOf path;
                        default = [];
                        description = "";
                    };
                };
                config = mkIf cfg.enable (mkMerge (flatten [
                    {
                        programs.assh = mkBefore {
                            alias = mkIf (cfg.alias == null) "${cfg.package}/bin/assh wrapper ssh --";
                        };
                    }
                    (genAttrs (p: { programs.${p} = mkIf cfg."enable${iron.toCapital p}Integration" {
                        ssh = cfg.alias;
                    }; }) [
                        "bash"
                        "zsh"
                        "fish"
                        "elvish"
                        "ion"
                    ])
                    {
                        home.shellAliases = mkIf cfg.enableProfileIntegration { ssh = cfg.alias; };
                        programs.xonsh = mkIf cfg.enableXonshIntegration {
                            ssh = f: "lambda args, stdin=None: $(${cfg.alias} @(args))";
                        };
                    }
                    {
                        home.file.".ssh/assh.yml".text = with cfg; toJSON {
                            inherit includes templates hosts defaults;
                            ASSHBinaryPath = package;
                        };
                    }
                ]));
            };
            borgmatic = { config, options, ... }: let
                cfg = config.programs.borgmatic;

                mkNullableOption = args: mkOption (args // {
                    type = types.nullOr args.type;
                    default = null;
                });

                mkRetentionOption = frequency: mkNullableOption {
                    type = types.int;
                    description =
                        "Number of ${frequency} archives to keep. Use -1 for no limit.";
                    example = 3;
                };

                extraConfigOption = mkOption {
                    type = with types; attrsOf (oneOf [ str bool path int (listOf str) ]);
                    default = { };
                    description = "Extra settings.";
                };

                consistencyCheckModule = with types; submodule {
                    options = {
                        name = mkOption {
                            type = enum [ "repository" "archives" "data" "extract" ];
                            description = "Name of consistency check to run.";
                            example = "repository";
                        };
                        frequency = mkNullableOption {
                            type = strMatching "([[:digit:]]+ .*)|always";
                            description = "Frequency of this type of check";
                            example = "2 weeks";
                        };
                    };
                };

                configModule = types.submodule {
                    options = {
                        location = {
                            sourceDirectories = mkOption {
                                type = types.listOf types.str;
                                description = "Directories to backup.";
                                example = literalExpression "[config.home.homeDirectory]";
                            };
                            repositories = mkOption {
                                type = types.listOf types.str;
                                description = "Paths to repositories.";
                                example = literalExpression ''["ssh://myuser@myrepo.myserver.com/./repo"]'';
                            };
                            extraConfig = extraConfigOption;
                        };

                        storage = {
                            encryptionPasscommand = mkNullableOption {
                                type = types.str;
                                description = "Command writing the passphrase to standard output.";
                                example = literalExpression ''"''${pkgs.password-store}/bin/pass borg-repo"'';
                            };
                            extraConfig = extraConfigOption;
                        };

                        retention = {
                            keepWithin = mkNullableOption {
                                type = types.strMatching "[[:digit:]]+[Hdwmy]";
                                description = "Keep all archives within this time interval.";
                                example = "2d";
                            };

                            keepSecondly = mkRetentionOption "secondly";
                            keepMinutely = mkRetentionOption "minutely";
                            keepHourly = mkRetentionOption "hourly";
                            keepDaily = mkRetentionOption "daily";
                            keepWeekly = mkRetentionOption "weekly";
                            keepMonthly = mkRetentionOption "monthly";
                            keepYearly = mkRetentionOption "yearly";

                            extraConfig = extraConfigOption;
                        };

                        consistency = {
                            checks = mkOption {
                                type = types.listOf consistencyCheckModule;
                                default = [];
                                description = "Consistency checks to run";
                                example = literalExpression ''
                                    [
                                        {
                                            name = "repository";
                                            frequency = "2 weeks";
                                        }
                                        {
                                            name = "archives";
                                            frequency = "4 weeks";
                                        }
                                        {
                                            name = "data";
                                            frequency = "6 weeks";
                                        }
                                        {
                                            name = "extract";
                                            frequency = "6 weeks";
                                        }
                                    ];
                                '';
                            };
                            extraConfig = extraConfigOption;
                        };
#+end_src

#+begin_quote
Shell commands, scripts, or integrations to execute at various
points during a borgmatic run. IMPORTANT: All provided commands and
scripts are executed with user permissions of borgmatic. Do not
forget to set secure permissions on this configuration file (chmod
0600) as well as on any script called from a hook (chmod 0700) to
prevent potential shell injection or privilege escalation.
#+end_quote

#+begin_src nix
                        hooks = {
                            beforePrune = mkOption {
                                type = types.listOf str;
                                default = [];
                                description = ''
                                    List of one or more shell commands or scripts to execute
                                    before pruning, run once per configuration file.
                                '';
                                example = literalExpression ''[ '''echo "Starting pruning."''' ]'';
                            };
                            beforeCheck = mkOption {
                                type = types.listOf str;
                                default = [];
                                description = ''
                                    List of one or more shell commands or scripts to execute
                                    before consistency checks, run once per configuration file.
                                '';
                                example = literalExpression ''[ '''echo "Starting checks."''' ]'';
                            };
                            beforeExtract = mkOption {
                                type = types.listOf str;
                                default = [];
                                description = ''
                                    List of one or more shell commands or scripts to execute
                                    before extracting a backup, run once per configuration file.
                                '';
                                example = literalExpression ''[ '''echo "Starting extracting."''' ]'';
                            };
                            afterBackup = mkOption {
                                type = types.listOf str;
                                default = [];
                                description = ''
                                    List of one or more shell commands or scripts to execute
                                    after creating a backup, run once per configuration file.
                                '';
                                example = literalExpression ''[ '''echo "Finished a backup."''' ]'';
                            };
                            afterPrune = mkOption {
                                type = types.listOf str;
                                default = [];
                                description = ''
                                    List of one or more shell commands or scripts to execute
                                    after pruning, run once per configuration file.
                                '';
                                example = literalExpression ''[ '''echo "Finished pruning."''' ]'';
                            };
                            afterCheck = mkOption {
                                type = types.listOf str;
                                default = [];
                                description = ''
                                    List of one or more shell commands or scripts to execute
                                    after consistency checks, run once per configuration file.
                                '';
                                example = literalExpression ''[ '''echo "Finished checks."''' ]'';
                            };
                            afterExtract = mkOption {
                                type = types.listOf str;
                                default = [];
                                description = ''
                                    List of one or more shell commands or scripts to execute
                                    after extracting a backup, run once per configuration file.
                                '';
                                example = literalExpression ''[ '''echo "Finished extracting."''' ]'';
                            };
                            onError = mkOption {
                                type = types.listOf str;
                                default = [];
                                description = ''
                                    List of one or more shell commands or scripts to execute
                                    when an exception occurs during a "prune", "create", or
                                    "check" action or an associated before/after hook.
                                '';
                                example = literalExpression ''[ '''echo "Error during prune/create/check."''' ]'';
                            };
                            beforeEverything = mkOption {
                                type = types.listOf str;
                                default = [];
                                description = ''
                                    List of one or more shell commands or scripts to execute
                                    before running all actions (if one of them is "create").
                                    These are collected from all configuration files and then
                                    run once before all of them (prior to all actions).
                                '';
                                example = literalExpression ''[ '''echo "Starting actions."''' ]'';
                            };
                            afterEverything = mkOption {
                                type = types.listOf str;
                                default = [];
                                description = ''
                                    List of one or more shell commands or scripts to execute
                                    after running all actions (if one of them is "create").
                                    These are collected from all configuration files and then
                                    run once after all of them (after any action).
                                '';
                                example = literalExpression ''[ '''echo "Completed actions."''' ]'';
                            };
                            umask = mkOption {
                                type = types.str;
                                default = "0077";
                                description = ''
                                    Umask used when executing hooks. Defaults to the umask that
                                    borgmatic is run with.
                                '';
                                example = literalExpression "0077";
                            };
                            extraConfig = extraConfigOption;
                        };
                    };
                };
#+end_src

#+begin_src nix
                removeNullValues = attrSet: filterAttrs (key: value: value != null) attrSet;

                writeConfig = config: generators.toYAML { } {
                    location = removeNullValues {
                        source_directories = config.location.sourceDirectories;
                        repositories = config.location.repositories;
                    } // config.location.extraConfig;
                    storage = removeNullValues {
                        encryption_passcommand = config.storage.encryptionPasscommand;
                    } // config.storage.extraConfig;
                    retention = removeNullValues {
                        keep_within = config.retention.keepWithin;
                        keep_secondly = config.retention.keepSecondly;
                        keep_minutely = config.retention.keepMinutely;
                        keep_hourly = config.retention.keepHourly;
                        keep_daily = config.retention.keepDaily;
                        keep_weekly = config.retention.keepWeekly;
                        keep_monthly = config.retention.keepMonthly;
                        keep_yearly = config.retention.keepYearly;
                    } // config.retention.extraConfig;
                    consistency = removeNullValues {
                        checks = config.consistency.checks;
                    } // config.consistency.extraConfig;
                    hooks = removeNullValues {
                        before_prune = config.hooks.beforePrune;
                        before_check = config.hooks.beforeCheck;
                        before_extract = config.hooks.beforeExtract;
                        after_backup = config.hooks.afterBackup;
                        after_prune = config.hooks.afterPrune;
                        after_check = config.hooks.afterCheck;
                        after_extract = config.hooks.afterExtract;
                        on_error = config.hooks.onError;
                        before_everything = config.hooks.beforeEverything;
                        after_everything = config.hooks.afterEverything;
                        umask = config.storage.extraConfig.umask or config.hooks.umask;
                    } // config.hooks.extraConfig;
                };
            in {
                options = {
                    programs.borgmatic = {
                        backups = mkOption {
                            type = types.attrsOf configModule;
                            description = ''
                                Borgmatic allows for several named backup configurations,
                                each with its own source directories and repositories.
                            '';
                            example = literalExpression ''
                                {
                                    personal = {
                                        location = {
                                            sourceDirectories = [ "/home/me/personal" ];
                                            repositories = [ "ssh://myuser@myserver.com/./personal-repo" ];
                                        };
                                    };
                                    work = {
                                        location = {
                                            sourceDirectories = [ "/home/me/work" ];
                                            repositories = [ "ssh://myuser@myserver.com/./work-repo" ];
                                        };
                                    };
                                };
                            '';
                        };
                    };
                };
                config = mkIf cfg.enable {
                    xdg.configFile = with lib.attrsets; mapAttrs' (configName: config:
                        nameValuePair ("borgmatic.d/" + configName + ".yaml") {
                            text = writeConfig config;
                        }) cfg.backups;
                };
            };
            zoxide = { config, options, ... }: let
                cfg = config.programs.zoxide;
            in {
                options.programs.zoxide = {
                    enableElvishIntegration = mkOption {
                        default = true;
                        type = types.bool;
                        description = "Whether to enable Elvish integration.";
                    };
                };
                config = let
                    zoxide = "${cfg.package}/bin/zoxide";
                in mkIf cfg.enable (mkMErge (flatten [
                    (mkIf cfg.enableElvishIntegration {
                        programs.elvish.initExtra = "eval (${zoxide} init elvish | slurp)";
                    })
                    (mkIf cfg.enableXonshIntegration {
                        programs.xonsh.initExtra = "execx($(${zoxide} init xonsh), 'exec', __xonsh__.ctx, filename='zoxide')";
                    })
                ]));
            };
            starship = { config, options, ... }: let
                cfg = config.programs.starship;
            in {
                options.programs.starship = {
                    enableElvishIntegration = mkOption {
                        default = true;
                        type = types.bool;
                        description = "Whether to enable Elvish integration.";
                    };
                };
                config = let
                    starship = "${cfg.package}/bin/starship";
                in mkIf cfg.enable (mkMErge (flatten [
                    (mkIf cfg.enableElvishIntegration {
                        programs.elvish.initExtra = "eval (${starship} init elvish)";
                    })
                    (mkIf cfg.enableXonshIntegration {
                        programs.xonsh.initExtra = "execx($(${starship} init xonsh))";
                    })
                ]));
            };
            direnv = { config, options, ... }: let
                cfg = config.programs.direnv;
            in {
                options.programs.direnv = {
                    enableElvishIntegration = mkOption {
                        default = true;
                        type = types.bool;
                        description = "Whether to enable Elvish integration.";
                    };
                    enableXonshIntegration = mkOption {
                        default = true;
                        type = types.bool;
                        description = "Whether to enable Xonsh integration.";
                    };
                };
                config = mkIf cfg.enable (mkMErge (flatten [
                    (mkIf cfg.enableElvishIntegration {
                        xdg.configFile."elvish/direnv.elv".text = "${direnv} hook elvish";
                        programs.elvish.initExtra = "use direnv";
                    })
                    (mkIf cfg.enableXonshIntegration {
                        programs.xonsh = {
                            packages = toList "xonsh-direnv";
                            initExtra = "xontrib load direnv";
                        };
                    })
                ]));
            };
            spacevim = { config, options, ... }: let
                cfg = config.programs.spacevim;
                Plugin = with types; { config, options, name, ... }: {
                    options = {
                        enable = mkSubmoduleEnableOption name;
                        user = mkOption {
                            type = str;
                        };
                        repo = mkOption {
                            type = str;
                        };
                        merged = mkOption {
                            type = bool;
                            default = false;
                        };
                    };
                };
                mkAutoloads = n: mapAttrs' (n: source: nameValuePair ".SpaceVim.d/autoload/${n}.${optionalString n "n"}vim" {
                    inherit source;
                }) cfg."${optionalString n "neo"}vimAutoloads";
            in {
                options.programs.spacevim = {
                    enable = mkEnableOption "SpaceVim";
                    extraConfig = mkOption {
                        type = types.lines;
                        default = "";
                        description = "";
                    };
                    extraInit = mkOption {
                        type = types.lines;
                        default = "";
                        description = "";
                    };
                    extraTOML = mkOption {
                        type = types.attrs;
                        default = {};
                        description = "";
                    };
                    extraTOMLInit = mkOption {
                        type = types.attrs;
                        default = {};
                        description = "";
                    };
                    enableNeovimIntegration = mkOption {
                        type = types.bool;
                        default = true;
                        description = "";
                    };
                    enableVimIntegration = mkOption {
                        type = types.bool;
                        default = true;
                        description = "";
                    };
                    plugins = mkOption {
                        type = with types; listOf (either Plugin str);
                        default = [];
                        description = ''
                            A list of submodules / attribute sets comprising of the whether to enable the plugin,
                            the github user, the github repository name, and whether to merge the plugin.
                            Strings of the format <code>"[user]/[reponame]"</code> can also be used,
                            where the option to merge is <code>true</code> by default.
                        '';
                    };
                    layers = mkOption {
                        type = with types; listOf attrs;
                        default = [];
                        description = "";
                    };
                    options = mkOption {
                        type = types.attrs;
                        default = {};
                        description = "";
                    };
                    vimAutoloads = mkOption {
                        types = with types; attrsOf SourceText;
                        default = {};
                        description = "";
                    };
                    neovimAutoloads = mkOption {
                        types = with types; attrsOf SourceText;
                        default = {};
                        description = "";
                    };
                };
                config = mkIf cfg.enable (mkMerge (flatten [
                    { home.file.".SpaceVim.d/init.toml".text = mkBefore cfg.extraInit; }
                    (let
                        optStrings = flatten [
                            (toTOML cfg.extraTOMLInit)
                        ];
                    in imap1r (i: v: { home.file.".SpaceVim.d/init.toml".text = mkOrder (1000 - 1) v; }) optStrings)
                    {
                        home.file.".SpaceVim.d/init.toml".text = toTOML {
                            custom_plugins = map (repo: if (isAttrs repo) then {
                                inherit (repo) merged;
                                repo = "${repo.user}/${repo.repo}";
                            } else {
                                inherit repo;
                                merged = true;
                            }) cfg.plugins;
                            inherit (cfg) layers options;
                        };
                    }
                    {
                        home.file = mkMerge [
                            (mkAutoloads false)
                            (mkAutoloads true)
                        ];
                    }
                    { home.file.".SpaceVim.d/init.toml".text = mkAfter cfg.extraConfig; }
                    {
                        programs = let
                            plugins = toList pkgs.vimPlugins.SpaceVim;
                        in {
                            neovim.plugins = mkIf cfg.enableNeovimIntegration plugins;
                            vim.plugins = mkIf cfg.enableVimIntegration plugins;
                        };
                    }
                    (let
                        optStrings = flatten [
                            (toTOML cfg.extraTOML)
                        ];
                    in imap1 (i: v: { home.file.".SpaceVim.d/init.toml".text = mkOrder (1500 + i) v; }) optStrings)
                ]));
            };
            qtile = { config, options, ... }: let
                cfg = config.programs.qtile;
                Mouse = with types; submodule {
                    options = {
                        function = mkOption {
                            type = str;
                            description = "";
                        };
                        args = mkOption {
                            type = list;
                            default = [];
                            description = "";
                        };
                        kwargs = mkOption {
                            type = attrs;
                            default = {};
                            description = "";
                        };
                    };
                };
                Layout = with types; submodule {
                    options = {
                        function = mkOption {
                            type = str;
                            description = "";
                        };
                        args = mkOption {
                            type = list;
                            default = [];
                            description = "";
                        };
                        kwargs = mkOption {
                            type = attrs;
                            default = {};
                            description = "";
                        };
                    };
                };
                Group = with types; submodule {
                    options = {
                        name = mkOption {
                            type = either str (functionTo str);
                            description = "The name of the group.";
                        };
                        matches = mkOption {
                            type = listOf attrs;
                            default = [];
                            description = "A list of attribute sets / modules of the <code>Match</code> class in <command>qtile</command>.";
                        };
                    };
                };
                Key = with types; submodule {
                    options = {
                        mod = mkOption {
                            type = let
                                strs = [ str (functionTo str) ];
                            in nullOr (oneOf (flatten [
                                strs
                                (listOf (oneOf strs))
                            ]));
                            default = null;
                            description = ''
                                The modifier combo to use, such as <code>mod "shift"</code>, etc.

                                If <code>null</code> (the default value), the value of <code>services.qtile.mod</code> will be used.
                            '';
                        };
                        addMod = mkOption {
                            type = bool;
                            default = true;
                            description = "Whether to prepend <code>services.qtile.mod</code> to the modifier keys.";
                        };
                        key = mkOption {
                            type = either str (functionTo str);
                            description = "The key portion of the keybinding.";
                        };
                        action = mkOption {
                            type = str;
                            description = "The function to run on activating this keybinding.";
                        };
                    };
                };
            in {
                options.services.qtile = {
                    enable = mkEnableOption "Qtile";
                    package = mkPackageOption pkgs "qtile" {};
                    python3Package = mkOption {
                        type = types.package;
                        default = pkgs.python3;
                        defaultText = literalExpression "pkgs.python3";
                        description = "The Python 3 package to be used for the <code>python3Packages</code> attribute.";
                    };
                    python3Packages = mkOption {
                        type = with types; nullOr (attrsOf package);
                        default = null;
                        description = "The Python 3 packages attribute set.";
                    };
                    packages = mkOption {
                        type = with types; listOf (either nonEmtpyStr package);
                        default = [];
                        description = "A list of packages or package names for <command>qtile</command> to install.";
                    };
                    extraInit = mkOption {
                        default = "";
                        type = types.lines;
                        description = "Extra commands that should be run at the very beginning of initializing a <command>qtile</command> session.";
                    };
                    extraConfig = mkOption {
                        default = "";
                        type = types.lines;
                        description = "Extra commands that should be run when initializing a <command>qtile</command> session.";
                    };
                    imports = mkOption {
                        type = with types; listOf nonEmptyStr;
                        default = [];
                        description = "List of packages to be imported into the <command>qtile</command> config.";
                    };
                    fromImports = mkOption {
                        type = with types; attrsOf (listOf nonEmptyStr);
                        default = {};
                        description = "Attribute set of features to be imported into the <command>qtile</command> config from different packages.";
                    };
                    functions = mkOption {
                        type = types.lines;
                        default = "";
                        description = "Functions to include.";
                    };
                    mod = mkOption {
                        type = with types; either str (functionTo str);
                        default = "mod4";
                        description = "Modifier key for <command>qtile</command>.";
                    };
                    keys = mkOption {
                        type = types.listOf Key;
                        default = [];
                        description = ''
                            A list of attribute sets / modules of keybindings,
                            comprised of the modifier keys, the keys, and the function to run.
                        '';
                    };
                    groups = mkOption {
                        type = types.listOf Group;
                        default = [];
                        description = ''
                            A list of attribute sets / modules of groups,
                            comprised of the names and a list of matches of the Match module.
                        '';
                    };
                    dgroupsKeyBinder = mkOption {
                        type = with types; submodule {
                            options = {
                                enable = mkSubmoduleEnableOption "dgroupsKeyBinder";
                                key = mkOption {
                                    type = oneOf [ null str (functionTo str) ];
                                    default = null;
                                    description = "";
                                };
                            };
                        };
                        default.enable = true;
                        description = "";
                    };
                    layouts = mkOption {
                        type = types.listOf Layout;
                        default = [];
                        description = ''
                            A list of attribute sets / modules of layouts,
                            comprised of the <code>layout</code> function to be used and any keyword arguments that the function can take.
                        '';
                    };
                    variables = mkOption {
                        type = types.attrs;
                        default = {};
                        description = "";
                    };
                    mouse = mkOption {
                        type = types.listOf Mouse;
                        default = [];
                        description = ''
                            A list of attribute sets / modules of mouse events,
                            comprised of the <code>mouse</code> event function to be used and any keyword arguments that the function can take.
                        '';
                    };
                };
                config = let
                    mkWithPackages = pkg: pkglist: pname: (pkg.override {
                        inherit (cfg) python3;
                        python3Packages = with cfg; if (python3Packages == null) then cfg.pkgs else python3Packages;
                    }).overrideAttrs (old: {
                        propagatedBuildInputs = flatten [
                            (iron.filters.has.list cfg.packages python3Packages)
                            (old.propagatedBuildInputs or [])
                        ];
                    });
                    imports = toList cfg.imports;
                    fromImports = mapAttrs (n: toList) (iron.attrTree.attrsRemoveNull cfg.fromImports);
                in mkIf cfg.enable (mkMerge (flatten [
                    {
                        services.qtile = mkBefore {
                            dgroupsKeyBinder.key = mkIf (cfg.dgroupsKeyBinder.enable && (cfg.dgroupsKeyBinder.key == null)) cfg.mod;
                            package = (if (cfg.package ? withPackages) then inputs.bundle.lib.iron.mkWithPackages else mkWithPackages) cfg.package packages null;
                        };
                    }
                    { home.packages = toList cfg.package; }
                    (let
                        optStrings = flatten [
                            cfg.extraInit
                            (optionalString (imports != []) ("import " + (concatStringsSep ", " imports)))
                            (map newcat [
                                (mapAttrsToList (n: v: optionalString (v != []) "from ${n} import ${concatStringsSep ", " v}") fromImports)
                                (mapAttrsToList convertAssignment cfg.variables)
                            ])
                            cfg.functions
                            (optionalString (cfg.mod != "") "mod = ${cfg.mod}")
                            (let
                                Keys = map (k: let
                                    kmod = if (k.mod == null) then (f: "mod")
                                        else if (isList k.mod) then (flatten [
                                            (optional ((! (elem null k.mod)) && k.addMod) (f: "mod"))
                                            (map (m: if (m == null) then (f: "mod") else m) k.mod)
                                        ])
                                        else if k.addMod then [ (f: "mod") k.mod ]
                                        else k.mod;
                                in ''
                                    Key(
                                        ${convert (toList kmod)}, ${convert k.key},
                                        ${k.action},
                                    ),
                                '') cfg.keys;
                            in optionalString (cfg.keys != []) ''
                                keys = [
                                    ${newcat Keys}
                                ]
                            '')
                            (let
                                Groups = map (g: let
                                    gName = if (isString g) then g else g.name;
                                    gMatches = optionalString ((isAttrs g) && (g ? matches)) (let
                                        matches = map (m: concatStringsSep ", " (mapAttrsToList convertAssignment m)) g.matches;
                                        Matches = concatStringsSep "), Match(" matches;
                                    in ", matches = [ Match(${Matches}) ]");
                                in "Group(${gName}${gMatches})") cfg.groups;
                            in optionalString (cfg.groups != []) ''
                                groups = [
                                    ${newcat Groups}
                                ]
                            '')
                            (optionalString cfg.dgroupsKeyBinder.enable "dgroups_key_binder = simple_key_binder(${convert cfg.dgroupsKeyBinder.key})")
                            (let
                                Layouts = map (l: let
                                    args = concatStringsSep ", " (map convert l.args);
                                    kwargs = optionalString (l.kwargs != {}) (", " + (concatStringsSep ", " (mapAttrsToList convertAssignment l.kwargs)));
                                in "layout.${l.function}(${args}${kwargs})") cfg.layouts;
                            in optionalString (cfg.layouts != []) ''
                                layouts = [
                                    ${newcat Layouts}
                                ]
                            '')
                            (let
                                Mice = map (m: let
                                    args = concatStringsSep ", " (map convert m.args);
                                    kwargs = optionalString (m.kwargs != {}) (", " + (concatStringsSep ", " (mapAttrsToList convertAssignment m.kwargs)));
                                in "${m.function}(${args}${kwargs})") cfg.mouse;
                            in optionalString (cfg.mouse != []) ''
                                mouse = [
                                    ${newcat Mice}
                                ]
                            '')
                        ];
                    in iron.imap1r (i: v: { xdg.configFile."qtile/config.py".text = mkOrder (1000 - i) v; }) optStrings)
                    { xdg.configFile."qtile/config.py".text = mkAfter cfg.extraConfig; }
                ]));
            };
            xonsh = { config, options, ... }: let
                cfg = config.programs.xonsh;
                code = with types; submodule {
                    options.code = mkOption {
                        type = nonEmptyStr;
                        description = "A shell alias that will be treated as code, and not be quoted.";
                    };
                };
            in {
                options.programs.xonsh = {
                    enable = mkEnableOption "Xonsh";
                    package = mkPackageOption pkgs "xonsh" {};
                    python3Packages = mkOption {
                        type = with types; attrsOf package;
                        default = pkgs.python3Packages;
                        description = "The Python 3 packages attribute set.";
                    };
                    packages = mkOption {
                        type = with types; listOf (either nonEmtpyStr package);
                        default = [];
                        description = "A list of packages or package names for <command>xonsh</command> to install.";
                    };
                    initExtra = mkOption {
                        default = "";
                        type = types.lines;
                        description = "Extra commands that should be run when initializing an interactive shell.";
                    };
                    imports = mkOption {
                        type = with types; listOf nonEmptyStr;
                        default = [];
                        description = "List of packages to be imported into the <command>xonsh</command> config.";
                    };
                    fromImports = mkOption {
                        type = with types; attrsOf (listOf nonEmptyStr);
                        default = {};
                        description = "Attribute set of features to be imported into the <command>xonsh</command> config from different packages.";
                    };
                    sessionVariables = mkOption {
                        default = {};
                        type = types.attrs;
                        example = {
                            MAILCHECK = 30;
                            CWD = f: "Path.cwd()";
                        };
                        description = "Environment variables that will be set for the Xonsh session.";
                    };
                    sessionVariablesAppend = mkOption {
                        default = {};
                        type = types.attrs;
                        example = {
                            MAILCHECK = 30;
                            CWD = f: "Path.cwd()";
                        };
                        description = "Environment variables that will be added to existing environment variables for the Xonsh session.";
                    };
                    sessionPath = mkOption {
                        type = with types; listOf (either nonEmptyStr code);
                        default = [ ];
                        example = [
                            "$HOME/.local/bin"
                            "\${xdg.configHome}/emacs/bin"
                            ".git/safe/../../bin"
                            { code = "Path.cwd()"; }
                        ];
                        description = ''
                            Extra directories to add to <envar>PATH</envar>.
                            </para><para>
                            These directories are added to the <envar>PATH</envar> variable in a
                            double-quoted context, so expressions like <code>$HOME</code> are
                            expanded by the shell. However, since expressions like <code>~</code> or
                            <code>*</code> are escaped, they will end up in the <envar>PATH</envar>
                            verbatim.
                        '';
                    };
                    shellAliases = mkOption {
                        default = {};
                        type = with types; attrsOf (either str (functionTo str));
                        example = literalExpression ''
                            {
                                ll = "ls -l";
                                ".." = "cd ..";
                            }
                        '';
                        description = ''
                            An attribute set that maps aliases (the top level attribute names in
                            this option) to command strings or directly to build outputs.
                        '';
                    };
                    functions = mkOption {
                        type = types.lines;
                        default = "";
                        description = "Functions to include.";
                    };
                    xontribs = mkOption {
                        type = with types; listOf nonEmptyStr;
                        default = [];
                        description = "Xontribs to enable.";
                    };
                };
                config = let
                    mkWithPackages = pkg: pkglist: pname: (pkg.override {
                        inherit (cfg) python3Packages;
                    }).overrideAttrs (old: {
                        propagatedBuildInputs = flatten [
                            (iron.filters.has.list cfg.packages python3Packages)
                            (old.propagatedBuildInputs or [])
                        ];
                    });
                    imports = toList cfg.imports;
                    fromImports = mapAttrs (n: toList) (iron.attrTree.attrsRemoveNull cfg.fromImports);
                in mkIf cfg.enable (mkMerge (flatten [
                    {
                        programs.xonsh = mkBefore {
                            package = (if (cfg.package ? withPackages) then inputs.bundle.lib.iron.mkWithPackages else mkWithPackages) cfg.package packages null;
                        };
                    }
                    (let
                        optStrings = flatten [
                            (optionalString (imports != []) ("import " + (concatStringsSep ", " imports)))
                            (map newcat [
                                (mapAttrsToList (n: v: optionalString (v != []) "from ${n} import ${concatStringsSep ", " v}") fromImports)
                                (mapAttrsToList (convertAttrs false) cfg.sessionVariables)
                                (mapAttrsToList (convertAttrs true) cfg.sessionVariablesAppend)
                            ])

                            # TODO: Do I need this line: `sys.path.insert(0, "")'
                            (optionalString (cfg.sessionPath != []) ''
                                $PATH += [ "${concatStringsSep "\", \"" cfg.sessionPath}" ]
                            '')

                            cfg.functions
                            (map newcat [
                                (map (x: "xontrib load" + x) cfg.xontribs)
                                (mapAttrsToList (n: v: ''aliases["${n}"] = ${convert v}'') cfg.shellAliases)
                            ])
                        ];
                    in iron.imap1r (i: v: { home.file.".xonshrc".text = mkOrder (1000 - i) v; }) optStrings)
                    {
                        home = {
                            file.".xonshrc".text = mkAfter cfg.initExtra;
                            packages = toList cfg.package;
                        };
                    }
                ]));
            };
            elvish = { config, options, ... }: let
                cfg = config.programs.elvish;
                noldor = { config, name, ... }: with types; {
                    options = {
                        enable = mkSubmoduleEnableOption name;
                        url = mkOption {
                            type = nonEmptyStr;
                            description = "The elvish package to install using `epm'";
                        };
                        use = mkOption {
                            type = nullOr nonEmptyStr;
                            description = ''
                                The file to use from ${name}'s package.

                                If empty, the name of the package will be used.
                            '';
                        };
                    };
                };
            in {
                options.programs.elvish = {
                    enable = mkEnableOption "Elvish";
                    sessionVariables = mkOption {
                        default = {};
                        type = types.attrs;
                        example = { MAILCHECK = 30; };
                        description = ''
                            Environment variables that will be set for the Bash session.
                        '';
                    };
                    sessionPath = mkOption {
                        type = with types; listOf nonEmptyStr;
                        default = [ ];
                        example = [
                            "$HOME/.local/bin"
                            "\${xdg.configHome}/emacs/bin"
                            ".git/safe/../../bin"
                        ];
                        description = ''
                            Extra directories to add to <envar>PATH</envar>.
                            </para><para>
                            These directories are added to the <envar>PATH</envar> variable in a
                            double-quoted context, so expressions like <code>$HOME</code> are
                            expanded by the shell. However, since expressions like <code>~</code> or
                            <code>*</code> are escaped, they will end up in the <envar>PATH</envar>
                            verbatim.
                        '';
                    };
                    pathCheck = mkOption {
                        type = types.bool;
                        default = true;
                        description = "Whether to check if paths have disappeared when opening a new shell.";
                    };
                    shellAliases = mkOption {
                        default = {};
                        type = with types; attrsOf str;
                        example = literalExpression ''
                            {
                                ll = "ls -l";
                                ".." = "cd ..";
                            }
                        '';
                        description = ''
                            An attribute set that maps aliases (the top level attribute names in
                            this option) to command strings or directly to build outputs.
                        '';
                    };
                    package = mkPackageOption pkgs "elvish" {};
                    initExtra = mkOption {
                        default = "";
                        type = types.lines;
                        description = "Extra commands that should be run when initializing an interactive shell.";
                    };
                    lib = mkOption {
                        type = with types; attrsOf (submodule SourceText);
                        description = "";
                        default = {};
                    };
                    use = mkOption {
                        type = with type; listOf nonEmptyStr;
                        description = "";
                        default = [];
                    };
                    evaluations = mkOption {
                        type = with types; listOf nonEmptyStr;
                        default = [];
                        description = "Evaluations to be run.";
                    };
                    epm = mkOption {
                        type = with types; attrsOf (submodule noldor);
                        description = "";
                        default = {};
                    };
                    silenceEPM = mkOption {
                        type = types.bool;
                        description = "Silence <command>epm</command> if a package is already installed.";
                        default = true;
                    };
                };
                config = mkIf cfg.enable (mkMerge (flatten [
                    { home.packages = toList cfg.package; }
                    {
                        xdg.configFile = mapAttrs' (n: v: nameValuePair "elvish/lib/${n}.elv" {
                            inherit (v) source;
                        }) cfg.lib;
                    }
                    (let
                        optStrings = flatten [
                            (map newcat [
                                (map (u: "use " + u) cfg.use)
                                (mapAttrsToList (n: v: optionalString v.enable ''
                                    epm:install ${optionalString cfg.silenceEPM "&silent-if-installed"} ${v.url}
                                    use ${v.url}/${if (v.use == null) then n else v.use}
                                '') cfg.epm)
                                (mapAttrsToList (n: v: optionalString v.enable "use ${n}") cfg.lib)
                                (mapAttrsToList (n: v: "E:${n} = ${v}") cfg.sessionVariables)
                            ])
                            (optionalString (cfg.sessionPath != []) "path = [ ${toString cfg.sessionPath} ]")
#+end_src

Adapted from [[https://zzamboni.org/post/my-elvish-configuration-with-commentary/][here]]:

#+begin_quote
I have a quick sanity check because sometimes certain paths disappear depending on new versions, etc.
This prints a warning when opening a new shell, if there are any non-existing directories in ~$paths~.
We need some wrapping around ~path:eval-symlinks~ to avoid seeing warnings when the directory does not exist.
#+end_quote

#+begin_src nix
                            (optionalString cfg.pathCheck ''
                                each [p]{
                                    if (not (path:is-dir &follow-symlink $p)) {
                                        echo (styled "Warning: directory "$p" in $paths no longer exists." red)
                                    }
                                } $paths
                            '')
#+end_src

#+begin_src nix
                            (optionalString (cfg.epm != {}) "use epm")
                            (map newcat [
                                (mapAttrsToList (n: v: optionalString v.enable ''
                                    epm:install ${v.url}
                                    use ${v.url}/${if (v.use == null) then n else v.use}
                                '') cfg.epm)
                            ])
                            (optionalString (cfg.shellAliases != {}) ''
                                epm:install github.com/zzamboni/elvish-modules
                                use github.com/zzamboni/elvish-modules/alias
                            '')
                            (newCat (mapAttrsToList (n: v: "alias:new ${n} ${v}") cfg.shellAliases))
                        ];
                    in iron.imap1r (i: v: { xdg.configFile."elvish/rc.elv".text = mkOrder (1000 - i) v; }) optStrings)
                    { xdg.configFile."elvish/rc.elv".text = mkBefore cfg.initExtra; }
                    { xdg.configFile."elvish/rc.elv".text = mkAfter (newcat (map (e: ''eval "$(${e})"'') cfg.evaluations)); }
                ]));
            };
            bash = { config, options, ... }: let
                cfg = config.programs.bash;
            in {
                options.programs.bash = {
                    evaluations = mkOption {
                        type = with types; listOf nonEmptyStr;
                        default = [];
                        description = "Evaluations to be run.";
                    };
                };
                config = mkIf cfg.enable (mkMerge (flatten [
                    { programs.bash.initExtra = mkAfter (newcat (map (e: ''eval "$(${e})"'') cfg.evaluations)); }
                ]));
            };
            zsh = { config, options, ... }: let
                cfg = config.programs.zsh;
            in {
                options.programs.zsh = {
                    evaluations = mkOption {
                        type = with types; listOf nonEmptyStr;
                        default = [];
                        description = "Evaluations to be run.";
                    };
                    shellOptions = mkOption {
                        type = with types; listOf nonEmptyStr;
                        default = [];
                        description = "Options to be set.";
                    };
                };
                config = mkIf cfg.enable (mkMerge (flatten [
                    { programs.zsh.initExtra = mkAfter (newcat (map (e: ''eval "$(${e})"'') cfg.evaluations)); }
                    (let
                        optStrings = flatten [
                            (map (sepcat "setopt") cfg.shellOptions)
                        ];
                    in imap1 (i: v: { programs.zsh.initExtra = mkOrder (1500 + i) v; }) optStrings)
                ]));
            };
            tmux = { config, options, ... }: let
                cfg = config.programs.tmux;
            in {
                options.programs.tmux = {
                    displayTime = mkOption {
                        type = types.ints.positive;
                        default = 750;
                        example = 1250;
                        description = "Amount of time to display tmux messages.";
                    };
                    extraInit = mkOption {
                        type = types.lines;
                        default = "";
                        description = ''
                            Initial configuration to add to
                            <filename>tmux.conf</filename>.
                        '';
                    };
                    sources = mkOption {
                        type = with types; listOf (either nonEmptyStr path);
                        default = [];
                        description = ''
                            List of files to source.

                            Sourced after <code>config.programs.tmux.extraInit</code>.
                        '';
                    };
                    shells-to-run = mkOption {
                        type = with types; listOf nonEmptyStr;
                        default = [];
                        description = ''
                            List of shells to run.

                            Run after <code>config.programs.tmux.sources</code>.
                        '';
                    };
                    unbindings = mkOption {
                        type = with types; listOf nonEmptyStr;
                        default = [];
                        description = "List of keybindings to unbind.";
                    };
                    bindings = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of keybindings to bind.";
                    };
                    root-bindings = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of root keybindings to bind.";
                    };
                    repeating-bindings = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of repeating keybindings to bind.";
                    };
                    root-repeating-bindings = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of root repeating keybindings to bind.";
                    };
                    prefix-table-bindings = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of prefix table keybindings to bind.";
                    };
                    set = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of options to set.";
                    };
                    set-window = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of window options to set.";
                    };
                    set-server = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of server options to set.";
                    };
                    set-globally = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of options to set globally.";
                    };
                    set-window-globally = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of window options to set globally.";
                    };
                    set-server-globally = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of server options to set globally.";
                    };
                    set-and-append = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of options to append to.";
                    };
                    set-and-append-window = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of window options to append to.";
                    };
                    set-and-append-server = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of server options to append to.";
                    };
                    set-and-append-globally = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of options to append to globally.";
                    };
                    set-and-append-window-globally = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of window options to append to globally.";
                    };
                    set-and-append-server-globally = mkOption {
                        type = with types; attrsOf nonEmptyStr;
                        default = {};
                        description = "Attribute set of server options to append to globally.";
                    };
                };
                config = mkIf cfg.enable {
                    xdg.configFile."tmux/tmux.conf".text = let
                        concatList = with cfg; {
                            source = cfg.sources;
                            unbind = unbindings;
                            run-shell = shells-to-run;
                        };
                        concatSet = with cfg; {

#+end_src

Binding commands are adapted from [[https://man7.org/linux/man-pages/man1/tmux.1.html#KEY_BINDINGS][here]],
and explanations for the options are from [[https://superuser.com/users/1513284/bittahprofessional][bittahProfessional's]] answer [[https://superuser.com/a/1674459][here]]:

#+begin_src nix
                            bind-key = bindings;
                            "bind-key -n" = root-bindings;
                            "bind-key -r" = repeating-bindings;
                            "bind-key -nr" = root-repeating-bindings;
                            "bind-key -T prefix" = prefix-table-bindings;
                            inherit set;
                            "set -w" = set-window;
                            "set -s" = set-server;
                            "set -g" = set-globally;
                            "set -wg" = set-window-globally;
                            "set -sg" = set-server-globally;
                            "set -a" = set-and-append;
                            "set -aw" = set-and-append-window;
                            "set -as" = set-and-append-server;
                            "set -ag" = set-and-append-globally;
                            "set -agw" = set-and-append-window-globally;
                            "set -ags" = set-and-append-server-globally;
#+end_src

#+begin_src nix
                        };
                    in mkOrder 499 (newcat (flatten [
                        cfg.extraInit
                        "set -g ${toString cfg.displayTime}"
                        (mapAttrsToList (n: map (v: "${n} ${toString v}")) concatList)
                        (mapAttrsToList (command: mapAttrsToList (n: v: "${command} ${n} ${toString v}")) concatSet)
                    ]));
                };
            };
        };
        nixosModules = {
            persistence = { config, pkgs, ... }: {
                environment.persistence = let
                    reallyUnique = list: let
                        attrs = remove null (map (item: if (isAttr item) then (item.file or item.directory) else null) list);
                    in unique (filter (item: ! (elem item attrs)) list);
                    mergePersisted = set: list: reallyUnique (map (item: if (isString item) then (recursiveUpdate {
                        inherit item;
                    } set) else (recursiveUpdate set item)) (flatten list));
                in {
                    "/persist/root" = let
                        rootDirSet = {
                            user = "root";
                            group = "root";
                        };
                        rootFileSet.parentDirectory = rootDirSet;
                        etc-prefixes = [ "nixos" "containers" "NetworkManager/system-connections" "tailscale" ];
                    in {
                        hideMounts = true;
                        files = mergePersisted rootFileSet [
                            "/etc/host"
                            "/etc/machine-id"
                            (map (directory: iron.imports.list {
                                dir = "${inputs.user}/${directory}";
                                root = true;
                                file.prefix.post = "/${directory}";
                                ignores = {
                                    prefix = etc-prefixes;
                                    dirs = true;
                                };
                                recursive = true;
                            }) [ "etc" "var" ])
                        ];
                        directories = mergePersisted rootDirSet [
                            (map (d: "/etc/" + d) etc-prefixes)

                            "/bin"

                            # TODO: Prevents `sshd_config' itself from being created
                            # "/etc/ssh"

                            "/sbin"
                            "/snap"
                            "/usr"
                            "/var/lib/acme"
                            "/var/lib/bluetooth"
                            "/var/lib/systemd/coredump"
                            "/var/log"

                            # Managed by the `var' module
                            # "/var/lib/tailscale"
                        ];
                    };
                    "/persist" = let
                        redRepoFiles = flatten [
                            (iron.dirCon.others inputs.user)
                        ];
                        redRepoDirectories = flatten [
                            (iron.dirCon.dirs inputs.user)
                        ];
                    in {
                        users = mapAttrs' (designation: user: let
                            home = iron.attrs.allHomes.${designation};
                            pHome = "/persist/${home}";
                            userDirSet = {
                                inherit user;
                                group = user;
                            };
                            userFileSet.parentDirectory = userDirSet;
                            predRepoFiles = flatten [
                                (iron.dirCon.others pHome)
                            ];
                            predRepoDirectories = flatten [
                                (iron.dirCon.dirs pHome)
                            ];
                        in nameValuePair user {
                            inherit home;
                            files = mergePersisted userFileSet [
                                ".bash_history"
                                ".emacs-profile"
                                ".fasd"
                                ".gitignore"
                                ".globalignore"
                                ".nix-channels"
                                ".python-history"
                                ".screenrc"
                                ".viminfo"
                                ".zsh_history"
                                config.services.caddy.dataDir
                                redRepoFiles
                                predRepoFiles
                            ];
                            directories = mergePersisted userDirSet [
                                ".atom"
                                ".byobu"
                                ".cache"
                                ".config"
                                ".linuxbrew"
                                ".local"
                                ".mozilla"
                                ".peru"
                                ".pki"
                                ".repos"
                                ".user"
                                ".vim_runtime"
                                ".virtualenvs"
                                ".vscode-oss"
                                ".vscode"
                                ".yubico"
                                ".z"
                                "Documents"
                                "Downloads"
                                "keybase"
                                "Music"
                                "nix-plugins"
                                "Pictures"
                                "Public"
                                "Templates"
                                "tests"
                                "Videos"
                                "VirtualBox VMs"
                                { directory = ".gnupg"; mode = "0700"; }
                                { directory = ".nixops"; mode = "0700"; }
                                { directory = ".ssh"; mode = "0700"; }
                                { directory = ".gnupgk"; mode = "0700"; }
                                redRepoDirectories
                                predRepoDirectories
                            ];
                        }) iron.attrs.allUsers;
                    };
                };
            };
            borgmatic = { config, pkgs, ... }: {
                systemd = let
                    replace = replaceStrings [ "borgmatic-" ] [ "" ];
                    mkBaseWants = list: iron.systemd.wants ([ "rclone-backblazeB2.service" ] ++ list);
                    mkBase = n: rec {
                        description = "Borgmatic ${(iron.toCapital n)} Backup";
                        unitConfig.ConditionACPower = "true";
                        serviceConfig = {
                            CPUSchedulingPolicy = "batch";
                            ExecStart = let
                                inherit (config.home.${iron.attrs.allUsers.primary}.xdg.configFile."borgmatic.d/${n}.yaml") path;
                            in ''
                                ${pkgs.systemd}/bin/systemd-inhibit --who=\"${description}\" \
                                                                    --why=\"Prevent interrupting scheduled backup for `${description}'\" \
                                                                    ${config.home.programs.brogmatic.package}/bin/borgmatic \
                                                                    --verbosity -1 \
                                                                    --syslog-verbosity 1 \
                                                                    --config ${path}
                            '';
                            ExecStartPre = "${pkgs.coreutils}/bin/sleep 10m";
                            IOSchedulingClass = "best-effort";
                            IOSchedulingPriority = "7";
                            IOWeight = "100";
                            LockPersonality = "true";
                            LogRateLimitIntervalSec = "0";
                            MemoryDenyWriteExecute = "no";
                            Nice = "19";
                            NoNewPrivileges = "yes";
                            PrivateDevices = "yes";
                            PrivateTmp = "yes";
                            ProtectClock = "yes";
                            ProtectControlGroups = "yes";
                            ProtectHome = "tmpfs";
                            ProtectHostname = "yes";
                            ProtectKernelLogs = "yes";
                            ProtectKernelModules = "yes";
                            ProtectKernelTunables = "yes";
                            ProtectSystem = "strict";
                            Restart = "no";
                            RestrictAddressFamilies = "AF_UNIX AF_INET AF_INET6 AF_NETLINK";
                            RestrictNamespaces = "yes";
                            RestrictRealtime = "yes";
                            RestrictSUIDSGID = "yes";
                            SystemCallArchitectures = "native";
                            SystemCallErrorNumber = "EPERM";
                            SystemCallFilter = "@system-service";
                            Type = "oneshot";
                        };
                    };
                    borgmatic-services = iron.mapAttrNames (n: v: "borgmatic-" + n) {
                        oreo = rec {
                            wants = mkBaseWants [ "chimchar-oreo.mount" "oreo.mount" ];
                            after = wants;
                            serviceConfig = {
                                ReadWritePaths = "-/oreo";
                                ReadOnlyPaths = "-/chimchar/oreo";
                            };
                        };
                        oreo-rsync = rec {
                            wants = mkBaseWants [ "chimchar-oreo.mount" ];
                            after = wants;
                            serviceConfig.ReadOnlyPaths = "-/chimchar/oreo";
                        };
                        chimchar = rec {
                            wants = mkBaseWants [ "chimchar.mount" "infernape.mount" ];
                            after = wants;
                            serviceConfig = {
                                ReadWritePaths = "-/infernape";
                                ReadOnlyPaths = "-/chimchar";
                            };
                        };
                        user = rec {
                            wants = mkBaseWants [ "${replaceStrings [ "/" ] [ "-" ] (removeSuffix "/" (removePrefix "/" iron.attrs.homes.primary))}.mount" ];
                            after = wants;
                            serviceConfig = {
                                BindPaths = "-<<userrepo>> -${iron.attrs.homes.primary}/.user";
                            };
                        };
                    };
                in {
                    services = mkMerge (flatten [
                        (mapAttrs (n: v: iron.fold.recursive [
                            iron.attrs.configs.services.base
                            (mkBase (replace n))
                            v
                        ]) borgmatic-services)
                    ]);
                };
                timers = let
                    mkBase = n: {
                        description = "Borgmatic ${toCapital n} Backup Timer";
                        wantedBy = [ "timers.target" ];
                        timeConfig = {
                            OnCalender = "*-*-* */6:00:00";
                            Persistent = "true";
                            RandomizedDelaySec = "3h";
                        };
                    };
                in mkMerge (flatten [
                    (genAttrs (attrNames borgmatic-services) (t: mkBase (replace t)))
                    (mapAttrs' (n: v: "borgmatic-${n}" (recursiveUpdate (mkBase (replace t)) v)) {
                        user.timeConfig = {
                            OnCalender = "*-*-* */3:00:00";
                            RandomizedDelaySec = "90min";
                        };
                    })
                ]);
            };
            etc = args@{ config, system, ... }: {
                etc = let
                    mountable-mounted = pkgs.writeShellScript "mountable-mounted" ''
#+end_src

Adapted from [[https://stackoverflow.com/users/20713/ephemient][ephemient's]] answer [[https://stackoverflow.com/a/171041/10827766][here]], and
[[https://www.cyberciti.biz/faq/finding-bash-shell-array-length-elements/#:~:text=How%20do%20I%20find%20out%20bash%20shell%20array%20length%3F][here]]:


#+begin_src shell
                        list=$(zfs list -rHo name,mountpoint,mounted $1) || exit 75
                        list=($list)
                        pm=3
                        for ((i = 0; i <= ''${#list[@]} - $pm; i = i + $pm)); do
                            name=''${list[$i]}
                            mountpoint=''${list[$i + 1]}
                            mounted=''${list[$i + 2]}
                            if [[ "$mountpoint" != "none" ]] && [[ $mounted == "no" ]]; then
                                echo "Dataset \"$name\" is not mounted to \"$mountpoint\"."
                                exit 75
                            fi
                        done
#+end_src

#+begin_src nix
                    '';
                in {
                    "nix/nix.conf".text = mkForce iron.attrs.configs.nix;
                    "zsh/keephack".source = "${grml}/etc/zsh/keephack";
                };
            };
            home-manager = args@{ config, pkgs, ... }: {
                home-manager = {
                    imports = attrValues self.homeModules;
                    users = mkMerge [
                        (mapAttrs' (user: designation: let
                            homeDirectory = iron.attrs.allHomes.${designation};
                            cfg = config.home-manager.users.${user};
                            cfgx = cfg.xdg.configFile;
                            relToZshDir = cfg.programs.zsh.dotDir or "";
                            direnv = "${pkgs.direnv}/bin/direnv";
                            emacsclient = "${cfg.services.emacs.package}/bin/emacsclient";
                            fzf-tmux = "${cfg.programs.fzf.package}/bin/fzf-tmux";
                            fasd = "${pkgs.fasd}/bin/fasd";
                            zoxide = "${cfg.programs.zoxide.package}/bin/zoxide";
                            starship = "${cfg.programs.starship.package}/bin/starship";
                            sh = "${pkgs.bash}/bin/sh";
                            proFile = cfg.home.file.".profile".source;
                            profile = readFile proFile;
                        in nameValuePair user {
                            inherit nixpkgs;
                            useGlobalPkgs = true;
                            useUserPackages = true;
                            editorconfig = {
                                enable = true;
                                bundle = mapAttrs (n: fromTOML) {
                                    "*" = ''
                                        <<75251650-8670-4ab9-ac68-2952b9356b35>>
                                    '';
                                    "{Makefile,makefile,*.mk}" = ''
                                        <<5c1c7733-fb2e-4055-83bd-c124f4081666>>
                                    '';
                                    "{*.cmd,*.CMD,*.bat,*.BAT}" = ''
                                        <<218be869-799e-471d-b228-87e1db430de6>>
                                    '';
                                    "{*.sh}" = ''
                                        <<2bcf53b8-f7b1-4c28-9dda-44eb176eac27>>
                                    '';                                
                                };
                            };
                            nix = {
                                checkConfig = true;
                                extraOptions = ''
                                    <<generate-nix-conf()>>
                                '';
                                inherit (bundle) registry;
                            };
                            programs = {
                                assh = {
                                    enable = true;
                                    hosts = mkMerge [
#+end_src

#+name: efee5a24-3aac-44d1-a94b-713c35480acd
#+begin_src emacs-lisp :var host=""
(substring (shell-command-to-string (format "tailapi --access-token $(pass show keys/oauth/tailscale/syvl.org/master) -d %s ip -f4" host)) 0 -1)
#+end_src

#+begin_src nix
                                        (mapAttrs (n: hostname: {
                                            inherit hostname;
                                            gateways = flatten [
                                                (map (dotcat hostname) [
                                                    "magic"
                                                    "tailscale.4"
                                                    "tailscale.6"
                                                    "tailapi.4"
                                                    "tailapi.6"
                                                    "dns"
                                                ])
                                                direct
                                                "${hostname}.local.hostname"
                                                "argus"
                                            ];
                                        }) {
                                            sandshrew = "<<efee5a24-3aac-44d1-a94b-713c35480acd(host="sandshrew")>>";
                                        })
                                        {
                                            argus = {
                                                hostname = "io.syvl.org";
                                                gateways = flatten [
                                                    (map (dotcat "argus") [
                                                        "magic"
                                                        "tailscale.4"
                                                        "tailscale.6"
                                                        "tailapi.4"
                                                        "tailapi.6"
                                                        "dns"
                                                    ])
                                                    "direct"
                                                    (map (dotcat "argus.wstunnel") [
                                                        "tls.magic"
                                                        "tls.tailscale"
                                                        "tls.tailapi"
                                                        "tls.dns"
                                                        "tls.public"
                                                        "http.magic"
                                                        "http.tailscale"
                                                        "http.tailapi"
                                                        "http.dns"
                                                        "http.public"
                                                        "io.magic"
                                                        "io.tailscale"
                                                        "io.tailapi"
                                                        "io.dns"
                                                        "io.public"
                                                    ])
                                                ];
                                            };
#+end_src

Adapted from [[https://askubuntu.com/users/201083/kervin][kervin's]] answer [[https://askubuntu.com/a/520109/1058868][here]]:

#+begin_src nix
                                            "*.magic".resolvecommand = ''${sh} -c "echo %h | cut -d '.' -f 1"'';
#+end_src

Adapted from [[https://stackoverflow.com/users/2554537/zedfoxus][zedfoxus's]] answer [[https://stackoverflow.com/a/22727211/10827766][here]]:

#+begin_src nix
                                            "*.tailscale.*".resolvecommand = ''${sh} -c "${pkgs.tailscale}/bin/tailscale ip -$(echo %h | rev | cut -d '.' -f 1) $(echo %h | cut -d '.' -f 1)"'';
#+end_src

#+begin_src nix
                                            "*.tailapi.*".resolvecommand = ''${sh} -c "${pkgs.tailapi}/bin/tailapi -rD sylvorg.github --api-key $(pass show keys/api/tailscale/jeet.ray) -d $(echo %h | cut -d '.' -f 1) ip -f$(echo %h | rev | cut -d '.' -f 1)"'';
#+end_src

#+begin_src nix
                                            "*.dns".resolvecommand = ''${sh} -c "echo $(echo %h | cut -d '.' -f 1).syvl.org"'';
#+end_src

Adapted from [[https://stackoverflow.com/users/807131/ddoxey][ddoxey's]] question [[https://stackoverflow.com/questions/13552881/can-i-determine-the-current-ip-from-a-known-mac-address][here]]:

#+begin_src nix
                                            "*.local.hostname".resolvecommand = ''${sh} -c "ping -c 1 $(echo %h | cut -d '.' -f 1) | head -1 | awk '{print $3}' | sed 's/[()]//g'"'';
#+end_src

Adapted from [[https://stackoverflow.com/users/1291650/hanoo][hanoo's]] answer [[https://stackoverflow.com/a/36366894/10827766][here]]:

#+begin_src nix
                                            "*.local.mac".resolvecommand = ''${sh} -c "ip neighbor | grep -i $(echo %h | cut -d '.' -f 1) | cut -d ' ' -f 1"'';
#+end_src

#+begin_src nix
                                        }
                                        (iron.mapAttrNames (N: V: dotcat "argus" N) (iron.fold.set [
                                            (attrValues (mapAttrs (protocol: port: mapAttrs' (n: v: nameValuePair "wstunnel.${protocol}.${n}" { proxycommand = v + "${toString port}\""; }) {
                                                magic = ''sh -c "wstunnel -L stdio:%h:%p wss://$(echo %h | cut -d '.' -f 1):'';
                                                tailscale = ''${sh} -c "wstunnel -L stdio:%h:%p wss://$(tailscale ip -$(echo %h | rev | cut -d '.' -f 1) $(echo %h | cut -d '.' -f 1)):'';
                                                tailapi = ''${sh} -c "wstunnel -L stdio:%h:%p wss://$(tailapi -rD sylvorg.github --api-key $(pass show keys/api/tailscale/jeet.ray) -d $(echo %h | cut -d '.' -f 1) ip -f$(echo %h | rev | cut -d '.' -f 1)):'';
                                                dns = ''${sh} -c "wstunnel -L stdio:%h:%p wss://io.syvl.org:'';

                                                # TODO: Argus' Public IP
                                                # public = ''${sh} -c "wstunnel -L stdio:%h:%p wss://'';

                                            }) {
                                                tls = 443;
                                                http = 80;
                                            }))
                                            (mapAttrs' (n: proxycommand: nameValuePair (dotcat "iodine" n) { inherit proxycommand; }) {
                                                # magic = ''${sh} -c ""'';
                                                # tailscale = ''${sh} -c ""'';
                                                # tailapi = ''${sh} -c ""'';
                                                # dns = ''${sh} -c ""'';
                                                # public = ''${sh} -c ""'';
                                            })
                                        ]))
                                    ];
                                };
                                gpg = {
                                    enable = true;
                                    publicKeys = [
                                        {
                                            trust = 5;
                                            text = ''
                                                -----BEGIN PGP PUBLIC KEY BLOCK-----

                                                mQINBGJq3x0BEADVv97yaZ2dvNvJhmPWi8MSVpjLa5C1LgOEYU+d2icQgPa+znPq
                                                3975Tjh0tN64DpLpRCAOTt8nj+IzohQXrkDJ1VVzcK01HwWgTjYYDGhq7ziUd9yH
                                                38wCeiA/uUjXS/l27CZxiQnuUMj0PozLF5YungNtZcUaoXRw2bj/Evkbz3tc+QID
                                                FYCv6PPqQDmEZUw/UH6O0CKCtJMvEPbyT9S519Vo1AJ4mCO0HDQduwUiJOmcl3Jl
                                                3UrwiIc5jlyjVJr+VNS/DIuXZFXrJE+Xhqj9bHkS7nXgoPGnZVoW9yl7yevoywX4
                                                4R7stWEBEkpwpNpBfYvSb4N0zQ4OkbJzK+y6OH2VO7TiqdrtK8c1V8JndRO0Z6Y7
                                                eqQ6KgzKoxeW5lCQHBeyDTpk5JkW70Mkkame9KHpNh3ZryMpj5vWanfQ2w9SDusQ
                                                ybwJx9rmRtY8oykhpqPkj7orn+MV8r0GjWTVaQ8PuylzjDpj8WG7CUwkO+/wsMpb
                                                XwjLFlnHx3zq0q6hPeSk3Oc8e/iaL4QWXgxy6XbMEGcaiamN7+oWtaWS3lmscjHN
                                                0/+EYEJc3QYG7nHih3od0KdNxpb8IqM9JMQ7WExXk1n6VnvWNVApqA1Rx2APuIGg
                                                TkWlEdNI0ZI0nAZF/idazRZhfqfVotV2BA51T0mGx4VvCm7yNyQnVYKwJQARAQAB
                                                tCdKZWV0IFJheSAoamVldC5yYXkpIDxqZWV0LnJheUBzeXZsLm9yZz6JAk4EEwEI
                                                ADgWIQTarbDFXR7q9CL8fheMELh2VDUU+AUCYmrfHQIbAwULCQgHAgYVCgkICwIE
                                                FgIDAQIeAQIXgAAKCRCMELh2VDUU+MuwD/sF8ubYahmk7Lcqj7JnKwxHWWan7EJa
                                                5tQwwGDMRy8w6c/2wHxK2tq4icCisZk5E+quPrp4qFzo8gZVD7ZOM6CsXMBGpr9r
                                                eRHXqN+Sw/cc94hlGysjyR9MAW/Mw3p9eMoXvpiF/CV7roN1mASOJi8EIb3b7zNd
                                                uVfkjvPkDa6sVoPiQjOQzgCKEjYVvWJT3ffd6YAfNpxtmEACjNXCUOz6SpDyur0k
                                                tnwCIrLnhh2m8Rje+R9xoeXrXDvk1S7TK4GuNQrb3BuTYL4ctqRewpjgIwR2HjA7
                                                8/JN67TV2dekEiePQ/xShV6OjzuOBAF7pd4djdvxSgIQ49Ye/EaHkK5b7Mgn7UkO
                                                LWYiV+A3fP+M/KEyKi9wm2LvKpIBDQbP0tpkU9cBQZ5ZlNvv3FyIB3QfpTR2T79F
                                                B3rIWF9gYSDANxYuRNQfyDWb1Cx4UdyME22nqNSD0GW6KbWrABDnrgxg6cbeTdPK
                                                v9a3M5dZg2+NMvQt9wiidRYmCUYyqR99xCPMuhS9aqGOxoK89kkVKxmn69yAwmdw
                                                FsIPssL8Hu2cJx1LJR3efnoiOWBNkEfGPd6E2jKZicvoSZIp+URulgSCCo6ycVQt
                                                iysKuRxH0TOsnINAGl6S6Qo1FEwfbTp1Sle/YxeK83HhSzCvK08nxS9xJlMvwAVj
                                                EOPbF8Spb+Hbz7kCDQRiat8dARAAyYTWH54fFr/dvWvC6wpKYEhIoaV+PuSAukOi
                                                2FmomwiMPq4WjGL2qc/+/KK/kNL/CUgZxW5jySy5jRo4FWrtTKruOpWyCcW3vSb9
                                                TX9vWCP/jc+P/3lU3WJVfRpKuppwpB7Zji7ybfYnEP9ekT2YjgLT3wF9wFtbrkfU
                                                YyeI4jOgtL9BRA/3MNCfpdtEowWWF71avzzSg05zI3/2NT6N98oAqAZ1vGEbk836
                                                qZGrNm73bXQ5BWjwgN7A1NsR9Lycls8b+zsz5S70jyQmkN3dzpkCLgplDAgk3H7i
                                                n5+V3Vs7+6urk/1so17Ev76LhrEhejOr9YlVISHZ5keoPdxW+JZJXtAjeC5DjiOx
                                                UcmvKG8hkGE8miv3lVGoeWPCkyDO1pCXveRD4R/a13A3SagdmsJUOc61PQVgfE2l
                                                EAOOzDWIs9DD71Bw4UccetAnqracAIxfepx2L/L5JQvLi0ToUdp3PhGfwILnEPaQ
                                                RJZG24vXeK3zSsxg8BE1jyToidti0grxFI08Pq/e+G4v9Cawhx1KMQ2w4OMmVzjt
                                                v2kFOdo/qYQyJ235ps33iUiyaVP3v24T2CIKCMzWhtZ3BC3RnX7iZKVcjIYvPdo1
                                                1ruEHQ1TMHKe8zPWQzMBToBqllEE/RxlrLsqlNKmain/IKC0QkBHPUOS2lfCyzi7
                                                1NiupycAEQEAAYkCNgQYAQgAIBYhBNqtsMVdHur0Ivx+F4wQuHZUNRT4BQJiat8d
                                                AhsMAAoJEIwQuHZUNRT447QP/1cT14s9kjlIVDkags0ZyiJZachQ1TkRuH0S5lgj
                                                j5vFEnII0T1XbmAqbHW4lj8kmwk/vvTfy8LkvcBmxuY+/fi+uTdNVJ9czrFxzqW7
                                                KXEeJgXVt4MH3YwPqJVZk2GK7qcqiHxEMP6Pw842rLQ4rN+VtiFXoIQ8hah+hEef
                                                Z9WX+NvZ1wH+vo7aB1gEqQfvtxCvmce+G78ef5cKJeGu3abunD94s8EJ5xoXaG4J
                                                GStBoK/7QcVVWaJn9liHOstVupiU3isMY0sfjQVOod5s3l/kS8ziI3JF86YOCsM2
                                                2PFQaKQHfqskwEqoO/4T40xsq/OjZIH3SdqklKwp9NQe5GmMQFFTEssNaOagxK/q
                                                7KT196j+fNyeN+2nJFyJs/kaSYzKYUuTlwpM0Xi/kGNDbSY+E7XDc6TgLBRppz2n
                                                bTPU9wd40DZGZWEsad8Bevn7Q6Amv9ZEVhrrhDBOB1eYBtjWTJxGo8BRfREl2WQb
                                                nkT/csNLcJRujJoOaRzHEn9RRcTXc5dIWOeZTNZHVqjgQ1LckdUutnkpNy1+MBHQ
                                                ktKcDhm1DIqBm5URPGkj3TIgOJfLfGcQRLVO1KSaQG80AogbeaytfL+6qM/CyRGI
                                                /jbxRRSQms+WuKZxKmvN3wL0fshSJCtHh33oijjs26VEvUCqsk3YfNThbqf477+w
                                                GfJDuQINBGJq6OoBEADO6WDqVwcWWH5DyiktpnFze6GzdBtHXiV/nlyim1J6kXXG
                                                fJCfqtYY3TB1nkyoXDoXYe/1ywLf0ezIXqrHH0I9XRqo3ThK/SUJViFDoc2qgtYc
                                                B/Bkg3QvZuN2q+1lBrVSyO/C2Pklad4RKWsewOS5BO/BPFFdMu2d4XTpIXxfWztZ
                                                TnWs+rp6a1N8TzXEKIzm/QvKXGAIrZ5hHeefgYvTisFfowyLfI4Lm4A4Ofrrskaq
                                                8XdlSXaOVNrr5d1FGiv2Hos+/aoojtJX+V+uIlIhMo93broRBTt13u19exKmQF3J
                                                A1SKNiJ8RYqU3B3Ri0CJp0bT8aRakxJwp0HhBj8m+mWQY/QYOe3qbWFkG9ccZIsv
                                                9Ezg2oQcrLvECDnRWSUN/iICFH4cblAKnubup0A6GF4WyOEXhwl4jJ/GnqfiKdSl
                                                8KM4it7LtB6m6P0Vt53FImBzcK4TmsdgEyDq8rPUR0PL10vQRyNKkJz2cqpablq+
                                                VX5xucZbPu6w8vG6oRTBrRE+Q9wIoCrySF9qJE/tgImCKEWDWseGLkd4oHYfVhgg
                                                oTnMumhUtEN6LMXhusqdyhL5rAHJ3YMSTSrNc2zE+We/it3WFhlc68Daw6Kc/HYw
                                                qI8jhQ0OMS3CXNF2RXuxN1FlTZHS06h+2C9nBmbJO1WJ0Xllyi/cn9ISy/bM5QAR
                                                AQABiQI2BBgBCAAgFiEE2q2wxV0e6vQi/H4XjBC4dlQ1FPgFAmJq6OoCGyAACgkQ
                                                jBC4dlQ1FPgVMRAAu2nfCGDSI6vfXy9lvX9IUffTmV/aDidnamYYqLTLBRVcMe5T
                                                SKOVqk3I4e4HOPMAmm+WmIJLFPqx3GDnmx6hvG0Edwcx+FkfpidrC8qU5aWhyRAS
                                                MXMdfPs4mgRzQezvU+i4QqeS7k37OcPOobwqzLIjkq+0/ELFiaoCBLKscAE+juqq
                                                EmrBh3lFKHsWUF3YQSZ8PqjDGywFRO9dm+zc+ZE7AAqr7niGipjxNCoPG7bOX+Rd
                                                uv1Ko845+5idlDkpi4bsQbFpOLlEIkQcbnQHGPVlRRukApd9Wo+uUJxmUHNcL6ys
                                                qkXs7535ZPeCLdRQ2IS8OsoaeUnkJJl0XC6Old52bOkUtE+nUkFv6eyg+2KXAWKA
                                                4pDZD9n2YNc+MQnJTt31yotBNUEZoCBPjT9a3/2vsBRakyd992jxDJC300DwGJrE
                                                KX/7WGPbVeSnC29yBaZgsiXz9v6S3UF1RMOe7PkKPPY4EQiijNdmzchZRbVMI//a
                                                EyyJlCOTMkPId7Dctes5Yp6KROzhPFyTyOEeYM5tfm46cRGNkETkBgw+/5tMLA5Z
                                                qtvXo3WfQFAUHv6DI90XKhaB3+FeXsosBW5LmWJuy+tLnypiJR7nY0RHmYVI2ZXn
                                                MibZQg+ZAwmehn7ytlU3FiHPx4fYZd6gSsIUPZJ1twx4/5sW6nUv+iK6V0S5Ag0E
                                                YmrpVgEQAL/PWZUr+WRg7LHYK1Uz1x8Wa0rkNIjU3fGvYBcElg63hrGnCPCp4N4J
                                                nYwWZuNn4FJ1qDBm7merwUz5jCY2MRojEEHyMpluOy48Z+zVixOyDz6acD5LQzQE
                                                2pLx72Gry+dxpOqbC6iLytY465SYMOYHT1tt+fbBUuo+eLsMP+0y6TIEYldHffKB
                                                NZQDTf0FvWrTqn599zpG/3cHmAJ0LO3Hr1lG0d6bnXyYzoKyJUwu/kxhZ6Ypy0bZ
                                                m/TyzG80K6vWmaEmi6avyMx4EqfMxFxw0hkUiwtXw3HyStlUbGSL+/cnhWv1wRFZ
                                                TSj8EANHw3awDSoJK5+TIFWzbkyJ9fVRabX6X59eZ96zlhXEggX7Rct2aCLpnlcw
                                                vYjySxZ5lReulTXsZUsHMjHzCkaweoRtBqKVYGmeYIqId3CbMfLx87X2z/++T9jP
                                                3hIKaJg0VHSDCSEtsunWazPnlNAOMkk3GKUUQ+/f8nlQcm0G0iJr0Cf+M2U6fU2u
                                                mmc9Mwbt6wj3xslsWjS5oPIdHHN/Iv3qamGCOtuSCEaGC25uc4d3WEy17RhhwTa9
                                                AWPc5pSOoL6tlKXy0sQnyFCegkwehvoieLrIUgjWg/0cdUmziYxhXECXOwWPyhCm
                                                i8Om2l8yzrv9JGRDhyKyhMQQf8JvbKcuBZagqq756yu29AHSQqJ9ABEBAAGJBGwE
                                                GAEIACAWIQTarbDFXR7q9CL8fheMELh2VDUU+AUCYmrpVgIbAgJACRCMELh2VDUU
                                                +MF0IAQZAQgAHRYhBEdm0dTZAEMb9fn06yCVykzJwQUsBQJiaulWAAoJECCVykzJ
                                                wQUswQUQAIa5SxgY0cHz1aP/CUDF41SQuq1+nAqUmwXndNJ42iTAH/vGOVNBiXEH
                                                Q55CQO8mOHw0F0omhEg5cDdhh+YyP2pSHxyWqTGwY+RqVdLIkl4pAopOaAyGRoyD
                                                N333wJoRw+lVnqACPDe5pdXCWWrllfuiZvQfsKs4t7qGYIAn+TY4Uw+lHbMknYb/
                                                uDEPg03uSintuyu2l/yIGArMa0Ij3sh0jyfiFTaiylPafWBM/NfLnoCVSTbMURp5
                                                7nGM3BVp0yKYMhey20KrY+GFoDCeVhFn6E0cqh5NRmL853nG59JrT5nHBl2AaVIr
                                                +Vgwwsv1ltbCA2Jrb7V84Y7TjG90LHgRMVVsadzX1o4PMN2AoJ2plTj6tFTCDZDk
                                                KBm8DmaV6Rygt0rZhAztPW7jg/X5lkx2biiNJLFyPzYBxfGnd6/JCzhakHYETAmH
                                                srl0prUHrrcAH0pd7IZPandCE05bM9hOb7d4VtA7IT00TWeKn2M3Tf3QmE0hbcxb
                                                k/c+1ZRIxrx8HyQDkGFRVu4GwjTmSU5uRGu0Q9FvclRsxaAm7TMVUAZ/Q3ZLNta6
                                                b8TwGdbXHQOcG3DEO/awY0DhkWhuQrgnk7d+MtoV3xONbGb9H7kQtEadubd1EcNU
                                                M6I0oTdwvoHg/mcos9UWzTjY3kLa5bwNMeAKHcQfukio+giKuwFp6RkQAMIM3Hoh
                                                WQZPQqpU7/GsEt++onMP3G4RUKevUKH5meecmcgeu9NC9A+vT2GrrUVFh0juLIBE
                                                pT0FEuiduMj1zp+ByH1ywl0EnrtUPuJNjtqZLlWjfyVCz318Fo9LTB0yWUGQUU+L
                                                UM6qXWd1W2hGk4x4SNi2C5gnJ04fyPkP0dyxKbnQqTYQlltLC5pbgVRxq/0CmtCC
                                                uIMShTQ9CaX0w3VvMbra6fJgkZuRk8SOwFmA3YZ+a+CaYvo6PL9FQjxPIJ4PuBKL
                                                zUdJw4IOIHJi+n9KuwINwhvlJqvxFMY5vjLieI8moNezhVcGEwbGa/XT0mvZG6xP
                                                t0Wp/LtH8vM4pSxv+ftmmpiQhm0vL+17tlX3NDTp3HIySF5J1q5nEn3JpjmKIsGS
                                                FeHd85EM5NcVGyFSF11Q3XJciLz08H+xcJw1C7C/vV9dNX/icJRtW45+4lkBjBan
                                                7EtMyTfkQ9wahN8O7T32OoWrhl6QZe46CsKc9FEK2SdlAKyy0bG9MPZJ1kHxN/1c
                                                nkHgXg25cecCCN8Is/mEFQ650057Rqyz3zNtH+EVZwFNJGVgFMzrLQ0Q6QY+9A7J
                                                UFeHy12N2RGsGJpoJFoF1f0TrPinYU7TivvUJeWulGWKGr3CZHY//3NAji74iUsr
                                                REgsM22cpS836D7wEX0rtEYHPj9YAkfj53yI
                                                =LhpQ
                                                -----END PGP PUBLIC KEY BLOCK-----
                                            '';
                                        }
                                    ];
                                };
                                ion = {
                                    enable = true;
                                    inherit (cfg) shellAliases;
                                };
                                xonsh = {
                                    inherit (home) sessionPath;
                                    imports = [ "sys" "os" ];
                                    xontribs = [
                                        # "coreutils"
                                        # "docker_tabcomplete"
                                        # "schedule"
                                        # "ssh_agent"
                                        # "vox_tabcomplete"

                                        "abbrevs"
                                        "autoxsh"
                                        "bashisms"
                                        "pipeliner"
                                        "readable-traceback"
                                        "sh"
                                        "vox"
                                        "whole_word_jumping"
#+end_src

[[https://github.com/xonsh/xontrib-jedi][Jedi]] was what was causing the python function completions
instead of the path completions:

#+begin_src nix :noweb-ref no
                                        "jedi"
#+end_src

#+begin_src nix
                                    ];
                                    fromImports.pathlib = "Path";
                                    sessionVariablesAppend.bash_completions = toList inputs.bash-completion;
                                    sessionVariables = mkMerge [
                                        sessionVariables
                                        (genAttrs [
                                            "auto_cd"
                                            "auto_pushd"
                                            "auto_suggest_in_completions"
                                            "auto_suggest"
                                            "completion_in_thread"
                                            "completions_confirm"
                                            "dotglob"
                                            "fuzzy_path_completion"
                                            "mouse_support"
                                            "pretty_print_results"
                                            "update_completions_on_keypress"
                                            "update_os_environ"
                                            "vi_mode"
                                            "xonsh_autopair"
                                            "xonsh_cache_everything"
                                            "xonsh_show_traceback"
                                            "xonsh_store_stdout"
                                        ] (n: true))
                                        {
                                            histcontrol = f: ''{ "ignoreboth", "erasedups", "ignoreerr" }'';
                                            prompt_toolkit_color_depth = "DEPTH_24_BIT";
#+end_src

Deprecated; I use starship now.

#+begin_src nix :noweb-ref no
                                            prompt_fields.prompt_end = "Wheee! 😹 ";
                                            # prompt = "{BOLD_#E5004D}{env_name} {BOLD_#FF4081}{prompt_end}";
                                            prompt = lambda: $(${starship} prompt);
                                            # right_prompt = "{BOLD_#E5004D} {prompt_end}{BOLD_#FC9F71} || {BOLD_#E5004D} {user}@{hostname} ";
                                            # bottom_toolbar = f: "$RIGHT_PROMPT";
#+end_src

#+begin_src nix
                                            shell_type = "prompt_toolkit";
#+end_src

This enumerates all history files when set to true:

#+begin_src nix
                                            xonsh_debug = false;
#+end_src

#+begin_src nix
                                            xonsh_history_backend = "sqlite";
                                        }
                                    ];
                                    shellAliases = mkMerge [
                                        shellAliases

                                        # TODO: Rename and document these, then put these in a proper set:
                                        (genAttrs (a: f: "_" + a) [
                                            "cdf"
                                            "cdi"
                                            "cdr"
                                        ])

                                        {
                                            mdg = f: "mkdir_and_go";
                                            rc = f: "recent_commands";
                                            run = f: "_run";
                                            Run = f: "_Run";
                                            da = f: "direnv_allow";
                                            git = f: "lambda args, stdin=None: $(${pkgs.hub}/bin/hub @(args))";
                                            la = f: "lambda args, stdin=None: $(${cfg.programs.exa.package}/bin/exa -la --octal-permissions @(args))";
                                            md = f: "lambda args, stdin=None: $(mkdir -p @(args))";
                                            mosh = f: "lambda args, stdin=None: $(${pkgs.mosh}/bin/mosh --experimental-remote-ip=remote @(args))";
                                            ve = f: "lambda args, stdin=None: $(vox enter @(args)) if args else $(vox exit)";
#+end_src

Deprecated; I actually /like/ using ~vi / vim~ sometimes:

#+begin_src nix :noweb-ref no
                                            vi = f: "lambda args, stdin=None: $(${emacsclient} -c @(args))";
                                            vim = f: "lambda args, stdin=None: $(${emacsclient} -c @(args))";
#+end_src

Quick opening files with ~emacsclient~:

#+begin_src nix
                                            e = f: "lambda args, stdin=None: $(${fasd} -fe '${emacsclient} -c' @(args))";
#+end_src

Quick opening files with ~xdg-open~:

#+begin_src nix
                                            o = f: "lambda args, stdin=None: $(${fasd} -ae xdg-open @(args))";
#+end_src

#+begin_src nix
                                            s = "source ${cfg.home.file.".xonshrc".source}";
                                        }
                                    ];
                                    functions = ''
#+end_src

#+begin_src xonsh
def mkdir_and_go(args, stdin=None):
    mkdir -p @(args) && cd @(args[0])

def direnv_allow(args, stdin=None):
    if args:
        for argument in args:
            ${direnv} allow @(argument)
    else:
        ${direnv} allow

def _get_fzfdf_output(*args):
    if args:
        return $(${pkgs.fd}/bin/fd @((".", *args) if os.path.exists(args[0]) else args) | ${fzf-tmux}).strip("\n")
    else:
        return $(${pkgs.fd}/bin/fd | ${fzf-tmux}).strip("\n")

def _cdi(args, stdin=None):
    cd @(_get_fzfdf_output(*args, "-t", "d"))

def _cdr(args, stdin=None):
    cd @($(${zoxide} query -l | ${fzf-tmux}).strip("\n"))

def _cdf(args, stdin=None):
    cd @($(${fasd} -ld | ${fzf-tmux}).strip("\n"))

def recent_commands(args, stdin=None):
    hist = $(history show @(args))
    command = $(echo @(hist) | ${fzf-tmux}).strip("\n").split()
    if command:
        $(@(command))

def _run(args, stdin=None):
    args = list(args)
    args[0] = Path(expandvars(args[0]))).expanduser().resolve(strict = strict)
    chmod +x @(args[0]) && @(args)

def _Run(args, stdin=None):
    curl --create-dirs -fsSLo @(args[1]) @(args[0])
    _run(args[1:])
#+end_src

#+begin_src nix
'';
                                };
                                elvish = {
                                    inherit (home) sessionPath sessionVariables shellAliases;
                                    enable = true;
                                    evaluations = [
                                        "(${zoxide} init elvish | slurp)"
                                        "(${starship} init elvish)"
                                    ];
                                };
                                zoxide = {
                                    enable = true;
                                    enableBashIntegration = true;
                                    enableElvishIntegration = true;
                                    enableFishIntegration = true;
                                    enableXonshIntegration = true;
                                    enableZshIntegration = true;
                                };
                                direnv = {
                                    enable = true;
                                    enableBashIntegration = true;
                                    enableFishIntegration = true;
                                    enableXonshIntegration = true;
                                    enableZshIntegration = true;
                                };
                                fzf = {
                                    enable = true;
                                    enableBashIntegration = true;
                                    enableFishIntegration = true;
                                    enableZshIntegration = true;
                                    defaultCommand = "${pkgs.fd}/bin/fd --type f";
                                    tmux.enableShellIntegration = true;
                                };
                                exa = {
                                    enable = true;
                                    enableAliases = true;
                                };
                                bat.enable = true;
                                git = {
                                    enable = true;
                                    package = pkgs.hub;
                                    userEmail = if ("<<email>>" == "titaniumfiles@outlook.com") then "jeet.ray@syvl.org" else "<<email>>";
                                    userName = "Jeet Ray";
                                    signing = {
                                        gpgPath = "${cfg.programs.gpg.package}/bin/gpg";
                                        key = "DAADB0C55D1EEAF422FC7E178C10B876543514F8";
                                        signByDefault = true;
                                    };
                                    extraConfig = {
                                        core = {
                                            excludesfile = cfg.xdg.configFile."git/ignore".source;
                                            attributesfile = cfg.xdg.configFile."git/attributes".source;
                                            fileMode = false;
                                            hooksPath = "${homeDirectory}/.config/git/hooks";
                                        };
                                        protocol = {
                                            keybase.allow = "always";
                                            restic.allow = "always";
                                        };
                                        pull.rebase = false;
                                        filter.git = {
                                            clean = "${pkgs.bat}/bin/bat";
                                            smudge = "${pkgs.bat}/bin/bat";
                                        };
                                        diff.git.command = "git diff";
                                    };
                                    lfs.enable = true;
                                    ignores = splitString "\n" ''
                                        <<.gitignore>>
                                    '';
                                    attributes = splitString "\n" ''
                                        <<964e6c9e-f4f8-4def-8bab-6e13f95759a5>>
                                    '';
                                    aliases = let
                                       setup = ''
#+end_src

#+begin_src shell
#! /usr/bin/env nix-shell
#! nix-shell -E "(import ${inputs.user}).devShells.${builtins.currentSystem}.git-shell"
#! nix-shell -i sh
set -eo pipefail
root=$(git rev-parse --show-toplevel)
#+end_src

#+begin_src nix
'';
                                        dekey = pkgs.writeShellScript "dekey" ''
#+end_src

#+begin_src shell
${setup}
for gpgID in $@; do
#+end_src

Adapted from [[https://stackoverflow.com/users/15168/jonathan-leffler][Jonathan Leffler's]] answer [[https://stackoverflow.com/a/1429628/10827766][here]], and [[https://stackoverflow.com/users/1114966/squiguy][squiguy's]] answer [[https://stackoverflow.com/a/13662036/10827766][here]]:

#+begin_src shell
    rm "$root/.git-crypt/keys/default/0/$(gpg --fingerprint $gpgID | sed -n 2p | tr -d ' ').gpg"
#+end_src

#+begin_src shell
done
#+end_src

#+begin_src nix
                                        '';
                                        rekey = pkgs.writeShellScript "rekey" ''
${setup}
#+end_src

Adapted from [[https://unix.stackexchange.com/users/52727/chaos][chaos']] answer [[https://unix.stackexchange.com/a/181939/270053][here]]:

#+begin_src shell
tmpf=$(mktemp)
tmpd=$(mktemp -d)
tmpCrypt=$(mktemp -d)
#+end_src

Adapted from [[https://unix.stackexchange.com/users/83831/wurtel][wurtel's]] comment [[https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script#comment302878_181939][here]],
and [[https://unix.stackexchange.com/users/20482/ijoseph][ijoseph's]] comment [[https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script#comment1096615_181939][here]], stating:

#+begin_quote
For those wondering, the trailing integers in trap "rm -f $temp_file" 0 2 3 15 are the /signals/ [[https://www.shellscript.sh/trap.html][upon which to run the first argument]]. 0: exit shell, 2: Interrupt, 3: Quit, 15: Terminate.
#+end_quote

#+begin_src shell
trap "rm -rf $tmpf $tmpd $tmpCrypt" 0 2 3 15
#+end_src

Adapted from [[https://stackoverflow.com/users/2075062/epere4][epere4's]] answer [[https://stackoverflow.com/a/14892459/10827766][here]]:

#+begin_src shell
if [ -f "$root/.git" ]; then
    gitCrypt=$(realpath $(cat "$root/.git" | sed 's/.*: //'))
else
    gitCrypt="$root/.git/git-crypt"
fi
#+end_src

#+begin_src shell
git crypt unlock
git encrypted > $tmpf
#+end_src

Adapted from [[https://stackoverflow.com/users/100208/atp][atp's]] answer [[https://stackoverflow.com/a/30176688/10827766][here]]:

#+begin_src shell
rsync -avvczz --files-from $tmpf "$root" $tmpd
#+end_src

#+begin_src shell
rsync -avvczz "$root/.git-crypt/" $tmpCrypt/
rm -rf "$gitCrypt" "$root/.git-crypt"
git -C "$root" filter-repo --paths-from-file $tmpf --invert-paths --force
rsync -avvczz $tmpd/ "$root"/
git crypt init
for key in $(ls $tmpCrypt/keys/default/0/*gpg); do
    git crypt add-gpg-user $(basename $key .gpg)
done
[ -n "$1" ] && git crypt add-gpg-user $@ || :
#+end_src

#+begin_src nix
'';
                                    in {
                                        cnm = "commit --allow-empty-message -am ''";
                                        chRun = "!chmod +x $1 &&";
                                        user = ''!git -C "${homeDirectory}/user"'';
                                        commit-user = "user cnm";
                                        push-user = "user push";
                                        super-user = "!git commit-user && git push-user";
                                        bundle = ''!git -C "$(git rev-parse --show-toplevel)/bundle"'';
                                        bundle-up = ''!git bundle pull origin main && git add "$(git rev-parse --show-toplevel)/bundle" && git commit -m "Updated bundle repo"'';
                                        usp = "!git us && git push";
                                        sub = "submodule update --init --recursive --remote";
                                        submerge = "sub --merge";
                                        crossmerge = "!GIT_DISCOVERY_ACROSS_FILESYSTEM=1 git submerge";
                                        damerge = "!GIT_SSL_NO_VERIFY=1 git crossmerge";
                                        subinit = "sub --force";
                                        crossinit = "!GIT_DISCOVERY_ACROSS_FILESYSTEM=1 git subinit";
                                        daminit = "!GIT_SSL_NO_VERIFY=1 git crossinit";
#+end_src

Adapted from [[https://unix.stackexchange.com/users/48083/graeme][Graeme's]] answer [[https://unix.stackexchange.com/a/136798/270053][here]]:

#+begin_src nix
                                        encrypted = "!git crypt status -e | sed 's/.*: //'";
                                        decrypted = "!git crypt status -u | sed 's/.*: //'";
#+end_src

#+begin_src nix
                                        dekey = "!${dekey}";
                                        rekey = "!${rekey}";
                                    };
                                };
                                neovim.enable = true;
                                vim.enable = true;
#+end_src

Adapted from [[https://github.com/SpaceVim/SpaceVim/blob/master/mode/dark_powered.toml][here]]:

#+begin_src nix
                                spacevim = {
                                    enable = true;
                                    extraInit = ''
#+end_src

#+begin_src conf
#=======================================================================#
# dark_powered.toml --- dark powered configuration example for SpaceVim #
# Copyright (c) 2016-2020 Wang Shidong & Contributors                   #
# Author: Wang Shidong < wsdjeg at 163.com >                            #
# URL: https://spacevim.org                                             #
# License: GPLv3                                                        #
#=======================================================================#
#+end_src

#+begin_src nix
                                    '';
                                    layers = [
#+end_src

Enable autocomplete layer:

#+begin_src nix
                                        {
                                            name = "autocomplete";
                                            auto_completion_return_key_behavior = "complete";
                                            auto_completion_tab_key_behavior = "smart";
                                        }
#+end_src

#+begin_src nix
                                        {
                                            name = "shell";
                                            default_position = "top";
                                            default_height = 30;
                                        }
                                        { name = "lang#nix"; }
                                    ];
                                    plugins = [
#+end_src

Themes:

#+begin_src nix
                                        "tssm/fairyfloss.vim"
                                        # "co1ncidence/mountaineer.vim"
                                        # "co1ncidence/gunmetal.vim"
                                        # "megantiu/true.vim"
#+end_src

Adapted from [[https://vi.stackexchange.com/users/51/martin-tournoij][Martin Tournoij's]] answer [[https://vi.stackexchange.com/questions/678/how-do-i-save-a-file-in-a-directory-that-does-not-yet-exist/679#679][here]]:

#+begin_src nix
                                        "arp242/auto_mkdir2.vim"
#+end_src

#+begin_src nix
                                        "tpope/vim-eunuch"
                                        # "johannesthyssen/vim-signit"
                                        "jupyter-vim/jupyter-vim"
                                        "haya14busa/dein-command.vim"
                                        "andrep/vimacs"
                                        "shougo/denite.nvim"
                                        "shougo/defx.nvim"
                                        "shougo/deoplete.nvim"
                                    ];
                                    options = {
#+end_src

#+begin_quote
set spacevim theme. by default colorscheme layer is not loaded,
if you want to use more colorscheme, please load the colorscheme
layer
#+end_quote

#+begin_src nix
                                        colorscheme = "gruvbox";
                                        colorscheme_bg = "dark";
#+end_src

#+begin_quote
Disable guicolors in basic mode, many terminal do not support 24bit
true colors
#+end_quote

#+begin_src nix
                                        enable_guicolors = true;
#+end_src

#+begin_quote
Disable statusline separator, if you want to use other value, please
install nerd fonts
#+end_quote

#+begin_src nix
                                        statusline_separator = "arrow";
                                        statusline_iseparator = "arrow";
                                        buffer_index_type = 4;
                                        enable_tabline_filetype_icon = true;
                                        enable_statusline_mode = false;
                                        bootstrap_before = "vimrc#before";
                                        bootstrap_after = "vimrc#after";
                                        escape_key_binding = "";
                                    };
                                    vimAutoloads.vimrc = ''
#+end_src

#+begin_src vimrc
function! vimrc#before() abort
endfunction

function! vimrc#after() abort
    syntax on
    filetype plugin indent on

    " enable 24bit true color
    if (has("termguicolors"))
    set termguicolors
    endif

    " enable the theme
    syntax enable
    colorscheme fairyfloss

    let g:true_airline = 1
    let g:airline_theme='true'

    " for kitty
    let &t_ut=""

    " disables border on left side
    set foldcolumn=0

    " Spaces & Tabs
    set tabstop=4       " number of visual spaces per TAB
    set softtabstop=4   " number of spaces in tab when editing
    set shiftwidth=4    " number of spaces to use for autoindent
    set expandtab       " tabs are space
    set autoindent
    set copyindent      " copy indent from the previous line

    " set number relativenumber

    " Insert Toggle
    imap ;; <ESC>
    map ;; i <BACKSPACE>

    " Change two spaces to four
    map \\ :set ts=2 sts=2 noet <bar> :retab! <bar> :set ts=4 sts=4 et <bar> :retab <CR>
    imap \\ <ESC> :set ts=2 sts=2 noet <bar> :retab! <bar> :set ts=4 sts=4 et <bar> :retab <CR>

    " Change movement keys to <space>wasd
    noremap <Space-a> h
    noremap <Space-s> j
    noremap <Space-w> k
    noremap <Space-d> l

    " Set Paste
    command SMP :set paste <CR>

    " Set NoPaste
    command SNP :set nopaste <CR>

    " Tab to insert
    map <TAB> i <TAB>

    " Vim Signit
    let g:signit_initials = "JR"
    let g:signit_name = "Jeet Ray"
    " let g:signit_extra_1
    " let g:signit_extra_2
    " let g:signit_position
    let g:signit_ascii_font = "isometric1.flf"
    " let g:signit_ascii_spacing

    if has('nvim')
        call dein#add('iron-e/nvim-libmodal')
        call dein#add('shougo/deol.nvim')
        call dein#add('shougo/deoppet.nvim')
        call dein#add('shougo/deorise.nvim')
    else
        call dein#add('iron-e/vim-libmodal')
        call dein#add('roxma/nvim-yarp')
        call dein#add('roxma/vim-hug-neovim-rpc')
    endif

    let g:deoplete#enable_at_startup = 1
endfunction
#+end_src

#+begin_src nix
'';
                                };
                                fish = {
                                    enable = true;
                                    plugins = with fishPlugins; [
                                        { inherit (bass) name src; }
                                        { name = "nix-env"; src = inputs.nix-env-fish; }
                                    ];
                                    shellAliases.s = "source ${cfgx."fish/config.fish".source}/.config/fish/config.fish";
                                    shellInit = "bass source ${proFile}";
                                };
                                starship = {
                                    enable = true;
                                    enableBashIntegration = true;
                                    enableFishIntegration = true;
                                    enableIonIntegration = true;
                                    enableElvishIntegration = true;
                                    enableNushellIntegration = true;
                                    enableZshIntegration = true;
                                    enableXonshIntegration = true;
#+end_src

Adapted from [[https://starship.rs/presets/pastel-powerline.html][here]] and [[https://github.com/starship/starship/discussions/1323#discussioncomment-25870][here]],
with colors from [[https://coolors.co/palette/ffadad-ffd6a5-fdffb6-caffbf-9bf6ff-a0c4ff-bdb2ff-ffc6ff-fffffc][here]]:

#+begin_src nix
                                    settings = let
                                        red = "#FFADAD";
                                        orange = "#FFD6A5";
                                        yellow = "#FDFFB6";
                                        green = "#CAFFBF";
                                        cyan = "#9BF6FF";
                                        blue = "#A0C4FF";
                                        purple = "#BDB2FF";
                                        pink = "#FFC6FF";
                                        white = "#FFFFFC";
                                        grey = "#222222";
                                    in {
                                        format = ''
                                            [ ](bg:${red})\
                                            $username\
                                            [](bg:${orange} fg:${red})\
                                            $env_var\
                                            [](bg:${yellow} fg:${orange})\
                                            $directory\
                                            [](bg:${green} fg:${yellow})\
                                            $git_branch\
                                            $git_status\
                                            [](bg:${cyan} fg:${green})\
                                            $nix_shell\
                                            [](bg:${blue} fg:${cyan})\
                                            $c\
                                            $elixir\
                                            $elm\
                                            $golang\
                                            $haskell\
                                            $java\
                                            $julia\
                                            $nodejs\
                                            $nim\
                                            $rust\
                                            [](bg:${purple} fg:${blue})\
                                            $docker_context\
                                            [](bg:${pink} fg:${purple})\
                                            $time\
                                            [ ](fg:${pink})\
                                        '';
                                        username = rec {
                                            show_always = true;
                                            style_user = "bg:${red} fg:${grey}";
                                            style_root = style_user;
                                            format = "[$user ]($style)";
                                        };
                                        env_var.STARSHIP_SHELL = {
                                            style = "bg:${orange} fg:${grey}";
                                            format = "[ $env_value ]($style)";
                                        };
                                        directory = {
                                            style = "bg:${yellow} fg:${grey}";
                                            format = "[ $path ]($style)";
                                            truncation_length = 3;
                                            truncation_symbol = "…/";
                                            

#+end_src

#+begin_quote
Keep in mind that the order matters. For example:
"Important Documents" = "  " will not be replaced, because "Documents" was already substituted before.
So either put "Important Documents" before "Documents" or use the substituted version:
"Important  " = "  "
#+end_quote

#+begin_src nix
                                            substitutions = {
                                                Documents = " ";
                                                Downloads = " ";
                                                Music = " ";
                                                Pictures = " ";
                                            };
#+end_src

#+begin_src nix
                                        };
                                        nix_shell = {
                                            symbol = " ";
                                            style = "bg:${cyan} fg:${grey}";
                                            impure_msg = "impure";
                                            pure_msg = "pure";
                                            format = "[[ $symbol $state( \($name\)) ](bg:${cyan} fg:${grey})]($style)";
                                        };
                                        c = {
                                            symbol = " ";
                                            style = "bg:${blue} fg:${grey}";
                                            format = "[[ $symbol ($version) ](bg:${blue} fg:${grey})]($style)";
                                        };
                                        docker_context = {
                                            symbol = " ";
                                            style = "bg:${purple} fg:${grey}";
                                            format = "[[ $symbol $context ](bg:${purple} fg:${grey})]($style) $path";
                                        };
                                        elixir = {
                                            symbol = " ";
                                            style = "bg:${blue} fg:${grey}";
                                            format = "[[ $symbol ($version) ](bg:${blue} fg:${grey})]($style)";
                                        };
                                        elm = {
                                            symbol = " ";
                                            style = "bg:${blue} fg:${grey}";
                                            format = "[[ $symbol ($version) ](bg:${blue} fg:${grey})]($style)";
                                        };
                                        git_branch = {
                                            symbol = "";
                                            style = "bg:${green} fg:${grey}";
                                            format = "[[ $symbol $branch ](bg:${green} fg:${grey})]($style)";
                                        };
                                        git_status = {
                                            style = "bg:${green} fg:${grey}";
                                            format = "[[($all_status$ahead_behind )](bg:${green} fg:${grey})]($style)";
                                        };
                                        golang = {
                                            symbol = " ";
                                            style = "bg:${blue} fg:${grey}";
                                            format = "[[ $symbol ($version) ](bg:${blue} fg:${grey})]($style)";
                                        };
                                        haskell = {
                                            symbol = " ";
                                            style = "bg:${blue} fg:${grey}";
                                            format = "[[ $symbol ($version) ](bg:${blue} fg:${grey})]($style)";
                                        };
                                        java = {
                                            symbol = " ";
                                            style = "bg:${blue} fg:${grey}";
                                            format = "[[ $symbol ($version) ](bg:${blue} fg:${grey})]($style)";
                                        };
                                        julia = {
                                            symbol = " ";
                                            style = "bg:${blue} fg:${grey}";
                                            format = "[[ $symbol ($version) ](bg:${blue} fg:${grey})]($style)";
                                        };
                                        nodejs = {
                                            symbol = "";
                                            style = "bg:${blue} fg:${grey}";
                                            format = "[[ $symbol ($version) ](bg:${blue} fg:${grey})]($style)";
                                        };
                                        nim = {
                                            symbol = " ";
                                            style = "bg:${blue} fg:${grey}";
                                            format = "[[ $symbol ($version) ](bg:${blue} fg:${grey})]($style)";
                                        };
                                        rust = {
                                            symbol = "";
                                            style = "bg:${blue} fg:${grey}";
                                            format = "[[ $symbol ($version) ](bg:${blue} fg:${grey})]($style)";
                                        };
                                        time = {
                                            disabled = false;
#+end_src

~Hour:Minute~ Format:

#+begin_src nix
                                            time_format = "%R";
#+end_src

#+begin_src nix
                                            style = "bg:${pink} fg:${grey}";
                                            format = "[[ ♥ $time ](bg:${pink} fg:${grey})]($style)";
                                        };
                                    };
#+end_src

#+begin_src nix
                                };
                                zsh = {
                                    autocd = true;
                                    defaultKeymap = "vicmd";
                                    shellAliases.s = "source ${cfg.home."${relToZshDir}/.zshrc".source}";
                                    initExtraFirst = ''
                                        source ${inputs.grml}/etc/zsh/zshrc
                                        source ${proFile}
                                        prompt off
                                    '';
                                    enableAutosuggestions = true;
                                    enableSyntaxHighlighting = true;
                                    historySubstringSearch.enable = true;
                                    envExtra = ''
                                        source ${inputs.grml}/etc/zsh/zshenv
                                        skip_global_compinit=1
                                    '';
                                    profileExtra = "source ${inputs.grml}/etc/zsh/zprofile";
                                    logoutExtra = "source ${inputs.grml}/etc/zsh/zlogout";
                                    loginExtra = "source ${inputs.grml}/etc/zsh/zlogin";
#+end_src

Adapted from [[https://leetschau.github.io/remove-duplicate-zsh-history.html][here]]:

#+begin_src nix
                                    history = {
                                        ignoreDups = true;
                                        ignoreSpace = true;
                                        expireDuplicatesFirst = true;
                                    };
                                    shellOptions = [
                                        "EXTENDED_HISTORY"
                                        # "HIST_EXPIRE_DUPS_FIRST"
                                        # "HIST_IGNORE_DUPS"
                                        "HIST_IGNORE_ALL_DUPS"
                                        # "HIST_IGNORE_SPACE"
                                        "HIST_FIND_NO_DUPS"
                                        "HIST_SAVE_NO_DUPS"
                                    ];
#+end_src

#+begin_src nix
                                    initExtra = ''
#+end_src

Adapted from [[https://stackoverflow.com/users/827263/keith-thompson][Keith Thompson's]] comment [[https://stackoverflow.com/questions/7110119/bash-history-without-line-numbers#comment8517296_7110197][here]]:

#+begin_src zsh
                                        rc () { eval $(history | ${gnused}/bin/sed 's/^ *[0-9]* *//' | ${fzf-tmux}); }
                                        bindkey -v
#+end_src

#+begin_src nix
                                    '';
                                };
                                bash = {
                                    inherit (cfg.home) sessionVariables;
                                    enable = true;
                                    enableCompletion = true;
                                    enableVteIntegration = true;
                                    historyControl = splitString ":" cfg.home.sessionVariables.HISTCONTROL;
                                    shellOptions = toList "vi";
                                    shellAliases.s = "source ${cfg.home.file.".bashrc".source}";
#+end_src

I can't just take the ~profileExtra~ value from below as changed are made to it before writing the file:

#+begin_src nix
                                    bashrcExtra = profile;
#+end_src

#+begin_src nix
                                    profileExtra = ''
#+end_src

#+begin_src shell
source ${homeDirectory}/.nix-profile/etc/profile.d/nix.sh || :
eval "$(${pkgs.fasd}/bin/fasd --init auto)"
eval "$(${zoxide} init posix --hook prompt)"

cdf () { cd $(${pkgs.fasd}/bin/fasd -ld | ${fzf-tmux}); }
cdi () { cd $(getFzfdfOutput "$@" "-t" "d"); }
cdr () { cd $(${zoxide} query -l | ${fzf-tmux}); }
direnvAllow () {
    if [ -z "$1" ]; then
        ${direnv} allow
    else
        for d in "$@"; do
            ${direnv} allow "$d"
        done
    fi
}
getFzfdfOutput () {
    if [ -z "$1" ]; then
        echo $(${fd}/bin/fd | ${fzf-tmux})
    else
        if [ -d "$1" ]; then
            echo $(${fd}/bin/fd "." "$@" | ${fzf-tmux})
        else
            echo $(${fd}/bin/fd "$@" | ${fzf-tmux})
        fi
    fi
}
mdg () { mkdir -p "$@" && cd "$1"; }

Run () { curl --create-dirs -fsSLo "$2" "$1" && shift && run "$@"; }
run () { chmod +x "$1" && "$@"; }
#+end_src

Adapted from [[https://stackoverflow.com/users/827263/keith-thompson][Keith Thompson's]] comment [[https://stackoverflow.com/questions/7110119/bash-history-without-line-numbers#comment8517296_7110197][here]]:

#+begin_src shell
rc () { eval $(history | ${gnused}/bin/sed 's/^ *[0-9]* *//' | ${fzf-tmux}); }
#+end_src

#+begin_src nix
'';
                                };
                                home-manager.enable = true;
                                kitty = {
                                    enable = true;
                                    extraConfig = "include ${inputs.kitty-themes}/kittyThemes/themes/Monokai_Pro_(Filter_Ristretto).conf";
                                    font = mkIf (pkgs ? cartograph-cf-all) {
                                        package = pkgs.cartograph-cf-all;
                                        name = "Cartograph CF";
                                    };
                                };
                                tmux = {
                                    enable = true;
                                    tmuxp.enable = true;
                                    newSession = true;
                                    aggressiveResize = true;
                                    historyLimit = 50000;
                                    displayTime = 1250;
                                    keyMode = "vi";
#+end_src

Adapted from [[https://www.reddit.com/r/tmux/comments/einuqy/make_tmux_modal/][here]]:

#+begin_src nix
                                    prefix = "None";
#+end_src

To address the vim-mode switching delay,
as stated by [[https://superuser.com/users/16533/ton-van-den-heuvel][Ton van den Heuvel's]] answer [[https://superuser.com/a/252717][here]]:

#+begin_src nix
                                    escapeTime = 0;
#+end_src

#+begin_src nix
                                    plugins = with pkgs.tmuxPlugins; [
                                        battery
                                        cpu
                                        ctrlw
                                        fpp
                                        fzf-tmux-url
                                        jump
                                        logging
                                        online-status
                                        open
                                        pain-control
                                        prefix-highlight
                                        safekill
                                        sessionist
                                        sidebar
                                        sidebar-plus
                                        sysstat
                                        thumbs
                                        tmux-fzf
                                        vim-tmux-focus-events
                                        vim-tmux-navigator
                                        yank
                                        {
                                            plugin = continuum;
                                            extraConfig = ''
                                                set -g @continuum-boot 'on'
                                                set -g @continuum-save-interval '10'
                                                set -g @continuum-restore 'on'
                                            '';
                                        }
                                        {
                                            plugin = resurrect;
                                            extraConfig = ''
                                                set -g @resurrect-save-bash-history 'on'
                                                set -g @resurrect-dir '${homeDirectory}/.byobu/tmux_resurrect'
                                                set -g @resurrect-processes '${toString [
                                                    ''"mc --nocolor"''
                                                    ''"tail -f"''
                                                    "bat"
                                                    "docker"
                                                    "elvish"
                                                    "emacs"
                                                    "fish"
                                                    "glances"
                                                    "gotop"
                                                    "htop"
                                                    "ion"
                                                    "ipython"
                                                    "jupyter-lab"
                                                    "jupyter-notebook"
                                                    "less"
                                                    "man"
                                                    "more"
                                                    "mosh"
                                                    "mutt"
                                                    "nvim"
                                                    "ssh"
                                                    "syncthing"
                                                    "tail"
                                                    "top"
                                                    "vi"
                                                    "vim"
                                                    "weechat"
                                                    "woman"
                                                    "wtf"
                                                    "xonsh"
                                                    "xsh"
                                                    "zsh"
                                                ]}'
                                                set -g @resurrect-capture-pane-contents 'on'
                                                set -g @resurrect-strategy-vim 'session'
                                                set -g @resurrect-strategy-nvim 'session'
                                            '';
                                        }
                                    ];
#+end_src

Aleclearmind ~active-row~ replacement:

#+begin_src nix
                                    extraInit = replaceStrings [
                                        "unbind C-b"
                                        "set -g prefix C-a"
                                    ] [
                                        "# unbind C-b"
                                        "set -g prefix C-Space"
                                    ] (readFile "${inputs.aleclearmind}/active-row.conf");
#+end_src

#+begin_src nix
                                    sources = [
                                        # "${inputs.powerline}/powerline/bindings/tmux/powerline-base.conf"
                                        "${inputs.powerline}/powerline/bindings/tmux/powerline.conf"
                                        # "${inputs.powerline}/powerline/bindings/tmux/powerline_tmux_2.1_plus.conf"
                                        "${inputs.oh-my-tmux}/.tmux.conf"
                                        "${inputs.oh-my-tmux}/.tmux.conf.local"
                                    ];
                                    unbindings = [
                                        "C-b"
                                        "C-x"
                                        "C-z"
                                    ];
                                    root-repeating-bindings = {
                                        M-s = "send-prefix";
                                        C-S-F5 = "send-keys M-F5";
                                        C-S-Left = "send-keys M-Left";
                                        C-S-Right = "send-keys M-Right";
                                        C-Space = ''{
                                            set key-table prefix
                                            set status-bg yellow
                                        }'';
                                    };
                                    prefix-table-bindings = {
                                        C-Space = ''{
                                            set key-table root
                                            set status-bg green
                                        }'';
                                    };
                                    set-globally = {
                                        prefix2 = "S-Space";
                                        visual-activity = "off";
                                        status-justify = "centre";
                                        status-right = "'#{prefix_highlight} | %a %Y-%m-%d %H:%M'";
                                        focus-events = "on";
                                        pane-active-border-style = ''"bg=default"'';
                                        utf8 = "on";
                                        status-utf8 = "on";
                                        status-interval = 1;
                                    };
                                    set-and-append-globally.pane-active-border-style = ''"fg=colour208"'';
                                    set-window-globally = {
                                        monitor-activity = "off";
                                    };
                                    shells-to-run = toList "powerline-daemon -q";
                                    set-server-globally.escape-time = 10;
                                };
                            };
                            systemd.user.services = {
                                emacs-damascus = {
                                    Unit = {
                                        Description = "Emacs text editor";
                                        Documentation = [ "info:emacs" "man:emacs(1)" "https://gnu.org/software/emacs/" ];
                                    };
                                    Service = {
                                        Type = "forking";
                                        ExecStart = "${cfg.services.emacs.package}/bin/emacs --bg-daemon=damascus --update";
                                        ExecStop = ''${emacsclient} -s damascus -e "(kill-emacs)"'';
                                        Environment = "SSH_AUTH_SOCK=%t/keyring/ssh";
                                        Restart = "on-failure";
                                        TimeoutSec = 900;
                                    };
                                    Install.WantedBy = mkIf (! cfg.services.emacs.enable) "default.target";
                                };
                            };
                            fonts.fontconfig.enable = true;
                            gtk = {
                                enable = true;
                                cursorTheme = {
                                    name = "Oreo_dracula_orange_cursors";
                                    package = pkgs.oreo-custom-cursors;
                                };
                                font = mkIf (pkgs ? cartograph-cf-all) {
                                    enable = true;
                                    package = pkgs.cartograph-cf-all;
                                    name = "Cartograph CF";
                                };
                                theme = {
                                    package = pkgs.dracula-theme;
                                    name = "Dracula";
                                };
                            };
                            home = {
                                inherit homeDirectory;
                                activation.setup-yubikey-sudo = lib.hm.dag.entryAfter [ "writeBoundary" ] "$DRY_RUN_CMD ykpamcfg -2 -v";
                                enableDebugInfo = true;
                                enableNixpkgsReleaseCheck = true;
                                stateVersion = iron.baseVersion;
                                packages = [

                                ];
                                shellAliases = rec {
                                    "-" = "pushd";
                                    ".." = "cd ..";
                                    la = "${cfg.programs.exa.package}/bin/exa -la --octal-permissions";
                                    "." = la;
                                    c = "clear";
                                    emd = "systemctl --user start emacs.service";
                                    kemd = "systemctl --user stop emacs.service";
                                    git = "${pkgs.hub}/bin/hub";
                                    md = "mkdir -p";
                                    mosh = "${pkgs.mosh}/bin/mosh --experimental-remote-ip=remote";
                                    n = "exit";
                                    remd = "systemctl --user restart emacs.service";
                                    semd = "systemctl status emacs";
#+end_src

Deprecated; I actually /like/ using ~vi / vim~ sometimes:

#+begin_src nix :noweb-ref no
                                    vi = "${emacsclient} -c";
                                    vim = "${emacsclient} -c";
#+end_src

#+begin_src nix
                                    # fasd
                                    o = "${pkgs.fasd}/bin/fasd -ae xdg-open";

                                    # quick opening files with emacs
                                    e = "${pkgs.fasd}/bin/fasd -fe '${emacsclient} -t'";

                                    s = "source ${cfg.home.file.".profile".source}";

                                    # Functions
                                    cdf = "cdf";
                                    cdi ="cdi";
                                    cdr = "cdr";
                                    da = "direnvAllow";
                                    mdg = "mdg";
                                    rc = "rc";
                                    Run = "Run";
                                    run = "run";
                                };
                                sessionVariables = rec {
                                    EDITOR = "${emacsclient} -c";
                                    VISUAL = EDITOR;
                                    HISTCONTROL = "erasedups:ignoredups:ignorespace";
                                    LESSOPEN = "| {pkgs.sourceHighlight}/bin/src-hilite-lesspipe.sh %s";
                                    LESS = " -R ";
                                };
                                sessionPath = flatten [
                                    (map (slashcat homeDirectory) [
                                        ".local/bin"
                                        ".nimble/bin"
                                        ".nix-profile/bin"
                                        ".guix-profile/bin"
                                        "go/bin"
                                    ])
                                    (map (sconcat "/") [
                                        "usr/local/sbin"
                                        "usr/local/bin"
                                        "usr/sbin"
                                        "usr/bin"
                                        "sbin"
                                        "bin"
                                        "usr/games"
                                        "usr/local/games"
                                        "snap/bin"
                                        "usr/local/go/bin"
                                        "usr/lib/node_modules"
                                    ])
                                ];
                                file = {
                                    user.source = inputs.user;
                                    ".gitattributes" = { inherit (cfgx."git/attributes") source; };
                                    ".gitignore" = { inherit (cfgx."git/ignore") source; };
                                    ".hgignore" = { inherit (cfgx."git/ignore") source; };
                                    ".config/powershell/Microsoft.PowerShell_profile.ps1".text = ''
                                        # For zoxide v0.8.0+
                                        Invoke-Expression (& {
                                            $hook = if ($PSVersionTable.PSVersion.Major -lt 6) { 'prompt' } else { 'pwd' }
                                            (${zoxide} init --hook $hook powershell | Out-String)
                                        })
                                        Invoke-Expression (&${starship} init powershell)
                                    '';
                                    ".byobu/.tmux.conf".source = cfgx."tmux/tmux.conf";
                                    ".tmuxp/default.yaml".text = "session_name: default";
                                    ".xinitrc".text = ''exec ${emacsclient} -a "" -c'';
                                };
                            };
                            services = {
#+end_src

This config is adapted from [[http://gegenokitaro.github.io/tuts/2015/05/14/qtile-ricchan/][here]]:

#+begin_src nix
                                qtile = {
                                    enable = true;
                                    extraInit = ''
                                        # Copyright (c) 2010 Aldo Cortesi
                                        # Copyright (c) 2010, 2014 dequis
                                        # Copyright (c) 2012 Randall Ma
                                        # Copyright (c) 2012-2014 Tycho Andersen
                                        # Copyright (c) 2012 Craig Barnes
                                        # Copyright (c) 2013 horsik
                                        # Copyright (c) 2013 Tao Sauvage
                                        #
                                        # Permission is hereby granted, free of charge, to any person obtaining a copy
                                        # of this software and associated documentation files (the "Software"), to deal
                                        # in the Software without restriction, including without limitation the rights
                                        # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                        # copies of the Software, and to permit persons to whom the Software is
                                        # furnished to do so, subject to the following conditions:
                                        #
                                        # The above copyright notice and this permission notice shall be included in
                                        # all copies or substantial portions of the Software.
                                        #
                                        # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                        # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                        # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                        # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                        # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                        # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                        # SOFTWARE.
                                    '';
                                    fromImports = {
                                        libqtile = {
                                            config = [
                                                "Key"
                                                "Screen"
                                                "Group"
                                                "Drag"
                                                "Click"
                                                "Match"
                                            ];
                                            command = "lazy";
                                            dgroups = "simple_key_binder";
                                            null = [ "layout" "bar" "widget" ];
                                        };
                                    };
                                    keys = [
#+end_src

Switch between windows in current stack pane:

#+begin_src nix
                                        {
                                            key = "j";
                                            action = "lazy.layout.down()";
                                        }
                                        {
                                            key = "k";
                                            action = "lazy.layout.up()";
                                        }
#+end_src

Move windows up or down in current stack:

#+begin_src nix
                                        {
                                            mod = "control";
                                            key = "j";
                                            action = "lazy.layout.shuffle_down()";
                                        }
                                        {
                                            mod = "control";
                                            key = "k";
                                            action = "lazy.layout.shuffle_up()";
                                        }
#+end_src

Switch window focus to other pane(s) of stack:

#+begin_src nix
                                        {
                                            key = "space";
                                            action = "lazy.layout.next()";
                                        }
                                        {
                                            key = "Left";
                                            action = "lazy.screen.prevgroup()";
                                        }
                                        {
                                            key = "Right";
                                            action = "lazy.screen.nextgroup()";
                                        }
#+end_src

Swap panes of split stack:

#+begin_src nix
                                        {
                                            mod = "shift";
                                            key = "space";
                                            action = "lazy.layout.rotate()";
                                        }
#+end_src

Toggle between split and unsplit sides of stack:
- Split: all windows displayed
- Unsplit: 1 window displayed, like Max layout, but still with multiple stack panes

#+begin_src nix
                                        {
                                            mod = "shift";
                                            key = "Return";
                                            action = "lazy.layout.toggle_split()";
                                        }
#+end_src

Toggle between different layouts as defined below:

#+begin_src nix
                                        {
                                            key = "Tab";
                                            action = "lazy.nextlayout()";
                                        }
                                        {
                                            key = "w";
                                            action = "lazy.window.kill()";
                                        }
#+end_src

#+begin_src nix
                                        {
                                            key = "Return";
                                            action = ''lazy.spawn("urxvt")'';
                                        }
                                        {
                                            mod = "control";
                                            key = "r";
                                            action = "lazy.restart()";
                                        }
                                        {
                                            mod = "control";
                                            key = "q";
                                            action = "lazy.shutdown()";
                                        }
                                        {
                                            key = "r";
                                            action = "lazy.spawncmd()";
                                        }
                                    ];
                                    groups = map (g: if (isString g) then " ${g} " else (g // {
                                        name = " ${g.name} ";
                                    })) ([
                                        "urxvt"
                                        {
                                            name = "web";
                                            matches = [
                                                { wm_class = "Firefox"; }
                                            ];
                                        }
                                        "blender"
                                        "inkscape"
                                        "gimp"
                                        "doc"
                                    ]);
                                    layouts = [
                                        {
                                            function = "TreeTab";
                                            args = {
                                                font = "Cartograph CF Light Italic";
                                                name = "tree tab";
                                                bg_color = "#222222";
                                                inactive_bg = "#AB5DEE";
                                                panel_width = 150;
                                                margin_left = 0;
                                                margin_y = 0;
                                                sections = [ "TreeTab" ];
                                                section_left = 0;
                                                padding_x = 4;
                                                active_bg = "#FFB86C";
                                                rounded = false;
                                            };
                                        }
                                        {
                                            function = "MonadTall";
                                            args = {
                                                name = "xmonad tall";
                                                ratio = 0.5;
                                                border_width = 8;
                                                border_focus = "#335260";
                                                border_normal = "#69B2B8";
                                            };
                                        }
                                        {
                                            function = "Stack";
                                            args = {
                                                num_stacks = 2;
                                                border_width = 8;
                                                border_focus = "#335260";
                                                border_normal = "#69B2B8";
                                            };
                                        }
                                        {
                                            function = "Floating";
                                            args = {
                                                name = "floating";
                                                border_width = 8;
                                                border_focus = "#335260";
                                                border_normal = "#69B2B8";
                                            };
                                        }
                                    ];
                                    mouse = [
                                        {
                                            function = "Drag";
                                            args = [
                                                [ (f: "mod") ]
                                                "Button1"
                                                (f: "lazy.window.set_position_floating()")
                                            ];
                                            kwargs.start = f: "lazy.window.get_position()";
                                        }
                                        {
                                            function = "Click";
                                            args = [
                                                [ (f: "mod") ]
                                                "Button2"
                                                (f: "lazy.window.bring_to_front()")
                                            ];
                                        }
                                        {
                                            function = "Drag";
                                            args = [
                                                [ (f: "mod") ]
                                                "Button3"
                                                (f: "lazy.window.set_size_floating()")
                                            ];
                                            kwargs.start = f: "lazy.window.get_size()";
                                        }
                                    ];
                                    extraConfig = ''
#+end_src

#+begin_src python
floating_layout = layout.Floating(
    name="floating",
    border_width=8,
    border_focus="#69B2B8",
    border_normal="#335260",
)

widget_defaults = dict(
    font='Cartograph CF Light Italic',
    fontsize=12,
    background="#222222",
    markup=True,
)

screens = [
    Screen(
        bottom=bar.Bar(
            [
                widget.GroupBox(
                        borderwidth=0,
                        margin=0,
                        padding=6,
                        active="FFFFFF",
                        inactive="FFB86C",
                        highlight_method="block",
                        this_current_screen_border="#AB5DEE",
                        invert_mouse_wheel=True,
                        rounded=False,
                    ),
                widget.Prompt(),
                widget.CurrentLayout(
                        background="#E11B22",
                    ),
                widget.Spacer(),
                #widget.WindowName(),
                widget.TextBox("testing", name="default"),
                widget.Systray(),
                widget.Clock(format=' %I:%M %p '),
            ],
            24,
            background="#335260",
        ),
    ),
]
#+end_src

#+begin_src nix
'';
                                    variables = {
                                        dgroups_app_rules = [];
                                        main = null;
                                        follow_mouse_focus = true;
                                        bring_front_click = false;
                                        cursor_warp = false;
                                        auto_fullscreen = true;
#+end_src

#+begin_quote
XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
string besides java UI toolkits; you can see several discussions on the
mailing lists, github issues, and other WM documentation that suggest setting
this string if your java app doesn't work correctly. We may as well just lie
and say that we're a working one by default.

We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
java that happens to be on java's whitelist.
#+end_quote

#+begin_src nix
                                        wmname = "LG3D";
#+end_src

#+begin_src nix
                                    };
                                };
#+end_src

#+begin_src nix
                                emacs = {
                                    enable = true;
                                    client = {
                                        enable = true;
                                        arguments = toList "--update";
                                    };
                                    defaultEditor = true;
                                };
                            };
                        }) iron.attrs.allUsers)
                        {
                            ${iron.attrs.allUsers.primary} = {
                                programs = {
                                    borgmatic = {
                                        enable = true;
                                        backups = let
                                            shared = {
                                                consistency = {
#+end_src

Adapted from [[https://rycee.gitlab.io/home-manager/options.html#opt-programs.borgmatic.backups._name_.consistency.checks][here]]:

#+begin_src nix
                                                    checks = [
                                                        {
                                                            name = "repository";
                                                            frequency = "2 weeks";
                                                        }
                                                        {
                                                            name = "archives";
                                                            frequency = "4 weeks";
                                                        }
                                                        {
                                                            name = "data";
                                                            frequency = "6 weeks";
                                                        }
                                                        {
                                                            name = "extract";
                                                            frequency = "6 weeks";
                                                        }
                                                    ];
#+end_src

#+begin_src nix
                                                };
                                                location.extraConfig = rec {
                                                    one_file_system = false;
                                                    numeric_owner = false;
                                                    atime = true;
                                                    ctime = true;
                                                    birthtime = true;
                                                    read_special = true;
                                                    bsd_flags = true;
                                                    files_cache = "ctime,size,inode";
                                                    local_path = "${pkgs.borg}/bin/borg";
                                                    remote_path = local_path;
                                                    exclude_caches = true;
                                                    exclude_nodump = true;
                                                    exclude_patterns = toList ".zfs/snapshot";
#+end_src

#+begin_quote
Additional options to pass directly to particular Borg
commands, handy for Borg options that borgmatic does not yet
support natively. Note that borgmatic does not perform any
validation on these options. Running borgmatic with
"--verbosity 2" shows the exact Borg command-line
invocation.
#+end_quote

#+begin_src nix :noweb-ref
                                                    extra_borg_options = {
                                                        init = "--make-parent-dirs";
                                                        prune = "--save-space";
                                                        create = "--no-files-cache";
                                                        check = "--save-space";
                                                    };
#+end_src

#+begin_src nix
                                                };
                                                retention = {
                                                    keepDaily = 7;
                                                    keepHourly = 24;
                                                    keepMinutely = 60;
                                                    keepMonthly = 6;
                                                    keepSecondly = 60;
                                                    keepWeekly = 4;
                                                    keepWithin = "6H";
                                                    keepYearly = 4;
                                                };
                                                storage = {
                                                    checkpoint_interval = 300;
                                                    compression = "auto,zstd,22";
                                                    ssh_command = cfg.programs.assh.alias;
                                                    relocated_repo_access_is_ok = true;
                                                    unknown_unencrypted_repo_access_is_ok = true;
                                                };
                                            };
                                            nameShared = name: rec {
                                                storage = {
                                                    encryptionPasscommand = "pass show backup/borg/${name}";
                                                    extraConfig.archive_name_format = "borgmatic-${name}-{now:%%Y%%m%%dT%%H%%M%%S%%f}";
                                                };
                                                location.extraConfig.hooks.before_backup = mkBefore [ "${pkgs.password-store}/bin/pass show backup/borg/${name} &> /dev/null || exit 75" ];
                                                retention.extraConfig.prefix = "borgmatic-${name}-";
                                                consistency = { inherit (retention) extraConfig; };
                                            };
                                        in mapAttrs (n: v: mkMerge [ shared (nameShared n) v ]) {
                                            oreo = {
                                                location = {
                                                    sourceDirectories = toList /chimchar/oreo;
                                                    repositories = toList /oreo;
                                                    extraConfig.hooks = {
                                                        before_backup = map (sepcat "&> /dev/null || exit 75") [
                                                            "findmnt /chimchar/oreo"
                                                            "findmnt /oreo"
                                                        ];
#+end_src

#+begin_quote
Healthchecks ping URL or UUID to notify when a backup
begins, ends, or errors. Create an account at
https://healthchecks.io if you'd like to use this service.
See borgmatic monitoring documentation for details.
#+end_quote

#+begin_src nix
                                                        healthchecks = "https://hc-ping.com/9660799a-0aba-44d7-a29f-3887a0ce82bd";
#+end_src

#+begin_src nix
                                                    };
                                                };
                                            };
                                            oreo-rsync = {
                                                location = {
                                                    sourceDirectories = toList /chimchar/oreo;
                                                    repositories = toList "9237@usw-s009.rsync.net/./oreo-rsync";
                                                    extraConfig.hooks = {
                                                        remote_path = "borg1";
                                                        before_backup = map (sepcat "&> /dev/null || exit 75") [
                                                            "findmnt /chimchar/oreo"
                                                            "ping -qc 1 usw-s009.rsync.net"
                                                        ];
                                                        healthchecks = "https://hc-ping.com/e6d79f19-8c5b-429a-99d0-0247fdb251ea";
                                                    };
                                                };
                                            };
                                            infernape = {
                                                location = {
                                                    sourceDirectories = toList /chimchar;
                                                    repositories = toList /infernape;
                                                    extraConfig.hooks = {
                                                        remote_path = "borg1";
                                                        before_backup = map (sepcat "&> /dev/null || exit 75") [
                                                            "${mountable-mounted} chimchar"
                                                            "findmnt /infernape"
                                                        ];
                                                        healthchecks = "https://hc-ping.com/aa90aa9a-d507-4c8e-92c9-a037cd42e585";
                                                    };
                                                };
                                            };
                                            user = {
                                                location = {
                                                    sourceDirectories = toList inputs.user;
                                                    repositories = [
                                                        "<<userhome>>/.user"
                                                        "hpvlk40u@hpvlk40u.repo.borgbase.com/./repo"
                                                    ];
                                                    extraConfig.hooks = {
                                                        before_backup = map (sepcat "&> /dev/null || exit 75") [
                                                            "ping -qc 1 hpvlk40u.repo.borgbase.com"
                                                        ];
                                                        healthchecks = "https://hc-ping.com/1ed0af6c-aa1d-4930-aa1e-3d1af89c9251";
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                    ];
                };
            };
        };
    };
}
#+end_src

** nix
*** nix.conf

#+begin_src conf :tangle (meq/tangle-multipath ".config/nix/nix.conf")
<<generate-nix-conf()>>
#+end_src

** sv

Deprecated; kept for documentation purposes:

*** caddy
**** log
***** run

#+begin_src zsh :shebang "#!/usr/bin/env zsh"
exec svlogd -tt /etc/sv/caddy/log
#+end_src

**** run

#+begin_src zsh :shebang "#!/usr/bin/env zsh"
for port in 22 80 222 443 2022 8080 9418 60000:61000/udp; do
    ufw allow $port &> /dev/null
done
chmod +x /etc/sv/caddy/{finish,log/run}
exec /usr/bin/caddy run --config /.config/caddy/files/<<hostname>> --adapter yaml 2>&1
#+end_src

**** finish

#+begin_src zsh :shebang "#!/usr/bin/env zsh"
killall caddy
#+end_src

* .editorconfig

#+begin_src conf :tangle (meq/tangle-multipath ".ecrc")
root = true

[*]
<<75251650-8670-4ab9-ac68-2952b9356b35>>

[{MAKEFILE,Makefile,makefile,*.mk}]
<<5c1c7733-fb2e-4055-83bd-c124f4081666>>

[{*.cmd,*.CMD,*.bat,*.BAT}]
<<218be869-799e-471d-b228-87e1db430de6>>

[{*.sh}]
<<2bcf53b8-f7b1-4c28-9dda-44eb176eac27>>
#+end_src

Adapted from [[https://editorconfig.org/#example-file][here]]:

#+name: 75251650-8670-4ab9-ac68-2952b9356b35
#+begin_src conf
end_of_line = "lf"
insert_final_newline = true
indent_style = "space"
indent_size = 4
charset = "utf-8"
trim_trailing_whitespace = true
max_line_length = 80
#+end_src

#+name: 5c1c7733-fb2e-4055-83bd-c124f4081666
#+begin_src conf
indent_style = "tab"
indent_size = "unset"
tab_width = 4
#+end_src

#+name: 218be869-799e-471d-b228-87e1db430de6
#+begin_src conf
end_of_line = "crlf"
#+end_src

#+name: 2bcf53b8-f7b1-4c28-9dda-44eb176eac27
#+begin_src conf
end_of_line = "lf"
#+end_src

* .ssh
** id_rsa.pub.bak

#+name: 652c4828-b716-42a1-b777-b37b99b468a7
#+begin_src text :tangle (meq/tangle-path)
<<ssh-pubkey-id-rsa-bak>>
#+end_src

** id_ed25519.pub.bak

#+name: ec2d5c28-4cbc-4f9b-aa60-835fff096273
#+begin_src text :tangle (meq/tangle-path)
<<ssh-pubkey-id-ed25519-bak>>
#+end_src

** jeet_ray_ecdsa.pub

#+name: 757d7c7f-bbd3-49b3-a47e-84158337318c
#+begin_src text :tangle (meq/tangle-path)
<<ssh-pubkey-jeet-ray-ecdsa>>
#+end_src

** jeet_ray_ed25519.pub

#+name: 9d0e196f-1118-43bb-8b2f-0650e49b211a
#+begin_src text :tangle (meq/tangle-path)
<<ssh-pubkey-jeet-ray-ed25519>>
#+end_src

** jeet_ray_rsa.pub

#+name: ec44d933-c4ac-4da5-8086-f1d7b4358139
#+begin_src text :tangle (meq/tangle-path)
<<ssh-pubkey-jeet-ray-rsa>>
#+end_src

** shadowrylander_ecdsa.pub

#+name: 9320021a-a3d7-4bd5-9f80-269073d02a2a
#+begin_src text :tangle (meq/tangle-path)
<<ssh-pubkey-shadowrylander-ecdsa>>
#+end_src

** shadowrylander_ed25519.pub

#+name: 12713489-9696-4a9a-8e92-242011772051
#+begin_src text :tangle (meq/tangle-path)
<<ssh-pubkey-shadowrylander-ed25519>>
#+end_src

** shadowrylander_rsa.pub

#+name: 3325c6f6-a054-41bf-a941-7dd6ad5f6124
#+begin_src text :tangle (meq/tangle-path)
<<ssh-pubkey-shadowrylander-rsa>>
#+end_src

** id_rsa.pub

#+name: 643209da-424e-4027-a77c-54ac4e661013
#+begin_src text :tangle (meq/tangle-path)
<<ssh-pubkey-shadowrylander-rsa>>
#+end_src

** id_ed25519.pub

#+name: 1483d99f-3b9c-4bf8-8139-1bd917e5fe47
#+begin_src text :tangle (meq/tangle-path)
<<ssh-pubkey-jeet-ray-ed25519>>
#+end_src

** id_ecdsa.pub

#+name: e9088d86-c5ba-4aca-b7e3-80edd943e12c
#+begin_src text :tangle (meq/tangle-path)
<<ssh-pubkey-jeet-ray-ecdsa>>
#+end_src

* .gitattributes
:PROPERTIES:
:header-args:gitattributes+: :noweb-ref 964e6c9e-f4f8-4def-8bab-6e13f95759a5
:END:

#+begin_src text :tangle (meq/tangle-path)
<<964e6c9e-f4f8-4def-8bab-6e13f95759a5>>
#+end_src

Adapted from [[https://rehansaeed.com/gitattributes-best-practices/#final-form][here]]:

#+begin_src gitattributes
####################
# Git Line Endings #
####################

# Set default behaviour to automatically normalize line endings.
,* text=auto

# Force batch scripts to always use CRLF line endings so that if a repo is accessed
# in Windows via a file share from Linux, the scripts will work.
*.{cmd,[cC][mM][dD]} text eol=crlf
*.{bat,[bB][aA][tT]} text eol=crlf

# Force bash scripts to always use LF line endings so that if a repo is accessed
# in Unix via a file share from Windows, the scripts will work.
*.sh text eol=lf
#+end_src

** Largefiles

The LFS filter are from both
[[https://raw.githubusercontent.com/sindresorhus/binary-extensions/main/binary-extensions.json][here]] and
[[https://rehansaeed.com/gitattributes-best-practices/#final-form][here]]:

#+begin_src gitattributes
*.3dm filter=lfs diff=lfs merge=lfs -text
*.3ds filter=lfs diff=lfs merge=lfs -text
*.3g2 filter=lfs diff=lfs merge=lfs -text
*.3gp filter=lfs diff=lfs merge=lfs -text
*.7z filter=lfs diff=lfs merge=lfs -text
*.a filter=lfs diff=lfs merge=lfs -text
*.aac filter=lfs diff=lfs merge=lfs -text
*.aax filter=lfs diff=lfs merge=lfs -text
*.adp filter=lfs diff=lfs merge=lfs -text
*.ai filter=lfs diff=lfs merge=lfs -text
*.aif filter=lfs diff=lfs merge=lfs -text
*.aiff filter=lfs diff=lfs merge=lfs -text
*.alz filter=lfs diff=lfs merge=lfs -text
*.ape filter=lfs diff=lfs merge=lfs -text
*.apk filter=lfs diff=lfs merge=lfs -text
*.appimage filter=lfs diff=lfs merge=lfs -text
*.ar filter=lfs diff=lfs merge=lfs -text
*.arj filter=lfs diff=lfs merge=lfs -text
*.asf filter=lfs diff=lfs merge=lfs -text
*.au filter=lfs diff=lfs merge=lfs -text
*.avi filter=lfs diff=lfs merge=lfs -text
*.baml filter=lfs diff=lfs merge=lfs -text
*.bh filter=lfs diff=lfs merge=lfs -text
*.bin filter=lfs diff=lfs merge=lfs -text
*.bk filter=lfs diff=lfs merge=lfs -text
*.bmp filter=lfs diff=lfs merge=lfs -text
*.br filter=lfs diff=lfs merge=lfs -text
*.btif filter=lfs diff=lfs merge=lfs -text
*.bz2 filter=lfs diff=lfs merge=lfs -text
*.bzip2 filter=lfs diff=lfs merge=lfs -text
*.cab filter=lfs diff=lfs merge=lfs -text
*.caf filter=lfs diff=lfs merge=lfs -text
*.cgm filter=lfs diff=lfs merge=lfs -text
*.class filter=lfs diff=lfs merge=lfs -text
*.cmx filter=lfs diff=lfs merge=lfs -text
*.cpio filter=lfs diff=lfs merge=lfs -text
*.cr2 filter=lfs diff=lfs merge=lfs -text
*.cur filter=lfs diff=lfs merge=lfs -text
*.dat filter=lfs diff=lfs merge=lfs -text
*.dcm filter=lfs diff=lfs merge=lfs -text
*.deb filter=lfs diff=lfs merge=lfs -text
*.dex filter=lfs diff=lfs merge=lfs -text
*.djvu filter=lfs diff=lfs merge=lfs -text
*.dll filter=lfs diff=lfs merge=lfs -text
*.dmg filter=lfs diff=lfs merge=lfs -text
*.dng filter=lfs diff=lfs merge=lfs -text
*.doc filter=lfs diff=lfs merge=lfs -text
*.docm filter=lfs diff=lfs merge=lfs -text
*.docx filter=lfs diff=lfs merge=lfs -text
*.dot filter=lfs diff=lfs merge=lfs -text
*.dotm filter=lfs diff=lfs merge=lfs -text
*.dra filter=lfs diff=lfs merge=lfs -text
*.DS_Store filter=lfs diff=lfs merge=lfs -text
*.dsk filter=lfs diff=lfs merge=lfs -text
*.dts filter=lfs diff=lfs merge=lfs -text
*.dtshd filter=lfs diff=lfs merge=lfs -text
*.dvb filter=lfs diff=lfs merge=lfs -text
*.dwg filter=lfs diff=lfs merge=lfs -text
*.dxf filter=lfs diff=lfs merge=lfs -text
*.ecelp4800 filter=lfs diff=lfs merge=lfs -text
*.ecelp7470 filter=lfs diff=lfs merge=lfs -text
*.ecelp9600 filter=lfs diff=lfs merge=lfs -text
*.egg filter=lfs diff=lfs merge=lfs -text
*.eol filter=lfs diff=lfs merge=lfs -text
*.eot filter=lfs diff=lfs merge=lfs -text
*.epub filter=lfs diff=lfs merge=lfs -text
*.exe filter=lfs diff=lfs merge=lfs -text
*.f4v filter=lfs diff=lfs merge=lfs -text
*.fbs filter=lfs diff=lfs merge=lfs -text
*.fh filter=lfs diff=lfs merge=lfs -text
*.fla filter=lfs diff=lfs merge=lfs -text
*.flac filter=lfs diff=lfs merge=lfs -text
*.flatpak filter=lfs diff=lfs merge=lfs -text
*.fli filter=lfs diff=lfs merge=lfs -text
*.flv filter=lfs diff=lfs merge=lfs -text
*.fpx filter=lfs diff=lfs merge=lfs -text
*.fst filter=lfs diff=lfs merge=lfs -text
*.fvt filter=lfs diff=lfs merge=lfs -text
*.g3 filter=lfs diff=lfs merge=lfs -text
*.gh filter=lfs diff=lfs merge=lfs -text
*.gif filter=lfs diff=lfs merge=lfs -text
*.graffle filter=lfs diff=lfs merge=lfs -text
*.gz filter=lfs diff=lfs merge=lfs -text
*.gzip filter=lfs diff=lfs merge=lfs -text
*.h261 filter=lfs diff=lfs merge=lfs -text
*.h263 filter=lfs diff=lfs merge=lfs -text
*.h264 filter=lfs diff=lfs merge=lfs -text
*.icns filter=lfs diff=lfs merge=lfs -text
*.ico filter=lfs diff=lfs merge=lfs -text
*.ief filter=lfs diff=lfs merge=lfs -text
*.img filter=lfs diff=lfs merge=lfs -text
*.ipa filter=lfs diff=lfs merge=lfs -text
*.iso filter=lfs diff=lfs merge=lfs -text
*.jar filter=lfs diff=lfs merge=lfs -text
*.jpeg filter=lfs diff=lfs merge=lfs -text
*.jpg filter=lfs diff=lfs merge=lfs -text
*.jpgv filter=lfs diff=lfs merge=lfs -text
*.jpm filter=lfs diff=lfs merge=lfs -text
*.jxr filter=lfs diff=lfs merge=lfs -text
*.key filter=lfs diff=lfs merge=lfs -text
*.ktx filter=lfs diff=lfs merge=lfs -text
*.lha filter=lfs diff=lfs merge=lfs -text
*.lib filter=lfs diff=lfs merge=lfs -text
*.lvp filter=lfs diff=lfs merge=lfs -text
*.lz filter=lfs diff=lfs merge=lfs -text
*.lzh filter=lfs diff=lfs merge=lfs -text
*.lzma filter=lfs diff=lfs merge=lfs -text
*.lzo filter=lfs diff=lfs merge=lfs -text
*.m3u filter=lfs diff=lfs merge=lfs -text
*.m4a filter=lfs diff=lfs merge=lfs -text
*.m4v filter=lfs diff=lfs merge=lfs -text
*.mar filter=lfs diff=lfs merge=lfs -text
*.mdi filter=lfs diff=lfs merge=lfs -text
*.mht filter=lfs diff=lfs merge=lfs -text
*.mid filter=lfs diff=lfs merge=lfs -text
*.midi filter=lfs diff=lfs merge=lfs -text
*.mj2 filter=lfs diff=lfs merge=lfs -text
*.mka filter=lfs diff=lfs merge=lfs -text
*.mkv filter=lfs diff=lfs merge=lfs -text
*.mmr filter=lfs diff=lfs merge=lfs -text
*.mng filter=lfs diff=lfs merge=lfs -text
*.mobi filter=lfs diff=lfs merge=lfs -text
*.mov filter=lfs diff=lfs merge=lfs -text
*.movie filter=lfs diff=lfs merge=lfs -text
*.mp3 filter=lfs diff=lfs merge=lfs -text
*.mp4 filter=lfs diff=lfs merge=lfs -text
*.mp4a filter=lfs diff=lfs merge=lfs -text
*.mpeg filter=lfs diff=lfs merge=lfs -text
*.mpg filter=lfs diff=lfs merge=lfs -text
*.mpga filter=lfs diff=lfs merge=lfs -text
*.mxu filter=lfs diff=lfs merge=lfs -text
*.nef filter=lfs diff=lfs merge=lfs -text
*.npx filter=lfs diff=lfs merge=lfs -text
*.numbers filter=lfs diff=lfs merge=lfs -text
*.nupkg filter=lfs diff=lfs merge=lfs -text
*.o filter=lfs diff=lfs merge=lfs -text
*.odp filter=lfs diff=lfs merge=lfs -text
*.ods filter=lfs diff=lfs merge=lfs -text
*.odt filter=lfs diff=lfs merge=lfs -text
*.oga filter=lfs diff=lfs merge=lfs -text
*.ogg filter=lfs diff=lfs merge=lfs -text
*.ogv filter=lfs diff=lfs merge=lfs -text
*.otf filter=lfs diff=lfs merge=lfs -text
*.ott filter=lfs diff=lfs merge=lfs -text
*.pages filter=lfs diff=lfs merge=lfs -text
*.pbm filter=lfs diff=lfs merge=lfs -text
*.pcx filter=lfs diff=lfs merge=lfs -text
*.pdb filter=lfs diff=lfs merge=lfs -text
*.pdf filter=lfs diff=lfs merge=lfs -text
*.pea filter=lfs diff=lfs merge=lfs -text
*.pgm filter=lfs diff=lfs merge=lfs -text
*.pic filter=lfs diff=lfs merge=lfs -text
*.png filter=lfs diff=lfs merge=lfs -text
*.pnm filter=lfs diff=lfs merge=lfs -text
*.pot filter=lfs diff=lfs merge=lfs -text
*.potm filter=lfs diff=lfs merge=lfs -text
*.potx filter=lfs diff=lfs merge=lfs -text
*.ppa filter=lfs diff=lfs merge=lfs -text
*.ppam filter=lfs diff=lfs merge=lfs -text
*.ppm filter=lfs diff=lfs merge=lfs -text
*.pps filter=lfs diff=lfs merge=lfs -text
*.ppsm filter=lfs diff=lfs merge=lfs -text
*.ppsx filter=lfs diff=lfs merge=lfs -text
*.ppt filter=lfs diff=lfs merge=lfs -text
*.pptm filter=lfs diff=lfs merge=lfs -text
*.pptx filter=lfs diff=lfs merge=lfs -text
*.psd filter=lfs diff=lfs merge=lfs -text
*.pya filter=lfs diff=lfs merge=lfs -text
*.pyc filter=lfs diff=lfs merge=lfs -text
*.pyo filter=lfs diff=lfs merge=lfs -text
*.pyv filter=lfs diff=lfs merge=lfs -text
*.qt filter=lfs diff=lfs merge=lfs -text
*.rar filter=lfs diff=lfs merge=lfs -text
*.ras filter=lfs diff=lfs merge=lfs -text
*.raw filter=lfs diff=lfs merge=lfs -text
*.resources filter=lfs diff=lfs merge=lfs -text
*.rgb filter=lfs diff=lfs merge=lfs -text
*.rip filter=lfs diff=lfs merge=lfs -text
*.rlc filter=lfs diff=lfs merge=lfs -text
*.rmf filter=lfs diff=lfs merge=lfs -text
*.rmvb filter=lfs diff=lfs merge=lfs -text
*.rpm filter=lfs diff=lfs merge=lfs -text
*.rtf filter=lfs diff=lfs merge=lfs -text
*.rz filter=lfs diff=lfs merge=lfs -text
*.s3m filter=lfs diff=lfs merge=lfs -text
*.s7z filter=lfs diff=lfs merge=lfs -text
*.scpt filter=lfs diff=lfs merge=lfs -text
*.sgi filter=lfs diff=lfs merge=lfs -text
*.shar filter=lfs diff=lfs merge=lfs -text
*.snap filter=lfs diff=lfs merge=lfs -text
*.sil filter=lfs diff=lfs merge=lfs -text
*.sketch filter=lfs diff=lfs merge=lfs -text
*.slk filter=lfs diff=lfs merge=lfs -text
*.smv filter=lfs diff=lfs merge=lfs -text
*.snk filter=lfs diff=lfs merge=lfs -text
*.so filter=lfs diff=lfs merge=lfs -text
*.stl filter=lfs diff=lfs merge=lfs -text
*.suo filter=lfs diff=lfs merge=lfs -text
*.sub filter=lfs diff=lfs merge=lfs -text
*.swf filter=lfs diff=lfs merge=lfs -text
*.tar filter=lfs diff=lfs merge=lfs -text
*.tbz filter=lfs diff=lfs merge=lfs -text
*.tbz2 filter=lfs diff=lfs merge=lfs -text
*.tga filter=lfs diff=lfs merge=lfs -text
*.tgz filter=lfs diff=lfs merge=lfs -text
*.thmx filter=lfs diff=lfs merge=lfs -text
*.tif filter=lfs diff=lfs merge=lfs -text
*.tiff filter=lfs diff=lfs merge=lfs -text
*.tlz filter=lfs diff=lfs merge=lfs -text
*.ttc filter=lfs diff=lfs merge=lfs -text
*.ttf filter=lfs diff=lfs merge=lfs -text
*.txz filter=lfs diff=lfs merge=lfs -text
*.udf filter=lfs diff=lfs merge=lfs -text
*.uvh filter=lfs diff=lfs merge=lfs -text
*.uvi filter=lfs diff=lfs merge=lfs -text
*.uvm filter=lfs diff=lfs merge=lfs -text
*.uvp filter=lfs diff=lfs merge=lfs -text
*.uvs filter=lfs diff=lfs merge=lfs -text
*.uvu filter=lfs diff=lfs merge=lfs -text
*.viv filter=lfs diff=lfs merge=lfs -text
*.vob filter=lfs diff=lfs merge=lfs -text
*.war filter=lfs diff=lfs merge=lfs -text
*.wav filter=lfs diff=lfs merge=lfs -text
*.wax filter=lfs diff=lfs merge=lfs -text
*.wbmp filter=lfs diff=lfs merge=lfs -text
*.wdp filter=lfs diff=lfs merge=lfs -text
*.weba filter=lfs diff=lfs merge=lfs -text
*.webm filter=lfs diff=lfs merge=lfs -text
*.webp filter=lfs diff=lfs merge=lfs -text
*.whl filter=lfs diff=lfs merge=lfs -text
*.wim filter=lfs diff=lfs merge=lfs -text
*.wm filter=lfs diff=lfs merge=lfs -text
*.wma filter=lfs diff=lfs merge=lfs -text
*.wmv filter=lfs diff=lfs merge=lfs -text
*.wmx filter=lfs diff=lfs merge=lfs -text
*.woff filter=lfs diff=lfs merge=lfs -text
*.woff2 filter=lfs diff=lfs merge=lfs -text
*.wrm filter=lfs diff=lfs merge=lfs -text
*.wvx filter=lfs diff=lfs merge=lfs -text
*.xbm filter=lfs diff=lfs merge=lfs -text
*.xif filter=lfs diff=lfs merge=lfs -text
*.xla filter=lfs diff=lfs merge=lfs -text
*.xlam filter=lfs diff=lfs merge=lfs -text
*.xls filter=lfs diff=lfs merge=lfs -text
*.xlsb filter=lfs diff=lfs merge=lfs -text
*.xlsm filter=lfs diff=lfs merge=lfs -text
*.xlsx filter=lfs diff=lfs merge=lfs -text
*.xlt filter=lfs diff=lfs merge=lfs -text
*.xltm filter=lfs diff=lfs merge=lfs -text
*.xltx filter=lfs diff=lfs merge=lfs -text
*.xm filter=lfs diff=lfs merge=lfs -text
*.xmind filter=lfs diff=lfs merge=lfs -text
*.xpi filter=lfs diff=lfs merge=lfs -text
*.xpm filter=lfs diff=lfs merge=lfs -text
*.xwd filter=lfs diff=lfs merge=lfs -text
*.xz filter=lfs diff=lfs merge=lfs -text
*.z filter=lfs diff=lfs merge=lfs -text
*.zip filter=lfs diff=lfs merge=lfs -text
*.zipx filter=lfs diff=lfs merge=lfs -text
#+end_src

** git-crypt

Note that ~git-crypt~ must come after all other ~.gitattributes~ as doing otherwise will overwrite the ~git-crypt~ filter and diffs.

#+begin_src gitattributes
black.aiern.org filter=git-crypt diff=git-crypt

etc/nixos/secrets/**/* filter=git-crypt diff=git-crypt

.termux/font.ttf filter=git-crypt diff=git-crypt

.ssh/**/* filter=git-crypt diff=git-crypt
.ssh/**/*.pub* -filter -diff
.ssh/**/assh.yml -filter -diff

.gnupgk/**/* filter=git-crypt diff=git-crypt
.gnupgk/**/*.pub* -filter -diff

.fonts/cartographcf-* filter=git-crypt diff=git-crypt

.config/borg/keys/**/* filter=git-crypt diff=git-crypt
.config/rclone/rclone.conf filter=git-crypt diff=git-crypt

**/.password.tomb.key filter=git-crypt diff=git-crypt
#+end_src

*** deprecated

These are /kind of/ deprecated; they have been incorporated into the secret flake.

#+begin_src gitattributes
etc/caddy/**/* filter=git-crypt diff=git-crypt
etc/tailscale/**/* filter=git-crypt diff=git-crypt
#+end_src

* .config
** elvish
*** rc.elv
:PROPERTIES:
:header-args:elvish+: :noweb-ref c635d49e-5f0e-4245-bc91-81e9f8de0a12
:END:

Deprecated; kept for documentation purposes:

#+begin_src text
<<c635d49e-5f0e-4245-bc91-81e9f8de0a12>>
#+end_src

Deprecated; I use starship now.

#+begin_src elvish :noweb-ref no
use epm
epm:install github.com/tylerreckart/gondolin
use github.com/tylerreckart/gondolin/gondolin
#+end_src

#+begin_src elvish
eval (${zoxide} init elvish | slurp)
eval (${starship} init elvish)
use direnv
#+end_src

** systemd
*** user
**** emacs.service

Deprecated; kept for documentation purposes:

#+begin_src systemd
[Unit]
Description=Emacs text editor
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=/usr/bin/emacs --bg-daemon=damascus --update
ExecStop=/usr/bin/emacsclient -s damascus -e "(kill-emacs)"
Environment=SSH_AUTH_SOCK=%t/keyring/ssh
Restart=on-failure
TimeoutSec=900

[Install]
WantedBy=default.target
#+end_src

** yadm
*** bootstrap
:PROPERTIES:
:header-args:shell+: :noweb-ref 879a83d3-17ad-446f-8ad2-9945ac588f07
:END:

#+begin_src text :tangle (meq/tangle-path) :shebang "#! /usr/bin/env sh"
<<879a83d3-17ad-446f-8ad2-9945ac588f07>>
#+end_src

#+begin_src shell
set -eo pipefail
[ -z "$1" ] && worktree="$HOME" || worktree="$1"
chmod 700 "$worktree/.ssh" "$worktree/.gnupgk" "$worktree/.config/borg/keys"
chmod 600 "$worktree/.ssh/*" "$worktree/.gnupgk/*" "$worktree/.config/borg/keys/*"
#+end_src

** direnv
*** .direnvrc
:PROPERTIES:
:header-args:shell+: :noweb-ref 182f2693-feb9-457a-9eb4-b3b863409d18
:END:

#+begin_src text :tangle (meq/tangle-multipath ".direnvrc")
<<182f2693-feb9-457a-9eb4-b3b863409d18>>
#+end_src

Adapted from [[https://github.com/direnv/direnv/wiki/Customizing-cache-location#example][here]]:

#+begin_src shell
# Place in ~/.config/direnv/direnvrc

# Two things to know:
# * `direnv_layour_dir` is called once for every {.direnvrc,.envrc} sourced
# * The indicator for a different direnv file being sourced is a different `$PWD` value
# This means we can hash `$PWD` to get a fully unique cache path for any given environment

: ${XDG_CACHE_HOME:=$HOME/.cache}
declare -A direnv_layout_dirs
direnv_layout_dir() {
    echo "${direnv_layout_dirs[$PWD]:=$(
        echo -n "$XDG_CACHE_HOME"/direnv/layouts/
        echo -n "$PWD" | shasum | cut -d ' ' -f 1
    )}"
}
#+end_src

#+begin_src shell
# nix-direnv
NixDirenvrc="share/nix-direnv/direnvrc"
systemNixDirenvrc="/run/current-system/sw/$NixDirenvrc"
[ -f "$systemNixDirenvrc" ] && source "$systemNixDirenvrc" || :
homeNixDirenvrc="$HOME/.nix-profile/$NixDirenvrc"
[ -f "$homeNixDirenvrc" ] && source "$homeNixDirenvrc" || :
export NIX_BIN_PREFIX="$(dirname $(which nix))/"
#+end_src

** git
*** scripts
**** dekey
:PROPERTIES:
:header-args:shell+: :noweb-ref d4fe01d0-adf7-42b4-886c-fd6c22b4065f
:END:

#+begin_src text :tangle (meq/tangle-path) :shebang "#! /usr/bin/env nix-shell"
<<d4fe01d0-adf7-42b4-886c-fd6c22b4065f>>
#+end_src

#+begin_src shell
#! nix-shell -E "(import /etc/nixos).devShells.${builtins.currentSystem}.git-shell"
#! nix-shell -i sh
set -eo pipefail
root=$(git rev-parse --show-toplevel)
for gpgID in $@; do
#+end_src

Adapted from [[https://stackoverflow.com/users/15168/jonathan-leffler][Jonathan Leffler's]] answer [[https://stackoverflow.com/a/1429628/10827766][here]], and [[https://stackoverflow.com/users/1114966/squiguy][squiguy's]] answer [[https://stackoverflow.com/a/13662036/10827766][here]]:

#+begin_src shell
    rm "$root/.git-crypt/keys/default/0/$(gpg --fingerprint $gpgID | sed -n 2p | tr -d ' ').gpg"
#+end_src

#+begin_src shell
done
#+end_src

**** rekey
:PROPERTIES:
:header-args:shell+: :noweb-ref 34bb592d-cf90-4f98-8aa1-0c14ed7027e1
:END:

#+begin_src text :tangle (meq/tangle-path) :shebang "#! /usr/bin/env nix-shell"
<<34bb592d-cf90-4f98-8aa1-0c14ed7027e1>>
#+end_src

#+begin_src shell
#! nix-shell -E "(import /etc/nixos).devShells.${builtins.currentSystem}.git-shell"
#! nix-shell -i sh
set -eo pipefail
root=$(git rev-parse --show-toplevel)
#+end_src

Adapted from [[https://unix.stackexchange.com/users/52727/chaos][chaos']] answer [[https://unix.stackexchange.com/a/181939/270053][here]]:

#+begin_src shell
tmpf=$(mktemp)
tmpd=$(mktemp -d)
tmpCrypt=$(mktemp -d)
#+end_src

Adapted from [[https://unix.stackexchange.com/users/83831/wurtel][wurtel's]] comment [[https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script#comment302878_181939][here]],
and [[https://unix.stackexchange.com/users/20482/ijoseph][ijoseph's]] comment [[https://unix.stackexchange.com/questions/181937/how-create-a-temporary-file-in-shell-script#comment1096615_181939][here]], stating:

#+begin_quote
For those wondering, the trailing integers in trap "rm -f $temp_file" 0 2 3 15 are the /signals/ [[https://www.shellscript.sh/trap.html][upon which to run the first argument]]. 0: exit shell, 2: Interrupt, 3: Quit, 15: Terminate.
#+end_quote

#+begin_src shell
trap "rm -rf $tmpf $tmpd $tmpCrypt" 0 2 3 15
#+end_src

Adapted from [[https://stackoverflow.com/users/2075062/epere4][epere4's]] answer [[https://stackoverflow.com/a/14892459/10827766][here]]:

#+begin_src shell
if [ -f "$root/.git" ]; then
    gitCrypt=$(realpath $(cat "$root/.git" | sed 's/.*: //'))
else
    gitCrypt="$root/.git/git-crypt"
fi
#+end_src

#+begin_src shell
git crypt unlock
git encrypted > $tmpf
#+end_src

Adapted from [[https://stackoverflow.com/users/100208/atp][atp's]] answer [[https://stackoverflow.com/a/30176688/10827766][here]]:

#+begin_src shell
rsync -avvczz --files-from $tmpf "$root" $tmpd
#+end_src

#+begin_src shell
rsync -avvczz "$root/.git-crypt/" $tmpCrypt/
rm -rf "$gitCrypt" "$root/.git-crypt"
git -C "$root" filter-repo --paths-from-file $tmpf --invert-paths --force
rsync -avvczz $tmpd/ "$root"/
git crypt init
for key in $(ls $tmpCrypt/keys/default/0/*gpg); do
    git crypt add-gpg-user $(basename $key .gpg)
done
[ -n "$1" ] && git crypt add-gpg-user $@ || :
#+end_src

* .gitignore

#+begin_src text :tangle (meq/tangle-multipath ".hgignore")
<<gitignore>>
#+end_src

* .stow-global-ignore
:PROPERTIES:
:header-args:conf+: :noweb-ref 88db2036-4126-4348-9c83-aa093768fcd4
:END:

#+begin_src text :tangle (meq/tangle-path)
<<88db2036-4126-4348-9c83-aa093768fcd4>>
#+end_src

#+begin_src conf
\.git
#+end_src

* .termux
** termux.properties
:PROPERTIES:
:header-args:conf+: :noweb-ref 59ebf7a6-3b78-4508-9a0e-290b70686beb
:END:

#+begin_src text :tangle (meq/tangle-path)
<<59ebf7a6-3b78-4508-9a0e-290b70686beb>>
#+end_src

#+begin_src conf
### After making changes and saving you need to run `termux-reload-settings`
### to update the terminal.  All information here can also be found on the
### wiki: https://wiki.termux.com/wiki/Terminal_Settings

###############
# Extra keys
###############

### Settings for choosing which set of symbols to use for illustrating keys.
### Choose between default, arrows-only, arrows-all, all and none
# extra-keys-style = default

### Default extra-key configuration
# extra-keys = [[ESC, TAB, CTRL, ALT, {key: '-', popup: '|'}, DOWN, UP]]

### Two rows with more keys
# extra-keys = [['ESC','/','-','HOME','UP','END','PGUP'], \
#               ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]

### Configuration with additional popup keys (swipe up from an extra key)
# extra-keys = [[ \
#   {key: ESC, popup: {macro: "CTRL f d", display: "tmux exit"}}, \
#   {key: CTRL, popup: {macro: "CTRL f BKSP", display: "tmux ←"}}, \
#   {key: ALT, popup: {macro: "CTRL f TAB", display: "tmux →"}}, \
#   {key: TAB, popup: {macro: "ALT a", display: A-a}}, \
#   {key: LEFT, popup: HOME}, \
#   {key: DOWN, popup: PGDN}, \
#   {key: UP, popup: PGUP}, \
#   {key: RIGHT, popup: END}, \
#   {macro: "ALT j", display: A-j, popup: {macro: "ALT g", display: A-g}}, \
#   {key: KEYBOARD, popup: {macro: "CTRL d", display: exit}} \
# ]]

###############
# Colors/themes
###############

### Force black colors for drawer and dialogs
# use-black-ui = true

###############
# Keyboard shortcuts
###############

### Open a new terminal with ctrl + t (volume down + t)
# shortcut.create-session = ctrl + t

### Go one session down with (for example) ctrl + 2
# shortcut.next-session = ctrl + 2

### Go one session up with (for example) ctrl + 1
# shortcut.previous-session = ctrl + 1

### Rename a session with (for example) ctrl + n
# shortcut.rename-session = ctrl + n

###############
# Bell key
###############

### Vibrate device (default).
# bell-character = vibrate

### Beep with a sound.
# bell-character = beep

### Ignore bell character.
# bell-character = ignore

###############
# Back key
###############

### Send the Escape key.
# back-key=escape

### Hide keyboard or leave app (default).
# back-key=back

###############
# Keyboard issue workarounds
###############

### Letters might not appear until enter is pressed on Samsung devices
# enforce-char-based-input = true

### ctrl+space (for marking text in emacs) does not work on some devices
# ctrl-space-workaround = true

allow-external-apps = true
#+end_src
