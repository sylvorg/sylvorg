#+setupfile: ./settings/README.org
#+include: ./settings/README.org

This is used to supplement =./oreo.aiern.org=.

* oreo.aiern.org
** home
*** .config
**** qtile
***** config.py

#+call: hash() :exports none

#+RESULTS:
: 20210601214231713054800

#+name: 20210601214231713054800
#+begin_src python
# From: http://gegenokitaro.github.io/tuts/2015/05/14/qtile-ricchan/
#
# Copyright (c) 2010 Aldo Cortesi
# Copyright (c) 2010, 2014 dequis
# Copyright (c) 2012 Randall Ma
# Copyright (c) 2012-2014 Tycho Andersen
# Copyright (c) 2012 Craig Barnes
# Copyright (c) 2013 horsik
# Copyright (c) 2013 Tao Sauvage
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from libqtile.config import Key, Screen, Group, Drag, Click, Match
from libqtile.command import lazy
from libqtile import layout, bar, widget
from libqtile.dgroups import simple_key_binder

mod = "mod4"

keys = [
    # Switch between windows in current stack pane
    Key(
        [mod], "j",
        lazy.layout.down()
    ),
    Key(
        [mod], "k",
        lazy.layout.up()
    ),

    # Move windows up or down in current stack
    Key(
        [mod, "control"], "j",
        lazy.layout.shuffle_down()
    ),
    Key(
        [mod, "control"], "k",
        lazy.layout.shuffle_up()
    ),

    # Switch window focus to other pane(s) of stack
    Key(
        [mod], "space",
        lazy.layout.next()
    ),

    Key(
        [mod], "Left",
        lazy.screen.prevgroup()
    ),

    Key(
        [mod], "Right",
        lazy.screen.nextgroup()
    ),

    # Swap panes of split stack
    Key(
        [mod, "shift"], "space",
        lazy.layout.rotate()
    ),

    # Toggle between split and unsplit sides of stack.
    # Split = all windows displayed
    # Unsplit = 1 window displayed, like Max layout, but still with
    # multiple stack panes
    Key(
        [mod, "shift"], "Return",
        lazy.layout.toggle_split()
    ),
    Key([mod], "Return", lazy.spawn("urxvt")),

    # Toggle between different layouts as defined below
    Key([mod], "Tab", lazy.nextlayout()),
    Key([mod], "w", lazy.window.kill()),

    Key([mod, "control"], "r", lazy.restart()),
    Key([mod, "control"], "q", lazy.shutdown()),
    Key([mod], "r", lazy.spawncmd()),
]

groups = [
    Group(" urxvt "),
    Group(" web ", matches=[Match(wm_class=["Firefox"])]),
    Group(" blender "),
    Group(" inkscape "),
    Group(" gimp "),
    Group(" doc "),
]

dgroups_key_binder = simple_key_binder("mod4")


layouts = [
    layout.TreeTab(
            font='Cartograph CF Light Italic',
            name="tree tab",
            bg_color="#222222",
            inactive_bg="#AB5DEE",
            panel_width=150,
            margin_left=0,
            margin_y=0,
            sections=['TreeTab'],
            section_left=0,
            padding_x=4,
            active_bg="#FFB86C",
            rounded=False,
        ),
    layout.MonadTall(
            name="xmonad tall",
            ratio=0.5,
            border_width=8,
            border_focus="#335260",
            border_normal="#69B2B8",
        ),
    layout.Stack(
            num_stacks=2,
            border_width=8,
            border_focus="#335260",
            border_normal="#69B2B8",
        ),
    layout.Floating(
            name="floating",
            border_width=8,
            border_focus="#335260",
            border_normal="#69B2B8",
        )
]

floating_layout = layout.Floating(
            name="floating",
            border_width=8,
            border_focus="#69B2B8",
            border_normal="#335260",
        )

widget_defaults = dict(
    font='Cartograph CF Light Italic',
    fontsize=12,
    background="#222222",
    markup=True,
)

screens = [
    Screen(
        bottom=bar.Bar(
            [
                widget.GroupBox(
                        borderwidth=0,
                        margin=0,
                        padding=6,
                        active="FFFFFF",
                        inactive="FFB86C",
                        highlight_method="block",
                        this_current_screen_border="#AB5DEE",
                        invert_mouse_wheel=True,
                        rounded=False,
                    ),
                widget.Prompt(),
                widget.CurrentLayout(
                        background="#E11B22",
                    ),
                widget.Spacer(),
                #widget.WindowName(),
                widget.TextBox("testing", name="default"),
                widget.Systray(),
                widget.Clock(format=' %I:%M %p '),
            ],
            24,
            background="#335260",
        ),
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
        start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
        start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

dgroups_app_rules = []
main = None
follow_mouse_focus = True
bring_front_click = False
cursor_warp = False
auto_fullscreen = True

# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, github issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+end_src

*** .SpaceVim.d
**** init.toml

#+call: hash() :exports none

#+RESULTS:
: 20210601214235078130500

#+name: 20210601214235078130500
#+begin_src conf
#=============================================================================
# dark_powered.toml --- dark powered configuration example for SpaceVim
# Copyright (c) 2016-2020 Wang Shidong & Contributors
# Author: Wang Shidong < wsdjeg at 163.com >
# URL: https://spacevim.org
# License: GPLv3
#=============================================================================

# All SpaceVim option below [option] section
[options]
    # set spacevim theme. by default colorscheme layer is not loaded,
    # if you want to use more colorscheme, please load the colorscheme
    # layer
    colorscheme = "gruvbox"
    colorscheme_bg = "dark"
    # Disable guicolors in basic mode, many terminal do not support 24bit
    # true colors
    enable_guicolors = true
    # Disable statusline separator, if you want to use other value, please
    # install nerd fonts
    statusline_separator = "arrow"
    statusline_iseparator = "arrow"
    buffer_index_type = 4
    enable_tabline_filetype_icon = true
    enable_statusline_mode = false
    bootstrap_before = 'vimrc#before'
    bootstrap_after = 'vimrc#after'
    escape_key_binding = ""

<<20210601214237032954500>>

<<20210601214239113273400>>
#+end_src

***** layers

#+call: hash() :exports none

#+RESULTS:
: 20210601214237032954500

#+name: 20210601214237032954500
#+begin_src toml
# Enable autocomplete layer
[[layers]]
name = 'autocomplete'
auto_completion_return_key_behavior = "complete"
auto_completion_tab_key_behavior = "smart"

[[layers]]
name = 'shell'
default_position = 'top'
default_height = 30

[[layers]]
name = "lang#nix"
#+end_src

***** plugins

#+call: hash() :exports none

#+RESULTS:
: 20210601214239113273400

#+name: 20210601214239113273400
#+begin_src toml
[[custom_plugins]]
    repo = "tssm/fairyfloss.vim"
    merged = true

[[custom_plugins]]
    repo = "co1ncidence/mountaineer.vim"
    merged = true

[[custom_plugins]]
    repo = "co1ncidence/gunmetal.vim"
    merged = true

[[custom_plugins]]
    repo = "megantiu/true.vim"
    merged = true

# From:
# Answer: https://vi.stackexchange.com/questions/678/how-do-i-save-a-file-in-a-directory-that-does-not-yet-exist/679#679
# User: https://vi.stackexchange.com/users/51/martin-tournoij
[[custom_plugins]]
    repo = "arp242/auto_mkdir2.vim"
    merged = true

[[custom_plugins]]
    repo = "tpope/vim-eunuch"
    merged = true

[[custom_plugins]]
    repo = "johannesthyssen/vim-signit"
    merged = true

[[custom_plugins]]
    repo = "jupyter-vim/jupyter-vim"
    merged = true

[[custom_plugins]]
    repo = "haya14busa/dein-command.vim"
    merged = true

[[custom_plugins]]
    repo = "andrep/vimacs"
    merged = true

[[custom_plugins]]
    repo = "shougo/denite.nvim"
    merged = true

[[custom_plugins]]
    repo = "shougo/defx.nvim"
    merged = true

[[custom_plugins]]
    repo = "shougo/deoplete.nvim"
    merged = true
#+end_src

**** autoload
***** vimrc.vim

#+call: hash() :exports none

#+RESULTS:
: 20210601214241093346900

#+name: 20210601214241093346900
#+begin_src vimrc
function! vimrc#before() abort
endfunction

function! vimrc#after() abort
    syntax on
    filetype plugin indent on

    " enable 24bit true color
    if (has("termguicolors"))
    set termguicolors
    endif

    " enable the theme
    syntax enable
    colorscheme fairyfloss

    let g:true_airline = 1
    let g:airline_theme='true'

    " for kitty
    let &t_ut=""

    " disables border on left side
    set foldcolumn=0

    " Spaces & Tabs
    set tabstop=4       " number of visual spaces per TAB
    set softtabstop=4   " number of spaces in tab when editing
    set shiftwidth=4    " number of spaces to use for autoindent
    set expandtab       " tabs are space
    set autoindent
    set copyindent      " copy indent from the previous line

    " set number relativenumber

    " Insert Toggle
    imap ;; <ESC>
    map ;; i <BACKSPACE>

    " Change two spaces to four
    map \\ :set ts=2 sts=2 noet <bar> :retab! <bar> :set ts=4 sts=4 et <bar> :retab <CR>
    imap \\ <ESC> :set ts=2 sts=2 noet <bar> :retab! <bar> :set ts=4 sts=4 et <bar> :retab <CR>

    " Change movement keys to <space>wasd
    noremap <Space-a> h
    noremap <Space-s> j
    noremap <Space-w> k
    noremap <Space-d> l

    " Set Paste
    command SMP :set paste <CR>

    " Set NoPaste
    command SNP :set nopaste <CR>

    " Tab to insert
    map <TAB> i <TAB>

    " Vim Signit
    let g:signit_initials = "JR"
    let g:signit_name = "Jeet Ray"
    " let g:signit_extra_1
    " let g:signit_extra_2
    " let g:signit_position
    let g:signit_ascii_font = "isometric1.flf"
    " let g:signit_ascii_spacing

    if has('nvim')
        call dein#add('iron-e/nvim-libmodal')
        call dein#add('shougo/deol.nvim')
        call dein#add('shougo/deoppet.nvim')
        call dein#add('shougo/deorise.nvim')
    else
        call dein#add('iron-e/vim-libmodal')
        call dein#add('roxma/nvim-yarp')
        call dein#add('roxma/vim-hug-neovim-rpc')
    endif

    let g:deoplete#enable_at_startup = 1
endfunction
#+end_src

*** .tmux.conf

#+call: hash() :exports none

#+RESULTS:
: 20210601214259128138500

#+name: 20210601214259128138500
#+begin_src conf
<<20210601214303404504400()>>
<<20210601214311502164600>>
<<20210601214313059204900>>
<<20210601214315811010800>>
<<20210601214318746065100>>
<<20210601214321538145800>>
<<20210601214324354163600>>
<<20210601214327190098900>>
<<20210601214333167596800>>
<<20210601214300856128700>>
<<20210601214335900412400>>
run "./resources/tpm/tpm"
#+end_src

**** base

#+call: hash() :exports none

#+RESULTS:
: 20210601214300856128700

#+name: 20210601214300856128700
#+begin_src conf
# set -g prefix2 S-Space

# Mouse support - set to on if you want to use the mouse
# setw -g mode-mouse on
# set -g mouse-select-pane on
# set -g mouse-resize-pane on
# set -g mouse-select-window on

# enable activity alerts
setw -g monitor-activity off
set -g visual-activity off

# Center the window list
set -g status-justify centre

# VI Mode
set -g status-keys vi

# utf8 is on
# set -g utf8 on
# set -g status-utf8 on

run-shell "powerline-daemon -q"

set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'

# Spacemacs Settings:
set -gs escape-time 10

# address vim mode switching delay (http://superuser.com/a/252717/65504)
set -s escape-time 0

# increase scrollback buffer size
set -g history-limit 50000

# tmux messages are displayed for 1.25 seconds
set -g display-time 1250

# refresh 'status-left' and 'status-right' more often
# set -g status-interval 1

# focus events enabled for terminals that support them
set -g focus-events on

# border thickness
set-option -g pane-active-border-style "bg=default"
set-option -ag pane-active-border-style "fg=colour208"
set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'

# Adapted From: https://www.reddit.com/r/tmux/comments/einuqy/make_tmux_modal/
set-option -g prefix None
bind-key -n C-Space {
  set-option key-table prefix
  set-option status-bg yellow
}
bind-key -T prefix C-Space {
  set-option key-table root
  set-option status-bg green
}
#+end_src

**** aleclearmind active-row replacement

#+call: hash() :exports none

#+RESULTS:
: 20210601214303404504400

#+name: 20210601214303404504400
#+begin_src emacs-lisp
(replace-regexp-in-string
    "set -g prefix C-a"
    "# set -g prefix C-a"
    (replace-regexp-in-string
        "unbind C-b"
        "# unbind C-b"
        (let
            ((file "./resources/aleclearmind/active-row.conf"))
            (if
                (file-directory-p file)
                (insert-file-contents file)
                ""))))
#+end_src

**** powerline

#+call: hash() :exports none

#+RESULTS:
: 20210601214311502164600

#+name: 20210601214311502164600
#+begin_src conf
# source ./resources/powerline/powerline/bindings/tmux/powerline-base.conf
source ./resources/powerline/powerline/bindings/tmux/powerline.conf
# source ./resources/powerline/powerline/bindings/tmux/powerline_tmux_2.1_plus.conf
#+end_src

**** oh-my-tmux

#+call: hash() :exports none

#+RESULTS:
: 20210601214313059204900

#+name: 20210601214313059204900
#+begin_src conf
source ./resources/oh-my-tmux/.tmux.conf
source ./resources/oh-my-tmux/.tmux.conf.local
#+end_src

**** keybindings

From: https://man7.org/linux/man-pages/man1/tmux.1.html#KEY_BINDINGS

***** unbindings

#+call: hash() :exports none

#+RESULTS:
: 20210601214314440746200

#+name: 20210601214314440746200
#+begin_src text
C-b
C-x
C-z
#+end_src

#+call: hash() :exports none

#+RESULTS:
: 20210601214315811010800

#+name: 20210601214315811010800
#+begin_src conf
unbind <<20210601214314440746200>>
#+end_src

***** bindings

#+call: hash() :exports none

#+RESULTS:
: 20210601214317258641300

#+name: 20210601214317258641300
#+begin_src text
#+end_src

#+call: hash() :exports none

#+RESULTS:
: 20210601214318746065100

#+name: 20210601214318746065100
#+begin_src conf
bind-key <<20210601214317258641300>>
#+end_src

***** root bindings

#+call: hash() :exports none

#+RESULTS:
: 20210601214320148298300

#+name: 20210601214320148298300
#+begin_src text
#+end_src

#+call: hash() :exports none

#+RESULTS:
: 20210601214321538145800

#+name: 20210601214321538145800
#+begin_src conf
bind-key -n <<20210601214320148298300>>
#+end_src

***** root repeting bindings

#+call: hash() :exports none

#+RESULTS:
: 20210601214322950137300

#+name: 20210601214322950137300
#+begin_src text
M-s send-prefix
C-S-F5 send-keys M-F5
C-S-Left send-keys M-Left
C-S-Right send-keys M-Right
#+end_src

#+call: hash() :exports none

#+RESULTS:
: 20210601214324354163600

#+name: 20210601214324354163600
#+begin_src conf
bind-key -nr <<20210601214322950137300>>
#+end_src

***** repeting bindings

#+call: hash() :exports none

#+RESULTS:
: 20210601214325764323500

#+name: 20210601214325764323500
#+begin_src text
#+end_src

#+call: hash() :exports none

#+RESULTS:
: 20210601214327190098900

#+name: 20210601214327190098900
#+begin_src conf
bind-key -r <<20210601214325764323500>>
#+end_src

***** prefix table bindings

#+call: hash() :exports none

#+RESULTS:
: 20210601214331744518200

#+name: 20210601214331744518200
#+begin_src text
#+end_src

#+call: hash() :exports none

#+RESULTS:
: 20210601214333167596800

#+name: 20210601214333167596800
#+begin_src conf
bind-key -T prefix <<20210601214331744518200>>
#+end_src

**** plugins

#+call: hash() :exports none

#+RESULTS:
: 20210601214334528396400

#+name: 20210601214334528396400
#+begin_src text
tmux-plugins/tpm
jlipps/tmux-safekill
fcsonline/tmux-thumbs
addisonlynch/tmux-sidebar-plus
#+end_src

#+call: hash() :exports none

#+RESULTS:
: 20210601214335900412400

#+name: 20210601214335900412400
#+begin_src conf
set -g @plugin <<20210601214334528396400>>
#+end_src

*** tmux

#+call: hash() :exports none

#+RESULTS:
: 20210601214337624066100

#+name: 20210601214337624066100
#+begin_src nix
tmux = {
    aggressiveResize = true;
    customPaneNavigationAndResize = true;
    enable = true;
    extraConfig = let
        # From: https://man7.org/linux/man-pages/man1/tmux.1.html#KEY_BINDINGS
        unbindings = [ "C-b" "C-z" "C-x" ];
        bindings = {  };
        rootBindings = {  };
        rootRepBindings = {
            M-s = "send-prefix";
            C-S-F5 = "send-keys M-F5";
            C-S-Left = "send-keys M-Left";
            C-S-Right = "send-keys M-Right";
        };
        repBindings = {  };
        prefixTableBindings = {  };
        plugins' = [
            "tmux-plugins/tpm"
            "jlipps/tmux-safekill"
            "fcsonline/tmux-thumbs"
            "addisonlynch/tmux-sidebar-plus"
        ];
        ccSS = command: list: concatStringsSep "\n" (map (_: "${command} ${_}") list);
        ccSSS = command: set: concatStringsSep "\n" (
            mapAttrsToList (n: v: "${command} ${n} ${v}") set
        );
        oh-my-tmux' = "source ${sources.oh-my-tmux}/.tmux.conf";
        powerline' = "source ${sources.powerline}/powerline/bindings/tmux";
    in concatStringsSep "\n" [

        (let
          replacements = [
            "unbind C-b"
            "set -g prefix C-a"
          ];
        in replaceStrings replacements (map (r: "# " + r) replacements) (readFile "${sources.aleclearmind}/active-row.conf"))

        # (powerline' + "/powerline-base.conf")

        (powerline' + "/powerline.conf")

        # (powerline' + "/powerline_tmux_2.1_plus.conf")

        oh-my-tmux'

        "${oh-my-tmux'}.local"

        (ccSS "unbind" unbindings)

        (ccSSS "bind-key" bindings)

        (ccSSS "bind-key -n" rootBindings)

        (ccSSS "bind-key -nr" rootRepBindings)

        (ccSSS "bind-key -r" repBindings)

        (ccSSS "bind-key -T prefix" prefixTableBindings)

        ''
            <<20210601214300856128700>>
        ''

        (ccSS "set -g @plugin" plugins')

        ''run "${sources.tpm}/tpm"''
    ];
    keyMode = "vi";
    newSession = true;
    package = pkgs.tmux;
    secureSocket = false;
    shortcut = "Space";
    terminal = "tmux-256color";
    tmuxp.enable = false;
    # tmuxifier.enable = false;
    # plugins = with pkgs; with tmuxPlugins; [
    #     battery
    #     cpu
    #     ctrlw
    #     fpp
    #     fzf-tmux-url
    #     (myIf.drv (tmuxPlugins ? jump) tmuxPlugins.battery (getAttr "jump" tmuxPlugins))
    #     logging
    #     online-status
    #     open
    #     pain-control
    #     prefix-highlight
    #     sessionist
    #     sidebar
    #     sysstat
    #     (myIf.drv (tmuxPlugins ? tmux-fzf) tmuxPlugins.battery (getAttr "tmux-fzf" tmuxPlugins))
    #     (myIf.drv (tmuxPlugins ? vim-tmux-focus-events) tmuxPlugins.battery (getAttr "vim-tmux-focus-events" tmuxPlugins))
    #     vim-tmux-navigator
    #     yank
    #     (let
    #         r = "resurrect";
    #         processes = [
    #             '' "mc --nocolor" ''
    #             '' "tail -f" ''
    #             "bat"
    #             "docker"
    #             "elvish"
    #             "emacs"
    #             "fish"
    #             "glances"
    #             "gotop"
    #             "htop"
    #             "ipython"
    #             "irssi"
    #             "less"
    #             "man"
    #             "more"
    #             "mosh"
    #             "mutt"
    #             "nvim"
    #             "ssh"
    #             "syncthing"
    #             "tail"
    #             "top"
    #             "vi"
    #             "vim"
    #             "weechat"
    #             "wtf"
    #             "xonsh"
    #             "xsh"
    #             "zsh"
    #         ];
    #     in {
    #         plugin = tmuxPlugins.${r};
    #         extraConfig = ''
    #             set -g @${r}-save-bash-history 'on'
    #             set -g @${r}-dir '~/.byobu/tmux_${r}'
    #             set -g @${r}-processes '${concatStringsSep " " processes}'
    #             set -g @${r}-capture-pane-contents 'on'
    #             set -g @${r}-strategy-vim 'session'
    #             set -g @${r}-strategy-nvim 'session'
    #         '';
    #     })
    #     (let c = "continuum"; in {
    #         plugin = tmuxPlugins.${c};
    #         extraConfig = ''
    #             set -g @${c}-boot 'on'
    #             set -g @${c}-save-interval '10'
    #             set -g @${c}-restore 'on'
    #         '';
    #     })
    # ];
};
#+end_src
