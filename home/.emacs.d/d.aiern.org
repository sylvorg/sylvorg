#+setupfile: ./README.org
#+include: ./README.org

This is used to hold larger files for =./oreo.aiern.org=.

* lib
** faces+.el

#+call: hash() :exports none

#+RESULTS:
: 20210601222912247931000

#+name: 20210601222912247931000
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; faces+.el --- Extensions to `faces.el'.
;;
;; Filename: faces+.el
;; Description: Extensions to `faces.el'.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 1996-2018, Drew Adams, all rights reserved.
;; Created: Fri Jun 28 15:07:06 1996
;; Version: 0
;; Package-Requires: ()
;; Last-Updated: Mon Jan  1 11:22:10 2018 (-0800)
;;           By: dradams
;;     Update #: 304
;; URL: https://www.emacswiki.org/emacs/download/faces%2b.el
;; Keywords: faces, local
;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   `faces', `thingatpt', `thingatpt+'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;    Extensions to `faces.el'.
;;
;;
;;  New functions defined here:
;;
;;    `face-background-20+', `face-foreground-20+'.
;;
;;
;;
;;  ***** NOTE: The following functions defined in `faces.el' have
;;              been REDEFINED HERE:
;;
;;  `make-face' - Uses `completing-read' in the interactive spec,
;;                with, as default, `symbol-nearest-point'.
;;
;;  `read-face-name' - `highlight' is the default (Emacs < 21 only).
;;
;;
;;  This file should be loaded after loading the standard GNU file
;;  `faces.el'.  So, in your `~/.emacs' file, do this:
;;  (eval-after-load "faces" '(require 'faces+))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2012/08/21 dadams
;;     Call tap-put-thing-at-point-props after load thingatpt+.el.
;; 2012/08/18 dadams
;;     Invoke tap-define-aliases-wo-prefix if thingatpt+.el is loaded.
;; 2011/01/04 dadams
;;     Removed autoload cookies from non def* sexps and non-interactive functions.
;; 2009/11/16 dadams
;;     face-(foreground|background)-20+: Use condition-case.  Don't test for face-attribute.
;; 2006/06/25 dadams
;;     Removed set-face-(fore|back)ground-RGB-(hex-)at-* to facemenu+.el.
;; 2006/06/24 dadams
;;     Remove (see eyedropper.el and palette.el): face-(back|fore)ground-at-*.
;; 2006/06/23 dadams
;;     Removed (see eyedropper.el and palette.el):
;;       picked-(back|fore)ground, pick-(back|fore)ground-at-(point|mouse-pointer).
;;     Renamed: *-at-mouse-pointer to *-at-mouse.
;; 2005/10/31 dadams
;;     Use nil value for initial-value arg to completing-read, everywhere.
;; 2005/07/02 dadams
;;     Added: set-face-(fore|back)ground-RGB-(hex-)at-*.
;;     face-(fore|back)ground-at-mouse-pointer: Discard extra, pending input (Windows bug).
;; 2005/06/30 dadams
;;     Added: face-(fore|back)ground-20+, face-(fore|back)ground-at-mouse-pointer,
;;            face-(fore|back)ground-at-point, picked-(fore|back)ground,
;;            pick-(fore|back)ground-at-mouse-pointer, pick-(fore|back)ground-at-point.
;; 2004/10/10 dadams
;;     read-face-name: for Emacs < 21 only.
;; 2004/09/21 dadams
;;     make-face: created Emacs 21 version.
;; 2001/01/05 dadams
;;     '(lambda...) -> (function (lambda...))
;; 1999/03/17 dadams
;;     1. Protect calls with fboundp.
;;     2. Updated to corrspond with version Emacs 19.34.1.
;; 1996/07/15 dadams
;;     Added redefinition of make-face.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(require 'faces)
(eval-when-compile (when (< emacs-major-version 21) (require 'cl-lib))) ;; dolist, pop, push

(require 'thingatpt nil t) ;; (no error if not found): symbol-at-point
(when (and (require 'thingatpt+ nil t) ;; (no error if not found): symbol-nearest-point
           (fboundp 'tap-put-thing-at-point-props)) ; >= 2012-08-21
  (tap-define-aliases-wo-prefix)
  (tap-put-thing-at-point-props))

;;;;;;;;;;;;;;;;;;;;



;; REPLACES ORIGINAL in `faces.el': `highlight' face is the default.
;;
(when (< emacs-major-version 21)
  (defun read-face-name (prompt)
    "Read name of a face (default: \"highlight\") and return it as a symbol.
Prompts with arg PROMPT (a string)."
    (let (face)
      (while (zerop (length face))
        (setq face (completing-read
                    prompt
                    (mapcar (function (lambda (x) (list (symbol-name x)))) (face-list))
                    nil t nil 'minibuffer-history "highlight" t)))
      (intern face))))



;; REPLACES ORIGINAL in `faces.el':
;; Uses `completing-read' in interactive spec, with `symbol-nearest-point'.
;; `symbol-nearest-point' is defined in `thingatpt+.el'.
;; `symbol-at-point' is defined in `thingatpt.el'.
;;
(if (< emacs-major-version 21)
    (defun make-face (name &optional no-resources)
      "Define a new face named NAME, on all frames.
You can modify the font, color, etc of this face with the `set-face-*'
functions.

If NO-RESOURCES is non-nil, then we ignore X resources
and always make a face whose attributes are all nil.

If the face already exists, it is unmodified.
The argument, NAME, is returned."
      (interactive
       (let ((symb (cond ((fboundp 'symbol-nearest-point) (symbol-nearest-point))
                         ((fboundp 'symbol-at-point) (symbol-at-point))
                         (t nil)))
             (enable-recursive-minibuffers t))
         (list (intern (completing-read "Make face: " obarray nil nil
                                        nil nil (symbol-name symb) t)))))
      (unless (internal-find-face name)
        (let ((face (make-vector 12 nil)))
          (aset face 0 'face)
          (aset face 1 name)
          (let* ((frames (frame-list))
                 (inhibit-quit t)
                 (id (internal-next-face-id)))
            (when (fboundp 'make-face-internal) (make-face-internal id))
            (aset face 2 id)
            (while frames
              (set-frame-face-alist (car frames)
                                    (cons (cons name (copy-sequence face))
                                          (frame-face-alist (car frames))))
              (pop frames))
            (push (cons name face) global-face-data))
          ;; When making a face after frames already exist.
          (unless no-resources
            (when (memq window-system '(x w32 win32)) (make-face-x-resource-internal face)))
          ;; Add to face menu.
          (when (fboundp 'facemenu-add-new-face) (facemenu-add-new-face name))))
      name)                             ; Return the NAME.
  (defun make-face (face &optional no-init-from-resources)
    "Define a new face with name FACE, a symbol.
NO-INIT-FROM-RESOURCES non-nil means don't initialize frame-local
variants of FACE from X resources.  (X resources recognized are found
in the global variable `face-x-resources'.)  If FACE is already known
as a face, leave it unmodified.  Value is FACE."
    (interactive
     (let ((symb (cond ((fboundp 'symbol-nearest-point) (symbol-nearest-point))
                       ((fboundp 'symbol-at-point) (symbol-at-point))
                       (t nil)))
           (enable-recursive-minibuffers t))
       (list (intern (completing-read "Make face: " obarray nil nil
                                      nil nil (symbol-name symb) t)))))
    (unless (facep face)
      ;; Make frame-local faces (this also makes the global one).
      (dolist (frame (frame-list))
        (internal-make-lisp-face face frame))
      ;; Add the face to the face menu.
      (when (fboundp 'facemenu-add-new-face)
        (facemenu-add-new-face face))
      ;; Define frame-local faces for all frames from X resources.
      (unless no-init-from-resources
        (make-face-x-resource-internal face)))
    face))

(defun face-foreground-20+ (face &optional frame inherit)
  "A version of `face-foreground' that will work with Emacs 20 and later."
  (condition-case nil
      (face-foreground face frame inherit) ; Emacs 22+.
    (error (face-foreground face frame))))

(defun face-background-20+ (face &optional frame inherit)
  "A version of `face-background' that will work with Emacs 20 and later."
  (condition-case nil
      (face-background face frame inherit) ; Emacs 22+.
    (error (face-background face frame))))

;;;;;;;;;;;;;;;;;;;;;;;

(provide 'faces+)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; faces+.el ends here
#+end_src

** doremi.el

#+call: hash() :exports none

#+RESULTS:
: 20210601222914695012500

#+name: 20210601222914695012500
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; doremi.el --- Do Re Mi: Incremental change using arrow keys or mouse wheel.
;;
;; Filename: doremi.el
;; Description: Incremental change using arrow keys or mouse wheel.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 2004-2018, Drew Adams, all rights reserved.
;; Created: Thu Sep 02 08:21:37 2004
;; Version: 0
;; Package-Requires: ()
;; Last-Updated: Mon Jan  1 11:05:23 2018 (-0800)
;;           By: dradams
;;     Update #: 1632
;; URL: https://www.emacswiki.org/emacs/download/doremi.el
;; Doc URL: https://www.emacswiki.org/emacs/DoReMi
;; Keywords: keys, cycle, repeat, higher-order
;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   `mwheel', `ring'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;    Do Re Mi: Incremental change using arrow keys or mouse wheel.
;;
;; When you invoke Do Re Mi commands, you can then press and hold an
;; up/down arrow key, or turn the mouse wheel, to run up and down the
;; scale: do, re, mi,...
;;
;; Use the up/down arrow keys or the mouse wheel to:
;;
;;  - Change nearly any parameter incrementally (dynamically).
;;
;;  - Repeat an action.
;;
;;  - Cycle through a set of values, without changing anything (for
;;    example, to choose an item).  In this use, think of choosing
;;    from a menu.  This is similar to using a minibuffer history.
;;    The input choices can take the form of any Emacs-Lisp sequence
;;    (list, array, string, vector) - this sequence is converted to a
;;    circular structure (ring).
;;
;;  - Do just about anything: call a different function for each
;;    arrow.
;;
;; This works with numerical parameters that can be incremented and
;; decremented, and it works with parameters that can take on one of a
;; number of values.  In fact, it is even more general than that: you
;; can use it to associate nearly any function or pair of functions
;; with the arrow keys and the mouse wheel.
;;
;; By default, the up and down arrow keys are used, but any other keys
;; may be used instead.  Mouse wheel movements are recognized for
;; Emacs 20 and Emacs 21 (using library `mwheel.el').  `mouse-2'
;; presses are ignored, so that they won't interfere with rotating the
;; wheel.
;;
;; See the doc string for function `doremi' for more information.
;;
;; Code defining a few example commands is included here (but
;; commented out), so you can see how to use this.  For more examples
;; of using function `doremi', see files `doremi-frm.el' and
;; `doremi-cmd.el'.
;;
;; If you use this library in terminal Emacs (no graphic display) then
;; some of the features, such as mouse-wheel actions, will not be
;; available to you.  But the basic features should work.
;;
;; For Emacs prior to release 23, this library requires library
;; `ring+.el', which provides extensions to the standard library
;; `ring.el' to let you manipulate circular structures.  (Library
;; `ring+.el' is part of GNU Emacs 23 and later.)
;;
;;
;;  Non-interactive functions defined here:
;;
;;    `doremi', `doremi-intersection', `doremi-limit',
;;    `doremi-set-new-value', `doremi-wrap'.
;;
;;  User options (variables) defined here:
;;
;;    `doremi-boost-down-keys', `doremi-boost-scale-factor',
;;    `doremi-boost-up-keys', `doremi-down-keys', `doremi-up-keys'.
;;
;;  Add this to your initialization file (~/.emacs or ~/_emacs):
;;
;;    (require 'doremi)
;;
;;  See also these related libraries that make use of `doremi':
;;
;;    `doremi-frm.el' - Incrementally adjust frame properties.
;;    `doremi-cmd.el' - Other Do Re Mi commands.
;;    `doremi-mac.el' - Macro to define Do Re Mi commands and
;;                      automatically add them to Do Re Mi menu.
;;
;;  This has been tested on GNU Emacs 20, 21, and 22 on MS Windows.
;;
;;
;; TO DO?:
;;
;;   - Replace `boost-*' keys by test for modifiers (as for wheel).
;;   - Combine with customize.  That is, have customize buffers use
;;     Do Re Mi commands to defined numeric or enumeration values.
;;   - Provide buttons (menu items) in menus that act like up & down
;;     arrows.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2015/08/15 dadams
;;     doremi: If not display-graphic-p, use read-key instead of read-event.  Thx to Felix Esch.
;; 2015/07/08 dadams
;;     doremi: Use %S, not %s in error messages for unknown values.
;; 2013/06/06 dadams
;;     Do not require ring+.el unless prior to Emacs 23.
;; 2011/09/07 dadams
;;     doremi: Use mouse-wheel-(up|down)-event everywhere.  Thx to Michael Heerdegen.
;; 2011/01/04 dadams
;;     Removed autoload cookies from non-interactive functions.
;;     Added autoload cookies for defgroup, defcustom.
;; 2009/11/14 dadams
;;     doremi-wrap: Wrap value around, instead of just moving to the other limit.
;; 2009/11/07 dadams
;;     doremi: Increment can now be a list of numbers.
;;             Use >= 0, not natnump, since not necessarily an integer.
;; 2009/06/26 dadams
;;     Added: doremi-intersection.
;;     Renamed options doremi-...-key to doremi-...-keys, and made them lists.
;;     Added top-level warning when load the library if obsolete vars are boundp.
;;     doremi, doremi-set-new-value: Use these new list vars.
;;     doremi: Handle Emacs 23 mouse-wheel modifiers using doremi-intersection (ugly hack).
;; 2009/06/19 dadams
;;     doremi-*-key: fixed :type, clarified doc string about value.
;; 2009/06/18 dadams
;;     doremi: Use single-key-description in messages.
;; 2007/12/31 dadams
;;     doremi: Use doremi-set-new-value instead of wrapping input functions.
;;             Commented out setting redisplay-dont-pause to t.
;;     Added: doremi-set-new-value.
;;     oremi-boost-scale-factor: Clarified doc string.
;;      property -> parameter in all doc strings (RMS).
;; 2007/10/21 dadams
;;     doremi: Don't let switch-frame events quit the cl-loop.
;;     Added: doremi-limit, doremi-wrap.
;; 2006/01/07 dadams
;;     Added :link.
;; 2005/07/25 dadams
;;     Added :prefix to defgroup.
;; 2005/01/16 dadams
;;     doremi: Bind redisplay-dont-pause to `t' for Emacs 21.
;;             Use error-message-string to format error string.
;; 2005/01/01 dadams
;;     defvar -> defcustom.  Added (defgroup doremi).
;; 2004/11/28 dadams
;;     doremi: Allowed for GROWTH-FN to be a function, not just a flag.
;;             Added initial value to initial prompt.
;;             Corrected addition of last event to unread-command-events.
;;             Improved error messages.
;; 2004/09/26 dadams
;;     Renamed do-re-mi* to doremi*.
;;     Prefixed everything here with doremi-.
;;     Changed convert-sequence-to-ring to ring-convert-sequence-to-ring.
;; 2004/09/24 dadams
;;     Added use of mouse wheel.  Changed key sequences to events.
;;     Change prompt to add Meta info only for non-enumeration.
;;     Suppress keystroke echoing.
;; 2004/09/19 dadams
;;     Moved doremi-buffers to doremi-cmd.el.
;;     Commented-out commands test-*.
;; 2004/09/11 dadams
;;     Moved to doremi-frm.el: adjust-*, cycle-frame-configs,
;;           grow-font, move-frame-*, and apply of push-frame-config.
;; 2004/09/07 dadams
;;     Added: cycle-frame-configs.
;;     Apply push-frame-config to frame commands here.
;; 2004/09/06 dadams
;;     Added boost-*.  Added error treatment to move-frame-*.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(require 'ring)
(unless (fboundp 'ring-member)          ; Emacs 23
  (require 'ring+))
  ;; ring-convert-sequence-to-ring, ring-insert+extend, ring-member, ring-next, ring-previous
(require 'mwheel nil t) ; (no error if not found): mwheel-event-button

;; In Emacs 20, because `mwheel.el' is not loaded, byte-compiling
;; would give the following error messages, which can be ignored:
;;
;; While compiling doremi:
;;   ** reference to free variable mouse-wheel-down-event
;;   ** reference to free variable mouse-wheel-up-event
;; While compiling the end of the data:
;;   ** the function mwheel-event-button is not known to be defined.
;;
;; This eliminates (only) the first of these two byte-compiler messages:
(defvar mouse-wheel-down-event)
(defvar mouse-wheel-up-event)

;;;;;;;;;;;;;;;;;;;;;;;;;;
 
;;; User Options (Variables)

;;;###autoload
(defgroup doremi nil
  "Do Re Mi: Incremental change using arrow keys or mouse wheel.
Define commands to perform repetitive or incremental operations."
  :prefix "doremi-" :group 'convenience
  :link `(url-link :tag "Send Bug Report"
          ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
doremi.el bug: \
&body=Describe bug here, starting with `emacs -q'.  \
Don't forget to mention your Emacs and library versions."))
  :link '(url-link :tag "Other Libraries by Drew"
          "https://www.emacswiki.org/emacs/DrewsElispLibraries")
  :link '(url-link :tag "Download"
          "https://www.emacswiki.org/emacs/download/doremi.el")
  :link '(url-link :tag "Description"
          "https://www.emacswiki.org/emacs/Doremi")
  :link '(emacs-commentary-link :tag "Commentary" "doremi"))

;;;###autoload
(defcustom doremi-up-keys '(up)
  "*Keys (events) associated with one direction of adjusting by `doremi'.
The other direction is associated with `doremi-down-keys'.

The value must be a list of keyboard events: characters or symbols.
For example, a list element might be `?\C-p' or `prior'."
  :type '(repeat (restricted-sexp :match-alternatives (integerp symbolp))) :group 'doremi)

;;;###autoload
(defcustom doremi-down-keys '(down)
  "*Keys (events) associated with one direction of adjusting by `doremi'.
The other direction is associated with `doremi-up-keys'.

The value must be a list of keyboard events: characters or symbols.
For example, a list element might be `?\C-n' or `next'."
  :type '(repeat (restricted-sexp :match-alternatives (integerp symbolp))) :group 'doremi)

;;;###autoload
(defcustom doremi-boost-up-keys '(M-up)
  "*Like `doremi-up-keys', but increments by `doremi-boost-scale-factor'.

The value must be a list of keyboard events: characters or symbols.
For example, a list element might be `?\M-p' or `S-prior'."
  :type '(repeat (restricted-sexp :match-alternatives (integerp symbolp))) :group 'doremi)

;;;###autoload
(defcustom doremi-boost-down-keys '(M-down)
  "*Like `doremi-down-keys', but increments by `doremi-boost-scale-factor'.

The value must be a list of keyboard events: characters or symbols.
For example, a list element might be `?\M-n' or `S-next'."
  :type '(repeat (restricted-sexp :match-alternatives (integerp symbolp))) :group 'doremi)

;;;###autoload
(defcustom doremi-boost-scale-factor 10
  "*Factor to boost incremental change of numerical properties.
Using `doremi-boost-up-keys' or `doremi-boost-down-keys', instead of
`doremi-up-keys' or `doremi-down-keys' means that the increment is
this many times larger.  Using a modifier key with the mouse wheel has
the same effect as using `doremi-boost-up-keys' or
`doremi-boost-down-keys'."
  :type 'integer :group 'doremi)

;; Originally, the key-variable options were for a single key, not a list of keys.
;; Top-level warning when load the library.
(when (or (boundp 'doremi-up-key)   (boundp 'doremi-boost-up-key)
          (boundp 'doremi-down-key) (boundp 'doremi-boost-down-key))
  (message "WARNING: Single-key options `doremi-...-key' are OBSOLETE. Use `doremi-...-keys'."))
 
;;; Non-Interactive Functions

(defun doremi (setter-fn init-val incr &optional growth-fn enum allow-new-p)
  "Use arrow keys and/or mouse wheel to adjust some parameter.

Variables `doremi-up-keys' and `doremi-down-keys' are variables that
you can assign to any key sequences.  You can use these keys or the
mouse wheel to dynamically adjust any parameter.  The keys can be held
down for continual adjustment.

Example parameters include background color and font size, but a
parameter can be anything that is adjustable in any of these ways:
 * A numerical parameter that can be incremented or decremented, such
   as frame height.
 * A parameter that can take on one of several values (an enumerated
   choice), such as a frame background color.
 * A parameter that has an associated function to change its value
   incrementally.

SETTER-FN is a function that adjusts the parameter.  Two forms:
 1) It takes a value as argument and sets the parameter to this value.
 2) It is a \"growth\" function, which takes an increment as argument
    and incrementally adjusts the value of the parameter.

 Note that \"growth\" function really means, here, that the function
 takes an increment as argument and does the incrementation (or
 whatever) itself.  It is contrasted with an absolute SETTER-FN that
 just uses a value that is incremented by `doremi'.  The difference is
 which function does the incrementing, SETTER-FN or `doremi'.

 In case #1, the new parameter value _must_ be returned by SETTER-FN.
 In case #2, the new parameter value should be returned by SETTER-FN,
             so that it can be echoed to the user.

INIT-VAL is the initial value for adjustment.  In the case of an
 incremental growth function (case #2), this is ignored.

INCR is an adjustment increment.
 For an absolute SETTER-FN (#1), this is applied to INIT-VAL before
     calling the function.  If ENUM is non-nil, then INCR is ignored.
 For an incremental growth function, this is passed to the function.

INCR can be a number or a list of numbers.  When it is a list of
numbers, each is incremented or decremented (and possibly boosted by
`doremi-boost-scale-factor' - see below).

If GROWTH-FN is non-nil, then SETTER-FN is an incremental growth
  function (case #2), and it is called with INCR as its only argument.
If GROWTH-FN is a function, then it is used as an alternative growth
  function.  In this case, SETTER-FN is called for `doremi-up-keys'
  and GROWTH-FN is called for `doremi-down-keys' (mouse wheel is
  similar).

ENUM is a choice-enumeration sequence (list, array, string...).
  If ENUM is non-nil, then it is converted to a ring (circular
  structure), and `doremi-up-keys' and `doremi-down-keys' set the
  parameter to `ring-next' and `ring-previous' values, respectively.

If ENUM is non-nil, then ALLOW-NEW-P defines what happens if INIT-VAL
is not a member of ENUM.  If ALLOW-NEW-P is nil, then an error is
raised.  If non-nil, then INIT-VAL is added (to the ring created from
ENUM).  If the symbol `extend', then if the ring is full it is
extended to include INIT-VAL; other non-nil values cause the oldest
item in a full ring to be dropped.

For numerical parameters (not enumerated choices), there are actually
two levels of incrementation.  For faster incrementation, you can use
`doremi-boost-up-keys' and `doremi-boost-down-keys', or you can use
any keyboard modifier(s) (Shift, Meta, Control...) with the mouse
wheel.  Incrementation is then `doremi-boost-scale-factor' times
faster.

For examples of using `doremi', see the source code of libraries
`doremi.el', `doremi-frm.el', and `doremi-cmd.el'."
  (setq incr  (or incr 1))
  (let ((new-incr  incr))
    ;; $$$$ (redisplay-dont-pause t))       ; To give continual feedback.
    ;; Convert sequence of values (list, array, vector, string) to a ring.
    (when (and enum (sequencep enum)) (setq enum  (ring-convert-sequence-to-ring enum)))

    ;; cl-loop.  Prompt, read event, and act on arrow-key or mouse-wheel event.
    (let ((prompt           (format "Use %s, %s, or mouse wheel to adjust value"
                                    (single-key-description (car doremi-up-keys))
                                    (single-key-description (car doremi-down-keys))))
          (keys             (append doremi-up-keys doremi-down-keys
                                    doremi-boost-up-keys doremi-boost-down-keys))
          (echo-keystrokes  0)          ; Suppress keystroke echoing.
          (wheel-down       (if (boundp 'mouse-wheel-up-event)
                                mouse-wheel-up-event
                              'wheel-down)) ; Emacs 20.
          (wheel-up         (if (boundp 'mouse-wheel-down-event)
                                mouse-wheel-down-event
                              'wheel-up)) ; Emacs 20.
          evnt save-prompt)
      (unless enum (setq prompt  (concat prompt " (modifier key: faster)")))
      (setq prompt       (format (concat prompt ".  Value now: %s") init-val)
            save-prompt  prompt)
      (while (progn (setq evnt    (if (if (fboundp 'display-graphic-p)
                                          (display-graphic-p)
                                        window-system)
                                      (read-event prompt)
                                    (read-key prompt))
                          prompt  nil)
                    (or (member evnt keys)
                        (and (consp evnt)
                             (member (event-basic-type (car evnt))
                                     `(switch-frame mouse-wheel mouse-2
                                       ,wheel-up ,wheel-down)))))
        ;; Set up the proper increment value.
        (cond ((member evnt doremi-up-keys) (setq new-incr  incr)) ; +
              ((member evnt doremi-down-keys) ; -
               (setq new-incr  (if (atom incr) (- incr) (mapcar #'- incr))))
              ((member evnt doremi-boost-up-keys) ; ++
               (setq new-incr
                     (if (atom incr)
                         (* doremi-boost-scale-factor incr)
                       (mapcar #'(lambda (in) (* doremi-boost-scale-factor in)) incr))))
              ((member evnt doremi-boost-down-keys) ; --
               (setq new-incr
                     (if (atom incr)
                         (* doremi-boost-scale-factor (- incr))
                       (mapcar #'(lambda (in) (* doremi-boost-scale-factor (- in))) incr))))

              ;; Emacs 20 mouse wheel.
              ((and (consp evnt) (equal 'mouse-wheel (event-basic-type (car evnt))))
               (setq new-incr  (if (< 0 (nth 2 evnt))
                                   incr
                                 (if (atom incr) (- incr) (mapcar #'- incr))))
               (when (event-modifiers evnt) ; Boost it
                 (setq new-incr
                       (if (atom new-incr)
                           (* doremi-boost-scale-factor new-incr)
                         (mapcar #'(lambda (in) (* doremi-boost-scale-factor in)) new-incr)))))

              ;; Emacs 21+ mouse wheel: `mwheel.el'
              ;; Free vars here: `mouse-wheel-down-event', `mouse-wheel-up-event'.
              ;; Those vars and function `mwheel-event-button' are defined in `mwheel.el'.
              ((and (consp evnt) (member (event-basic-type (car evnt))
                                         `(,wheel-up ,wheel-down)))
               (let ((button  (mwheel-event-button evnt)))
                 (cond ((eq button mouse-wheel-down-event) (setq new-incr  incr))
                       ((eq button mouse-wheel-up-event)
                        (setq new-incr  (if (atom incr) (- incr) (mapcar #'- incr))))
                       (t (error "`doremi', bad mwheel-scroll binding - report bug to %s%s%s%s"
                                 "drew.adams" "@" "oracle" ".com"))))
               (when (if (> emacs-major-version 22) ; Boost it
                         (doremi-intersection (event-modifiers evnt)
                                              '(shift control meta alt hyper super))
                       (event-modifiers evnt))
                 (setq new-incr
                       (if (atom new-incr)
                           (* doremi-boost-scale-factor new-incr)
                         (mapcar #'(lambda (in) (* doremi-boost-scale-factor in)) new-incr)))))
              (t (error "`doremi', unexpected event: `%S' - report bug to %s%s%s%s"
                        evnt "drew.adams" "@" "oracle" ".com")))
        (if (and (consp evnt) (memq (event-basic-type (car evnt)) '(mouse-2 switch-frame)))
            (message save-prompt)       ; Just skip mouse-2 event (ignore while using wheel).

          ;; Adjust setting and update INIT-VAL.  Four cases are treated separately:
          ;; 1) ENUM non-nil: use `ring-next' and `ring-previous'.
          ;; 2) SETTER-FN and GROWTH-FN are both "growth" functions: call one of them.
          ;; 3) SETTER-FN is a "growth" function: call it on the INCR arg.
          ;; 4) otherwise (absolute fn): increment INIT-VAL, then call SETTER-FN on it.
          (condition-case failure
              (setq init-val
                    (cond (;; 1) Ring of values (enumeration list).  Use `ring-next''...
                           (ring-p enum)
                           ;; If INIT-VAL is not already in the ring, add it.
                           ;; Extend the ring size if ALLOW-NEW-P is `extend'.
                           (when (and allow-new-p (not (ring-member enum init-val)))
                             (ring-insert+extend enum init-val
                                                 (eq 'extend allow-new-p)))
                           (when (< (ring-length enum) 2)
                             (error "`doremi' - Need at least two alternatives: %S" enum))
                           (let* ((vec     (cdr (cdr enum)))
                                  (veclen  (length vec)))
                             (if (and (numberp new-incr) (>= new-incr 0))
                                 (doremi-set-new-value setter-fn (ring-next enum init-val))
                               (doremi-set-new-value setter-fn (ring-previous enum init-val)))))

                          ;; 2) Two incremental growth functions.  Call one on (new) INCR only.
                          ((functionp growth-fn)
                           (if (atom new-incr)
                               (if (and (numberp new-incr) (>= new-incr 0))
                                   (doremi-set-new-value setter-fn new-incr)
                                 (doremi-set-new-value growth-fn (- new-incr)))
                             (if (and (numberp (car new-incr)) (>= (car new-incr) 0))
                                 (doremi-set-new-value setter-fn new-incr)
                               (doremi-set-new-value growth-fn (mapcar #'- new-incr)))))

                          ;; 3) Single incremental growth function.  Call it on (new) INCR only.
                          (growth-fn (doremi-set-new-value setter-fn new-incr))

                          ;; 4) Otherwise.  Increment value.  Call setter function on new value.
                          ((and (numberp new-incr) (numberp init-val))
                           (doremi-set-new-value setter-fn (+ init-val new-incr)))
                          (t (error "`doremi' - Bad argument.  INIT-VAL: %S, INCR: %S"
                                    init-val new-incr))))
            (error (error "%s" (error-message-string failure))))))
      (message nil)
      (setq unread-command-events  (cons evnt unread-command-events)))))

(defun doremi-intersection (list1 list2)
  "Set intersection of lists LIST1 and LIST2.
This is a non-destructive operation: it copies the data if necessary."
  (and list1 list2 (if (equal list1 list2)
                       list1
                     (let ((result  ()))
                       (unless (>= (length list1) (length list2))
                         (setq list1  (prog1 list2 (setq list2  list1)))) ; Swap them.
                       (while list2
                         (when (member (car list2) list1)
                           (setq result  (cons (car list2) result)))
                         (setq list2  (cdr list2)))
                       result))))

(defun doremi-set-new-value (setter-fn newval)
  "Apply SETTER-FN to NEWVAL, and return NEWVAL.  Display progress message."
  (prog1 (setq newval  (funcall setter-fn newval))
    (message "Use %s, %s, or mouse wheel again.  New value: %s"
             (single-key-description (car doremi-up-keys))
             (single-key-description (car doremi-down-keys))
             newval)))

(defun doremi-limit (value min max)
  "Limit VALUE to MIN or MAX limit if either is overshot.
MIN or MAX = nil means no such limit.
Return the new, possibly limited value."
  (cond ((and max (> value max)) max)
        ((and min (< value min)) min)
        (t value)))

;; $$$$$
;; (defun doremi-wrap (value min max)
;;   "Wrap VALUE around if it overshoots MIN or MAX."
;;   (cond ((> value max) min)
;;         ((< value min) max)
;;         (t value)))

(defun doremi-wrap (value min max)
  "Wrap VALUE around if it overshoots MIN or MAX.
Return the new, wrapped value.
MAX must be greater than min."
  (let ((new  value)
        (del  (- max min)))
    (while (> new max) (setq new  (- new del)))
    (while (< new min) (setq new  (+ new del)))
    new))
 
;;; Example Commands.  Uncomment these and try them to get the idea.
;;
;; See also the commands in `doremi-cmd.el' and `doremi-frm.el' for
;; more examples.


;; Uses an enumeration list, (buffer-list).
;; (defun doremi-buffers+ ()
;;   "Successively cycle among existing buffers."
;;   (interactive)
;;   (doremi (lambda (newval) (switch-to-buffer newval 'norecord) newval)
;;            (current-buffer)
;;            nil                         ; ignored
;;            nil                         ; ignored
;;            (buffer-list)))

;; Test command that uses an enumeration list.
;; This command changes nothing.  It just echoes successive values.
;; (defun test-list+ ()
;;   (interactive)
;;   (doremi (lambda (newval) newval) 'c 1 nil '(a b c d e f g)))

;; Test command that uses an enumeration list.
;; In this test, the init-val is not a member of the enumeration list.
;; An error is raised.
;; This command changes nothing.  It just echoes successive values.
;; (defun test-list-prohibit-nonmember+ ()
;;   (interactive)
;;   (doremi (lambda (newval) newval) 'c 1 nil '(a b)))

;; Test command that uses an enumeration list.
;; In this test, the init-val is not a member of the enumeration list.
;; Because of non-nil 6th arg ALLOW-NEW-P, the initial value 'c is added
;; to the enumeration.
;; This command changes nothing.  It just echoes successive values.
;; (defun test-list-allow-nonmember+ ()
;;   (interactive)
;;   (doremi (lambda (newval) newval) 'c 1 nil '(a b) t))

;; Test command that uses an enumeration list.
;; In this test, the init-val is not a member of the enumeration list.
;; Because 6th arg ALLOW-NEW-P is 'extend, the enumeration is enlarged
;; to include the initial value 'c.
;; This command changes nothing.  It just echoes successive values.
;; (defun test-list-allow-nonmember+extend+ ()
;;   (interactive)
;;   (doremi (lambda (newval) newval) 'c 1 nil '(a b) 'extend))

;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'doremi)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; doremi.el ends here
#+end_src

** doremi-cmd.el

#+call: hash() :exports none

#+RESULTS:
: 20210601222916938013900

#+name: 20210601222916938013900
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; doremi-cmd.el --- Miscellaneous Do Re Mi commands
;;
;; Filename: doremi-cmd.el
;; Description: Miscellaneous Do Re Mi commands
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 2004-2018, Drew Adams, all rights reserved.
;; Created: Sun Sep 12 17:13:58 2004
;; Version: 0
;; Package-Requires: ((doremi "0"))
;; Last-Updated: Fri Sep 21 13:47:27 2018 (-0700)
;;           By: dradams
;;     Update #: 521
;; URL: https://www.emacswiki.org/emacs/download/doremi-cmd.el
;; Doc URL: https://www.emacswiki.org/emacs/DoReMi
;; Keywords: keys, cycle, repeat
;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   `cus-theme', `doremi', `mwheel', `ring'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;    Miscellaneous Do Re Mi commands.
;;
;;  During Do Re Mi commands, you can press and hold an up/down arrow
;;  key, or rotate the mouse wheel, to change face attributes or frame
;;  parameters.  For more info, see file `doremi.el' and the
;;  doc-string for function `doremi' in particular.
;;
;;  NOTE: Functions and variables in this library have the prefix
;;        `doremi-'.  In order to more easily distinguish commands
;;        that iterate in Do Re Mi fashion from other functions in the
;;        library, the iterative commands are suffixed with `+'.
;;
;;  If you also use library `crosshairs.el' (which requires libraries
;;  `hl-line.el', `hl-line+.el', `vline.el', and `col-highlight.el'),
;;  then commands `doremi-marks+' and `doremi-global-marks+' use
;;  crosshairs to highlight the mark positions when you visit them.
;;
;;  Note on saving changes made with the commands defined here:
;;
;;    Some of the commands defined here change face and frame
;;    properties. You can save any changes you have made, by using
;;    Customize. To visit a Customize buffer of all unsaved changes
;;    you have made, use command `customize-customized'.
;;
;;    Frame parameter changes, such as background color, can be saved
;;    for future use by all frames or all frames of a certain
;;    kind. For that, you must change the frame parameters of the
;;    correponding frame-alist variable.
;;
;;    There is no single variable for saving changes to parameters of
;;    the current frame. Instead, there are several different
;;    frame-alist variables, which you can use to define different
;;    kinds of frames. These include: `default-frame-alist',
;;    `initial-frame-alist', and `special-display-frame-alist'. The
;;    complete list of such frame alist variables is available using
;;    function `frame-alist-var-names', defined in library
;;    `frame-cmds.el'.
;;
;;    Example: Suppose you change the background color of a frame and
;;    want to make that the default background color for new frames in
;;    the future. You will need to update the value of variable
;;    `default-frame-alist' to use the `background-color' parameter
;;    setting of the changed frame.
;;
;;    You can easily copy one or all parameter values from any given
;;    frame to any frame alist (such as `default-frame-alist'), by
;;    using the commands `set-frame-alist-parameter-from-frame' and
;;    `set-all-frame-alist-parameters-from-frame'. Those commands are
;;    defined in library `frame-cmds.el'.
;;
;;
;;  User options defined here:
;;
;;    `doremi-color-themes', `doremi-custom-themes' (Emacs 24+),
;;    `doremi-custom-themes-accumulate-flag' (Emacs 24+),
;;    `doremi-themes-update-flag'.
;;
;;  Commands defined here:
;;
;;    `doremi-bookmarks+', `doremi-buffers+', `doremi-color-themes+',
;;    `doremi-custom-themes+' (Emacs 24+), `doremi-global-marks+',
;;    `doremi-marks+', `doremi-window-height+', `doremi-windows+'
;;    (Emacs 22+), `doremi-window-width+'.
;;
;;  Non-interactive functions defined here:
;;
;;    `doremi--pop-to-buffer-same-window', `doremi-buffers-1',
;;    `doremi-color-themes-1', `doremi-custom-themes-1' (Emacs 24+),
;;    `doremi-global-marks-1', `doremi-marks-1', `doremi-windows-1'.
;;
;;
;;  Add this to your initialization file (~/.emacs or ~/_emacs):
;;
;;    (require 'doremi-cmd)
;;
;;
;;  See also these related Do Re Mi libraries:
;;
;;    `doremi-frm.el' - Do Re Mi commands to adjust frame properties.
;;
;;    `doremi-mac.el' - Macro to define Do Re Mi commands and
;;                      automatically add them to a Do Re Mi menu.
;;
;;
;;  Suggested bindings:
;;
;;   (defalias 'doremi-prefix (make-sparse-keymap))
;;   (defvar doremi-map (symbol-function 'doremi-prefix)
;;     "Keymap for Do Re Mi commands.")
;;   (define-key global-map "\C-xt" 'doremi-prefix)
;;   (define-key doremi-map "b" 'doremi-buffers+)
;;   (define-key doremi-map "g" 'doremi-global-marks+)
;;   (define-key doremi-map "m" 'doremi-marks+)
;;   (define-key doremi-map "r" 'doremi-bookmarks+) ; reading books?
;;   (define-key doremi-map "s" 'doremi-custom-themes+) ; custom schemes
;;   (define-key doremi-map "w" 'doremi-window-height+)
;;
;;  Customize the menu. Uncomment this to try it out.
;;
;;   (defvar menu-bar-doremi-menu (make-sparse-keymap "Do Re Mi"))
;;   (define-key global-map [menu-bar doremi]
;;     (cons "Do Re Mi" menu-bar-doremi-menu))
;;   (define-key menu-bar-doremi-menu [doremi-custom-themes]
;;     '(menu-item "Custom Themes" . doremi-custom-themes+
;;       :help "Successively cycle among custom themes: `up'/`down'"))
;;   (define-key menu-bar-doremi-menu [doremi-global-marks]
;;     '(menu-item "Global Marks" . doremi-global-marks+
;;       :help "Successively cycle among global marks: `up'/`down'"))
;;   (define-key menu-bar-doremi-menu [doremi-marks]
;;     '(menu-item "Marks in Buffer" . doremi-marks+
;;       :help "Successively cycle among marks in this buffer: `up'/`down'"))
;;   (define-key menu-bar-doremi-menu [doremi-bookmarks]
;;     '(menu-item "Bookmarks" . doremi-bookmarks+
;;       :help "Successively cycle among bookmarks: `up'/`down'"))
;;   (define-key menu-bar-doremi-menu [doremi-buffers]
;;     '(menu-item "Buffers" . doremi-buffers+
;;       :help "Successively cycle among buffers: `up'/`down'"))
;;   (define-key menu-bar-doremi-menu [doremi-windows]
;;     '(menu-item "Windows" doremi-windows+
;;       :help "Successively cycle among windows: `up'/`down'"
;;       :enable (not (one-window-p))))
;;   (define-key menu-bar-doremi-menu [doremi-window-height]
;;     '(menu-item "Window Size" doremi-window-height+
;;       :help "Resize window incrementally: `up'/`down'/`left'/`right'"
;;       :enable (not (one-window-p))))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2018/09/21 dadams
;;     Added: doremi--pop-to-buffer-same-window.
;;     doremi-buffers+, doremi-buffers-1, doremi-global-marks+:
;;       Use idoremi--pop-to-buffer-same-window, not switch-to-buffer.
;; 2016/05/12 dadams
;;     Added: doremi-window+, doremi-windows-1.
;; 2013/10/27 dadams
;;     Added: doremi-custom-themes-accumulate-flag.
;;     doremi-custom-themes-1: Respect doremi-custom-themes-accumulate-flag.
;; 2013/10/25 dadams
;;     Added: doremi-themes-update-flag.
;;     doremi-custom-themes: Use custom-available-themes, not custom-theme-p.
;;     doremi-(color|custom)-themes+: Added prefix arg - flips theme-saving flag.
;;     doremi-custom-themes+: Pass initial-theme to doremi-custom-themes-1.
;;                            Move chosen theme to the front.
;;                            Added message to echo final choice.
;;     doremi-custom-themes-1: Start with first theme, or last if no cycling yet.
;; 2013/10/23 dadams
;;     Added: doremi-custom-themes, doremi-custom-themes+, doremi-custom-themes-1.
;;     Thx to Kawabata Taichi.
;; 2011/01/04 dadams
;;     Added autoload cookie for defgroup.
;; 2010/03/09 dadams
;;     doremi-color-themes: Initialize to ().
;;     doremi-color-themes+: Do the real init of var doremi-color-themes here.
;; 2009/11/22 dadams
;;     Use color-theme-initialize instead of load-library, to load themes.
;; 2009/11/21 dadams
;;     Added: doremi-color-themes-1, doremi-buffers-1, doremi(-global)-marks-1.
;;     doremi-(color-themes|buffers|(-global)marks)+: Let C-g restore .  Use *-1.
;;     doremi-color-themes: Load color-theme-library.el also, for version 6.6.0+.
;;     doremi(-global)-marks(+|-1): Highlight position with crosshairs if we can.
;; 2009/11/07 dadams
;;     Renamed all Do Re Mi iterative commands by appending +.
;; 2009/06/26 dadams
;;     doremi-window-width: Use new key-list options, doremi-...-keys (not -key).
;; 2007/11/01 dadams
;;     Added: doremi-window-height, doremi-window-width.
;; 2007/10/08 dadams
;;     Use lowercase for defgroup groups.
;; 2006/01/07 dadams
;;     Added :link for sending bug report.
;; 2006/01/06 dadams
;;     Renamed group.  Added :link.
;; 2005/07/26 dadams
;;     Added :prefix to defgroup.
;;     Variable doremi-color-themes: Soft require of color-theme.
;; 2005/01/18 dadams
;;     Added Note on saving changes.
;; 2005/01/02 dadams
;;     Added: doremi-marks, doremi-global-marks.
;; 2005/01/01 dadams
;;     defvar -> defcustom. Added (defgroup doremi-cmd).
;;     Removed vestigial require of doremi-mac.el.
;; 2004/12/30 dadams
;;     doremi-color-themes (var): Use global color-themes list.
;; 2004/09/26 dadams
;;     Renamed do-re-mi* to doremi*.
;;     Prefixed everything here with doremi-.
;; 2004/09/19 dadams
;;     Added doremi-buffers.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(require 'doremi) ;; doremi

;; Quiet the byte-compiler.
(defvar color-theme-initialized)
(defvar color-themes)
(defvar custom-enabled-themes)          ; In `custom.el'.
(defvar doremi-custom-themes)           ; Here, Emacs 24+
(defvar doremi-custom-themes-accumulate-flag) ; Here, Emacs 24+

;;;;;;;;;;;;;;;;;;;;;;;;
 
;;; User Options (Variables)

;;;###autoload
(defgroup doremi-misc-commands nil
  "Miscellaneous Do Re Mi commands."
  :prefix "doremi-" :group 'doremi :group 'color-theme
  :link `(url-link :tag "Send Bug Report"
          ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
doremi-cmd.el bug: \
&body=Describe bug here, starting with `emacs -q'.  \
Don't forget to mention your Emacs and library versions."))
  :link '(url-link :tag "Other Libraries by Drew"
          "https://www.emacswiki.org/emacs/DrewsElispLibraries")
  :link '(url-link :tag "Download"
          "https://www.emacswiki.org/emacs/download/doremi-cmd.el")
  :link '(url-link :tag "Description"
          "https://www.emacswiki.org/emacs/Doremi")
  :link '(emacs-commentary-link :tag "Commentary" "doremi-cmd")
  )

;;;###autoload
(defcustom doremi-themes-update-flag nil
  "*Non-nil means choosing a theme saves the updated list of themes.
This applies to commands `doremi-custom-themes+' and
`doremi-color-themes+' and their respective options,
`doremi-custom-themes' and `doremi-color-themes'.

A prefix arg to the command flips the option value for the duration of
the command.")

;; Replace this by your favorite custom themes.
;;
;; Emacs 22-23 `cus-themes.el' has no `provide', and only Emacs 24 version
;; has `custom-available-themes'.
(when (condition-case nil (require 'cus-theme nil t) (error nil)) ; Emacs 24+
  (defcustom doremi-custom-themes ()
    "*List of custom themes to cycle through using `doremi-custom-themes+'."
    :type '(repeat (restricted-sexp
                    :match-alternatives
                    ((lambda (symb) (memq symb (custom-available-themes))))))
    :group 'doremi-misc-commands)

  (defcustom doremi-custom-themes-accumulate-flag nil
    "*Non-nil does not disable other custom themes when cycling to a theme.
Note: Setting this to non-nil can considerably slow down cycling.  The
more themes you cycle through, the slower it gets."
    :type 'boolean :group 'doremi-misc-commands))

;; Replace this by your favorite color themes. Each must be a defined function.
;; By default, this includes all color themes defined globally (`color-themes').
;;
;; NOTE: We need the `condition-case' because of a BUG in `directory-files' for
;; Emacs 20.  Bug reported to `color-theme.el' maintainer 2009-11-22.  The problem
;; is that the default value of `color-theme-libraries' concats
;; `file-name-directory', which ends in `/', with `/themes', not with `themes'.
;; So the result is `...//themes'.  That is tolerated by Emacs 21+
;; `directory-files', but not for Emacs 20.  Until this `color-theme.el' bug is
;; fixed, Emacs 20 users will need to manually load `color-theme-libraries.el'.
;;;###autoload
(defcustom doremi-color-themes ()
  "*List of color themes to cycle through using `doremi-color-themes+'."
  :type 'hook :group 'doremi-misc-commands)
 
;;; Commands (Interactive Functions)

;; Emacs 22-23 `cus-themes.el' has no `provide', and only Emacs 24 version
;; has `custom-available-themes'.
(when (condition-case nil (require 'cus-theme nil t) (error nil)) ; Emacs 24+
  (defun doremi-custom-themes+ (&optional flip)
    "Successively cycle among custom themes.
The themes used for cycling are those in option `doremi-custom-themes'.

You can use `C-g' to quit and cancel changes made so far.  Note,
however, that some things might not be restored.  `C-g' can only
disable any themes that you applied.  It cannot restore other
customizations that enabling a theme might have overruled.

Note: Having a lot of frames present can slow down this command
considerably.

Option `doremi-custom-themes-accumulate-flag' determines whether
cycling accumulates themes or disables all themes other than the
current one.  Note: A non-nil value (accumulating) can considerably
slow down cycling.

Option `doremi-themes-update-flag' determines whether the updated
value of `doremi-custom-themes' is saved.  A prefix arg to this command
flips the option value for the current invocation of the command."
    (interactive "P")
    ;; Delete `nil' that gets added by `enable-theme'.
    (let ((orig-themes  (delq nil (copy-sequence custom-enabled-themes))))
      (unless doremi-custom-themes
        (setq doremi-custom-themes  (custom-available-themes)))
      (condition-case nil
          (progn
            (doremi-custom-themes-1 (car orig-themes))
            ;; `enable-theme' -> `custom-reevaluate-setting' adds `nil'.
            (setq doremi-custom-themes  (delq nil doremi-custom-themes))
            ;; Move chosen theme to the front.
            (setq doremi-custom-themes  (delq (car custom-enabled-themes)
                                              doremi-custom-themes))
            (setq doremi-custom-themes  (cons (car custom-enabled-themes)
                                              doremi-custom-themes))
            (message "Chosen theme: `%s'" (car doremi-custom-themes))
            (when (or (and flip        (not doremi-themes-update-flag))
                      (and (not flip)  doremi-themes-update-flag))
              (customize-save-variable 'doremi-custom-themes
                                       doremi-custom-themes)))
        ((quit error)
         (condition-case nil
             (progn (mapc #'disable-theme custom-enabled-themes)
                    (mapc #'enable-theme orig-themes))
           (error nil))))))

  (defun doremi-custom-themes-1 (initial-theme)
    "Helper function for `doremi-custom-themes+'."
    (doremi (lambda (theme)             ; Enable it (SETTER-FN)
              (condition-case nil
                  (progn
                    (unless doremi-custom-themes-accumulate-flag
                      (mapc #'disable-theme custom-enabled-themes))
                    (if (custom-theme-p theme)
                        (enable-theme theme)
                      (load-theme theme t))
                    (run-hooks 'doremi-custom-theme-hook))
                (error (condition-case nil (disable-theme theme) (error nil))))
              theme)                    ; Return it, for next iteration.
            ;; Start with the first theme, or the last one if no cycling done yet.
            (or initial-theme  (car (last doremi-custom-themes)))
            nil                         ; Ignored (INCR)
            nil                         ; Ignored (GROWTH-FN)
            doremi-custom-themes)))     ; ENUM - enumeration

;;;###autoload
(defun doremi-color-themes+ (&optional flip)
  "Successively cycle among color themes.
The themes used for cycling are those in option `doremi-color-themes'.

You can use `C-g' to quit and cancel changes made so far.
Alternatively, after using `doremi-color-themes+' you can use
`color-theme-select' and choose pseudo-theme `[Reset]' - that does the
same thing.  Note that in either case, some things might not be
restored.

Option `doremi-themes-update-flag' determines whether the updated
value of `doremi-color-themes' is saved.  A prefix arg to this command
flips the option value for the current invocation of the command.

To use this command, you must have loaded library `color-theme.el',
available from http://www.nongnu.org/color-theme.  See also:
https://www.emacswiki.org/emacs/ColorTheme."
  (interactive "P")
  (unless (prog1 (require 'color-theme nil t)
            (when (and (fboundp 'color-theme-initialize)
                       (not color-theme-initialized))
              (condition-case nil
                  (let ((color-theme-load-all-themes  t))
                    (color-theme-initialize)
                    (setq color-theme-initialized  t))
                (error nil))))
    (error "This command requires library `color-theme.el'"))
  (unless doremi-color-themes
    (setq doremi-color-themes  (delq 'bury-buffer (mapcar 'car color-themes))))
  ;; Create the snapshot, if not available.  Do this so users can undo using
  ;; pseudo-theme `[Reset]'.
  (when (or (not (assq 'color-theme-snapshot color-themes))
            (not (commandp 'color-theme-snapshot)))
    (fset 'color-theme-snapshot (color-theme-make-snapshot))
    (setq color-themes  (delq (assq 'color-theme-snapshot color-themes)
                              color-themes)
          color-themes  (delq (assq 'bury-buffer color-themes) color-themes)
          color-themes  (append '((color-theme-snapshot
                                   "[Reset]" "Undo changes, if possible.")
                                  (bury-buffer "[Quit]" "Bury this buffer."))
                                color-themes)))
  (let ((snapshot  (if (or (assq 'color-theme-snapshot color-themes)
                           (commandp 'color-theme-snapshot))
                       (symbol-function 'color-theme-snapshot)
                     (color-theme-make-snapshot))))
    (condition-case nil
        (progn
          (doremi-color-themes-1)
          (when (or (and flip        (not doremi-themes-update-flag))
                    (and (not flip)  doremi-themes-update-flag))
            (customize-save-variable 'doremi-color-themes
                                     doremi-color-themes)))
      (quit (funcall snapshot)))))

(defun doremi-color-themes-1 ()
  "Helper function for `doremi-color-themes+'."
  (doremi (lambda (newval) (funcall newval) newval) ; update fn - just call theme
          (car (last doremi-color-themes)) ; start with last theme
          nil                           ; ignored
          nil                           ; ignored
          doremi-color-themes))         ; themes to cycle through

;;;###autoload
(defun doremi-bookmarks+ ()
  "Successively cycle among all bookmarks."
  (interactive)
  (doremi (lambda (newval) (bookmark-jump newval) newval)
          (or (and (boundp 'bookmark-current-bookmark)
                   bookmark-current-bookmark)
              (bookmark-buffer-name))
          nil                           ; ignored
          nil                           ; ignored
          (bookmark-all-names)
          t))

;;;###autoload
(defun doremi-buffers+ ()
  "Successively cycle among all existing buffers.
You can use `C-g' to quit and return to the original buffer."
  (interactive)
  (let ((curr-buff  (current-buffer)))
    (condition-case nil
        (doremi-buffers-1)
      (quit (doremi--pop-to-buffer-same-window curr-buff)))))

(defun doremi-buffers-1 ()
  "Helper-function for `doremi-buffers+'."
  (doremi (lambda (newval)
            (doremi--pop-to-buffer-same-window newval 'norecord) newval)
          (current-buffer)
          nil                           ; ignored
          nil                           ; ignored
          (buffer-list)))

;;;###autoload
(defun doremi-marks+ ()
  "Successively cycle among all marks in the `mark-ring'.
You can use `C-g' to quit and return to the original position.
If library `crosshairs.el' is used, highlight each visited mark
position temporarily."
  (interactive)
  (unless mark-ring (error "No marks in this buffer"))
  (unwind-protect
       (let ((curr-pos  (point-marker)))
         (condition-case nil
             (doremi-marks-1)
           (quit (goto-char curr-pos))))
    (when (fboundp 'crosshairs-unhighlight)
      (crosshairs-unhighlight 'even-if-frame-switch))))

(defun doremi-marks-1 ()
  "Helper function for `doremi-marks+'."
  (doremi (lambda (newval)
            (set-mark-command t)
            (when (fboundp 'crosshairs-unhighlight)
              (when (fboundp 'crosshairs-highlight) (crosshairs-highlight)))
            newval)
          (car mark-ring)
          nil                           ; ignored
          nil                           ; ignored
          mark-ring))

;;;###autoload
(defun doremi-global-marks+ ()
  "Successively cycle among all marks in the `global-mark-ring'.
You can use `C-g' to quit and return to the original position.
If library `crosshairs.el' is used, highlight each visited mark
position temporarily."
  (interactive)
  (unless global-mark-ring (error "No global marks"))
  (unwind-protect
       (let ((curr-pos  (point-marker)))
         (condition-case nil
             (doremi-global-marks-1)
           (quit (doremi--pop-to-buffer-same-window (marker-buffer curr-pos))
                 (goto-char curr-pos))))
    (when (fboundp 'crosshairs-unhighlight)
      (crosshairs-unhighlight 'even-if-frame-switch))))

(defun doremi-global-marks-1 ()
  "Helper function for `doremi-global-marks+'."
  (doremi (lambda (newval)
            (pop-global-mark)
            (when (fboundp 'crosshairs-unhighlight)
              (when (fboundp 'crosshairs-highlight) (crosshairs-highlight)))
            newval)
          (car (last global-mark-ring))
          nil                           ; ignored
          nil                           ; ignored
          global-mark-ring))

;; $$$ (defalias 'window-resize+ 'doremi-window-height+)
;;;###autoload
(defun doremi-window-height+ (&optional increment window)
  "Change height of WINDOW incrementally.
INCREMENT is the size increment.
WINDOW is selected.  WINDOW defaults to the selected window."
  (interactive "p")
  (select-window (or window (selected-window)))
  (doremi (lambda (incr) (shrink-window incr) (window-height))
          (window-height) (- increment) t)
  (when (member (car unread-command-events)
                '(left right M-left M-right))
    (doremi-window-width+ increment window)))

;; $$$ (defalias 'window-resize-horizontally+ 'doremi-window-width+)
;;;###autoload
(defun doremi-window-width+ (&optional increment window)
  "Change width of WINDOW incrementally.
INCREMENT is the size increment.
WINDOW is selected.  WINDOW defaults to the selected window."
  (interactive "p")
  (select-window (or window (selected-window)))
  (let ((doremi-up-keys         '(left))
        (doremi-boost-up-keys   '(M-left))
        (doremi-down-keys       '(right))
        (doremi-boost-down-keys '(M-right)))
    (doremi (lambda (incr) (shrink-window-horizontally incr)
                    (window-width))
            (window-width) nil t))
  (when (member (car unread-command-events)
                (append doremi-up-keys   doremi-boost-up-keys
                        doremi-down-keys doremi-boost-down-keys))
    (doremi-window-height+ increment window)))

(when (fboundp 'window-list)            ; Emacs 22+
  (defun doremi-windows+ ()
    "Use up and down arrow keys to cycle among windows of selected frame.
    You can use `C-g' to quit and return to the originally selected window."
    (interactive)
    (let ((sel-win  (selected-window)))
      (condition-case nil
          (doremi-windows-1)
        (quit (select-window sel-win)))))

  (defun doremi-windows-1 ()
    "Helper-function for `doremi-windows+'."
    (doremi (lambda (newval) (select-window newval 'norecord) newval)
            (selected-window)
            nil
            nil
            (reverse (window-list)))))

(if (fboundp 'pop-to-buffer-same-window)
    (defalias 'doremi--pop-to-buffer-same-window 'pop-to-buffer-same-window)
  (defalias 'doremi--pop-to-buffer-same-window 'switch-to-buffer))

;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'doremi-cmd)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; doremi-cmd.el ends here
#+end_src

** doremi-mac.el

#+call: hash() :exports none

#+RESULTS:
: 20210601222919591278100

#+name: 20210601222919591278100
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; doremi-mac.el --- A macro for defining Do Re Mi commands.
;;
;; Filename: doremi-mac.el
;; Description: A macro for defining Do Re Mi commands.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 2004-2018, Drew Adams, all rights reserved.
;; Created: Tue Sep 14 16:45:30 2004
;; Version: 0
;; Package-Requires: ()
;; Last-Updated: Mon Jan  1 10:58:55 2018 (-0800)
;;           By: dradams
;;     Update #: 225
;; URL: https://www.emacswiki.org/emacs/download/doremi-mac.el
;; Doc URL: https://www.emacswiki.org/emacs/DoReMi
;; Keywords: extensions, convenience, keys, repeat, cycle
;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   None
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;  A macro for defining Do Re Mi commands.
;;
;;  Defines a Do Re Mi command and adds it to a `Do Re Mi' menu-bar
;;  menu.  See library `doremi.el'.
;;
;;
;;; User options defined here:
;;
;;    `define-doremi-after-hook', `define-doremi-before-hook'.
;;
;;  Macro defined here:
;;
;;    `define-doremi'.
;;
;;
;;  Add this to your initialization file (~/.emacs or ~/_emacs):
;;
;;    (autoload 'define-doremi "doremi-mac"
;;      "Define a Do Re Mi command." nil 'macro)
;;
;;
;;  See also these other Do Re Mi libraries:
;;
;;    `doremi-frm.el' - Incrementally adjust frame properties.
;;    `doremi-cmd.el' - Other Do Re Mi commands.
;;
;;
;;  Example test commands defined using the macro.
;;
;;  1. Command `doremi-frame-height+' sets the frame height.
;;
;;     (define-doremi frame-height+
;;       "Set frame height, changing it incrementally."   ; Doc string
;;       "Set Frame Height"                        ; Command menu name
;;       (lambda (new-val)                         ; Setter function
;;         (set-frame-height (selected-frame) new-val) new-val)
;;       (frame-height (selected-frame)))          ; Initial value
;;
;;  2. Command `doremi-set-bg+' cycles through
;;     (x-defined-colors), setting the background color.
;;
;;     (define-doremi set-bg+
;;       ;; Doc string
;;       "Set background color, choosing from a list of all colors."
;;       "Set Background Color"                    ; Command menu name
;;       ;; Setter function
;;       (lambda (newval) (set-background-color newval) newval)
;;       ;; Initial value
;;       (frame-parameter (selected-frame) 'background-color)
;;       nil                                       ; Ignored
;;       (x-defined-colors)                        ; Cycle enumeration
;;       t)    ; Add current color to enumeration if not there already
;;
;;     Command `doremi-set-bg+' runs this hook after running `doremi':
;; (setq define-doremi-after-hook
;;       ;; Update the way faces display with new bg.
;;       (lambda () (frame-set-background-mode (selected-frame))))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2006/01/06 dadams
;;     Corrected :group.
;; 2004/09/26 dadams
;;     Renamed do-re-mi* to doremi*.
;;     Prefixed everything here with doremi-.
;;     Wrapped eval-and-compile around menu definition.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
;;; User Options (Variables)

;;;###autoload
(defcustom define-doremi-before-hook nil
  "*Normal hook (list of functions) run before `doremi' is run.
See `run-hooks'."
  :type 'hook :group 'doremi)

;;;###autoload
(defcustom define-doremi-after-hook nil
  "*Normal hook (list of functions) run after `doremi' is run.
See `run-hooks'."
  :type 'hook :group 'doremi)
 
;;; Internal Variables

;; Define menu if not already defined.
(eval-and-compile
  (unless (boundp 'menu-bar-doremi-menu)
    (defvar menu-bar-doremi-menu (make-sparse-keymap "Do Re Mi"))
    (define-key global-map [menu-bar doremi]
      (cons "Do Re Mi" menu-bar-doremi-menu))))
 
;;; Macros

;;;###autoload
(defmacro define-doremi (cmd-name doc-string cmd-menu-name setter-fn init-val
                                  &optional grow-fn-p enum allow-new-p)
  "Define a Do Re Mi command.
CMD-NAME is the name of the command, to be prefixed by `doremi-'.
DOC-STRING is the documentation string for the new command.
CMD-MENU-NAME is the menu name for the command (a string).

The other arguments are as for command `doremi', except that the
`doremi' increment argument is not an argument to
`define-doremi'. The new command has a single, optional argument,
INCREMENT, provided interactively by the prefix argument."
  `(progn
     (defun ,(intern (concat "doremi-" (if (stringp cmd-name)
                                             cmd-name
                                           (symbol-name cmd-name))))
       (&optional increment)
       ,(concat doc-string "\nSee `doremi' for INCREMENT.")
       (interactive "p")
       (run-hooks 'define-doremi-before-hook)
       (doremi ,setter-fn ,init-val increment ,grow-fn-p ,enum ,allow-new-p)
       (run-hooks 'define-doremi-after-hook))
     (let ((cmd ',(intern (concat "doremi-" (if (stringp cmd-name)
                                                 cmd-name
                                               (symbol-name cmd-name))))))
       (define-key menu-bar-doremi-menu
         (make-vector 1 cmd)
         (cons ,cmd-menu-name cmd)))))
 
;;; Example Test Functions

;; (define-doremi frame-height+
;;   "Set frame height, changing it incrementally."         ; doc string
;;   "Set Frame Height"                                     ; command menu name
;;   (lambda (new-val)                                      ; setter function
;;     (set-frame-height (selected-frame) new-val) new-val)
;;   (frame-height (selected-frame)))                       ; initial value

;; (define-doremi set-bg+
;;   "Set background color, choosing from a list of all colors." ; doc string
;;   "Set Background Color"                                      ; command menu name
;;   (lambda (newval) (set-background-color newval) newval)      ; setter function
;;   (frame-parameter (selected-frame) 'background-color)        ; initial value
;;   nil                                                         ; ignored
;;   (x-defined-colors)                                          ; cycle enumeration
;;   t)                                                          ; add current color

;; ;; New command `doremi-set-bg+' runs this hook after running `doremi':
;; (setq define-doremi-after-hook
;;       (lambda () (frame-set-background-mode (selected-frame))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'doremi-mac)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; doremi-mac.el ends here
#+end_src

** ring+.el

#+call: hash() :exports none

#+RESULTS:
: 20210601222921699965800

#+name: 20210601222921699965800
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; ring+.el --- Extensions to `ring.el'.
;;
;; Filename: ring+.el
;; Description: Extensions to `ring.el'.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 1996-2018, Drew Adams, all rights reserved.
;; Created: Thu Apr 11 16:46:04 1996
;; Version: 0
;; Last-Updated: Mon Jan  1 15:33:44 2018 (-0800)
;;           By: dradams
;;     Update #: 233
;; URL: https://www.emacswiki.org/emacs/download/ring%2b.el
;; Doc URL: https://emacswiki.org/emacs/RingPlus
;; Keywords: extensions, lisp, emacs-lisp
;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x
;;
;; Features that might be required by this library:
;;
;;   `ring'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;    Extensions to `ring.el'.
;;
;;  The code in this library is part of GNU Emacs 23 and later, so
;;  this library is useful only for releases prior to Emacs 23.
;;
;;  Main new functions here:
;;
;;    `ring-convert-sequence-to-ring', `ring-insert+extend',
;;    `ring-remove+insert+extend', `ring-member', `ring-next',
;;    `ring-previous'.
;;
;;
;;  This file should be loaded after loading the standard GNU file
;;  `ring.el'.  So, in your `~/.emacs' file, do this:
;;  (eval-after-load "ring" '(progn (require 'ring+))
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2011/01/04 dadams
;;     Removed autoload cookies (non-interactive commands).
;; 2004/09/26 dadams
;;     Renamed convert-sequence-to-ring to ring-convert-sequence-to-ring
;; 2004/09/08 dadams
;;     Reversed argument order: ring-member, ring-next, ring-previous.
;; 2004/09/04 dadams
;;     Added: convert-sequence-to-ring, ring-insert+extend.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(require 'ring) ;; ring-length, ring-ref, ring-remove, ring-insert

;;;;;;;;;;;;;;;;;

(defun ring-member (ring item)
  "Return index of ITEM if on RING, else nil.
Comparison is done via `equal'.  The index is 0-based."
  (catch 'found
    (dotimes (ind (ring-length ring) nil)
      (when (equal item (ring-ref ring ind))
        (throw 'found ind)))))

(defun ring-next (ring item)
  "Return the next item in the RING, after ITEM.
Raise error if ITEM is not in the RING."
  (let ((curr-index (ring-member ring item)))
    (unless curr-index (error "Item is not in the ring: `%s'" item))
    (ring-ref ring (ring-plus1 curr-index (ring-length ring)))))

(defun ring-previous (ring item)
  "Return the previous item in the RING, before ITEM.
Raise error if ITEM is not in the RING."
  (let ((curr-index (ring-member ring item)))
    (unless curr-index (error "Item is not in the ring: `%s'" item))
    (ring-ref ring (ring-minus1 curr-index (ring-length ring)))))


(defun ring-insert+extend (ring item &optional grow-p)
  "Like ring-insert, but if GROW-P is non-nil, then enlarge ring.
Insert onto ring RING the item ITEM, as the newest (last) item.
If the ring is full, behavior depends on GROW-P:
  If GROW-P is non-nil, enlarge the ring to accommodate the new item.
  If GROW-P is nil, dump the oldest item to make room for the new."
  (let* ((vec (cdr (cdr ring)))
         (veclen (length vec))
         (hd (car ring))
         (ringlen (ring-length ring)))
    (prog1
        (cond ((and grow-p (= ringlen veclen)) ; Full ring.  Enlarge it.
               (setq veclen (1+ veclen))
               (setcdr ring (cons (setq ringlen (1+ ringlen))
                                  (setq vec (vconcat vec (vector item)))))
               (setcar ring hd))
              (t (aset vec (mod (+ hd ringlen) veclen) item)))
      (if (= ringlen veclen)
          (setcar ring (ring-plus1 hd veclen))
        (setcar (cdr ring) (1+ ringlen))))))

(defun ring-remove+insert+extend (ring item &optional grow-p)
  "`ring-remove' ITEM from RING, then `ring-insert+extend' it.
This ensures that there is only one ITEM on RING.

If the RING is full, behavior depends on GROW-P:
  If GROW-P is non-nil, enlarge the ring to accommodate the new ITEM.
  If GROW-P is nil, dump the oldest item to make room for the new."
  (let (ind)
    (while (setq ind (ring-member ring item)) (ring-remove ring ind)))
  (ring-insert+extend ring item grow-p))

(defun ring-convert-sequence-to-ring (seq)
  "Convert sequence SEQ to a ring.  Return the ring.
If SEQ is already a ring, return it."
  (if (ring-p seq)
      seq
    (let* ((size (length seq))
           (ring (make-ring size))
           (count 0))
      (while (< count size)
        (if (or (ring-empty-p ring)
                (not (equal (ring-ref ring 0) (elt seq count))))
            (ring-insert-at-beginning ring (elt seq count)))
        (setq count (1+ count)))
      ring)))

;;;;;;;;;;;;;;;;;;;;;;;

(provide 'ring+)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ring+.el ends here
#+end_src

** hexrgb.el

#+call: hash() :exports none

#+RESULTS:
: 20210601222923703645700

#+name: 20210601222923703645700
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; hexrgb.el --- Functions to manipulate colors, including RGB hex strings.
;;
;; Filename: hexrgb.el
;; Description: Functions to manipulate colors, including RGB hex strings.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 2004-2018, Drew Adams, all rights reserved.
;; Created: Mon Sep 20 22:58:45 2004
;; Version: 0
;; Package-Requires: ()
;; Last-Updated: Mon Jan  1 13:31:58 2018 (-0800)
;;           By: dradams
;;     Update #: 1019
;; URL: https://www.emacswiki.org/emacs/download/hexrgb.el
;; Doc URL: https://www.emacswiki.org/emacs/SetColor
;; Doc URL: https://emacswiki.org/emacs/ColorPalette
;; Keywords: number, hex, rgb, color, background, frames, display
;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   None
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;  Functions to manipulate colors, including RGB hex strings.
;;
;;  This library provides functions for converting between RGB (red,
;;  green, blue) color components and HSV (hue, saturation, value)
;;  color components.  It helps you convert among Emacs color
;;  components (whole numbers from 0 through 65535), RGB and HSV
;;  floating-point components (0.0 through 1.0), Emacs color-name
;;  strings (such as "blue"), and hex RGB color strings (such as
;;  "#FC43A7912").
;;
;;  An RGB hex string, such as used as a frame `background-color'
;;  property, is a string of 1 + (3 * n) characters, the first of
;;  which is "#".  The other characters are hexadecimal digits, in
;;  three groups representing (from the left): red, green, and blue
;;  hex codes.
;;
;;  Constants defined here:
;;
;;    `hexrgb-defined-colors', `hexrgb-defined-colors-alist',
;;    `hexrgb-defined-colors-no-dups',
;;    `hexrgb-defined-colors-no-dups-alist'.
;;
;;  Options defined here:
;;
;;    `hexrgb-canonicalize-defined-colors-flag'.
;;
;;  Commands defined here:
;;
;;    `hexrgb-blue', `hexrgb-complement', `hexrgb-green',
;;    `hexrgb-hue', `hexrgb-hue-complement', `hexrgb-read-color',
;;    `hexrgb-red', `hexrgb-saturation',
;;    `hexrgb-saturation-complement', `hexrgb-value',
;;    `hexrgb-value-complement'.
;;
;;  Non-interactive functions defined here:
;;
;;    `hexrgb-approx-equal', `hexrgb-canonicalize-defined-colors',
;;    `hexrgb-color-name-to-hex', `hexrgb-color-values-to-hex',
;;    `hexrgb-color-value-to-float', `hexrgb-defined-colors',
;;    `hexrgb-defined-colors-alist',
;;    `hexrgb-delete-whitespace-from-string',
;;    `hexrgb-float-to-color-value', `hexrgb-hex-char-to-integer',
;;    `hexrgb-hex-to-color-values', `hexrgb-hex-to-hex',
;;    `hexrgb-hex-to-hsv', `hexrgb-hex-to-rgb', `hexrgb-hsv-to-hex',
;;    `hexrgb-hex-to-int', `hexrgb-hsv-to-rgb',
;;    `hexrgb-increment-blue', `hexrgb-increment-equal-rgb',
;;    `hexrgb-increment-green', `hexrgb-increment-hex',
;;    `hexrgb-increment-hue', `hexrgb-increment-red',
;;    `hexrgb-increment-saturation', `hexrgb-increment-value',
;;    `hexrgb-int-to-hex', `hexrgb-blue-hex', `hexrgb-green-hex',
;;    `hexrgb-red-hex', `hexrgb-rgb-hex-string-p',
;;    `hexrgb-rgb-hex-to-rgb-hex', `hexrgb-rgb-to-hex',
;;    `hexrgb-rgb-to-hsv'.
;;
;;
;;  Add this to your initialization file (~/.emacs or ~/_emacs):
;;
;;    (require 'hexrgb)
;;
;;  Do not try to use this library without a window manager.
;;  That is, do not use this with `emacs -nw'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2016/12/22 dadams
;;     Added: hexrgb-hue-complement, hexrgb-saturation-complement, hexrgb-value-complement.
;; 2015/07/08 dadams
;;     hexrgb-color-name-to-hex, hexrgb-increment-(hue|saturation|value):
;;       Raise error if x-color-values returns nil (probably from "unspecified-[bf]g").
;;     hexrgb-color-values-to-hex: Raise error if COMPONENTS is nil.
;; 2015/02/26 dadams
;;     hexrgb-hex-to-rgb: Do not use 65535.0 - use (16 ** len) -1 instead.
;; 2014/08/17 dadams
;;     hexrgb-read-color: Bind icicle-color-completing.
;; 2013/01/18 dadams
;;     Added: hexrgb-increment-(hue|saturation|value): Moved them here and renamed from
;;       icicle-increment-color-*.  Changed range to 0-1 and added optional arg NB-DIGITS.
;; 2012/12/16 dadams
;;     hexrgb-(hsv|rgb|color-name|color-values)-to-hex: Added optional arg NB-DIGITS.
;; 2012/03/17 dadams
;;     Added: hexrgb-(red|green|blue-hex, hexrgb-rgb-hex-to-rgb-hex, hexrgb-hex-to-hex.
;; 2012/01/05 dadams
;;     hexrgb-complement: Added optional arg MSG-P.
;;     Some doc-string cleanup.
;; 2011/11/26 dadams
;;     hexrgb-read-color: Changed arg order to match vanilla Emacs read-color.  Added MSGP.
;;     *** THIS IS AN INCOMPATIBLE CHANGE.  IF YOU USE THIS FUNCTION THEN UPDATE YOUR CODE. ***
;; 2011/02/16 dadams
;;     hexrgb-increment-hex: INCOMPATIBLE CHANGE:
;;                           Swapped order of args NB-DIGITS, INCREMENT, to fit other functions.
;;     hexrgb-increment-*: Took the change to hexrgb-increment-hex into account.
;;     Improved various doc strings.
;; 2011/01/08 dadams
;;     Restored autoload cookie for eval-and-compile hexrgb-canonicalize-defined-colors.
;; 2011/01/03 dadams
;;     Removed autoload cookies from non-interactive functions.
;; 2010/12/18 dadams
;;     hexrgb-canonicalize-defined-colors: Added autoload cookie.  Thx to Richard Kim.
;; 2010/12/06 dadams
;;     hexrgb-hex-to-color-values: Correct start offset for blue.  Thx to "Linda" on Emacs Wiki.
;; 2009/11/14 dadams
;;    hexrgb-rgb-to-hsv: Corrected hue when > 1.0.  Use strict inequality for hue limit tests.
;;    hexrgb-approx-equal: Convert RFUZZ and AFUZZ to their absolute values.
;; 2009/11/03 dadams
;;    Added: hexrgb-delete-whitespace-from-string, hexrgb-canonicalize-defined-colors,
;;           hexrgb-defined-colors(-no-dups)(-alist), hexrgb-canonicalize-defined-colors-flag.
;;    hexrgb-read-color: Use function hexrgb-defined-colors-alist, not the constant.
;; 2008/12/25 dadams
;;    hexrgb-rgb-to-hsv:
;;      Replace (not (equal 0.0e+NaN saturation)) by standard test (= saturation saturation).
;;      Thx to  Michael Heerdegen for the bug report.
;; 2008-10-17 dadams
;;    hexrgb-defined-colors(-alist): Prevent load-time error if user tries to use emacs -nw.
;; 2007/12/30 dadams
;;    Added: hexrgb-hex-to-color-values.
;; 2007/10/20 dadams
;;    hexrgb-read-color: Treat pseudo colors too (e.g. *point foreground*).
;; 2007/01/21 dadams
;;    hexrgb-read-color: Error if empty string (and not allow-empty-name-p).
;; 2006/06/06 dadams
;;    Added: hexrgb-defined-colors(-alist).  Use instead of (x-defined-colors).
;;    hexrgb-(red|green|blue): Added interactive specs.
;; 2006/06/04 dadams
;;    hexrgb-read-color: Added optional arg allow-empty-name-p.
;; 2006/06/02 dadams
;;    Added: hexrgb-rgb-hex-string-p.  Used it.
;; 2006/05/30 dadams
;;    Added: hexrgb-hex-to-(hsv|rgb), hexrgb-hsv-to-hex, hexrgb-color-name-to-hex,
;;           hexrgb-complement, hexrgb-read-color, hexrgb-hue, hexrgb-saturation,
;;           hexrgb-value, hexrgb-red, hexrgb-blue, hexrgb-green.
;;    approx-equal: Add optional fuzz factor arguments.  Changed the algorithm.
;;    Renamed: approx-equal to hexrgb-approx-equal.
;;    hexrgb-rgb-to-hsv: Changed test from < to <=: (when (<= hue 0.0)...).
;;    hexrgb-hsv-to-rgb: Treat hue = 0.0 (int 0) the same as hue = 1.0 (int 6).
;;    hexrgb-rgb-to-hex, hexrgb-increment-hex: Corrected doc strings.
;; 2006/05/22 dadams
;;    Added: hexrgb-hsv-to-hex, hexrgb-rgb-to-hex.  Require cl.el when byte-compile.
;; 2005/08/09 dadams
;;    hexrgb-rgb-to-hsv: Side-stepped Emacs-20 bug in comparing NaN.
;;    hexrgb-increment-*: Added optional arg wrap-p.
;;    hexrgb-increment-hex: Prevent wrap if not wrap-p.
;; 2005/08/02 dadams
;;    hexrgb-rgb-to-hes: Bug fix: If delta is zero, then so are hue and saturation.
;; 2005/06/24 dadams
;;    hexrgb-rgb-to-hsv: Bug fix: test for NaN (e.g. on divide by zero).
;; 2005/02/08 dadams
;;    hexrgb-hsv-to-rgb: Bug fix (typo: p, q -> pp, qq; added ww).
;; 2005/01/09 dadams
;;    hexrgb-int-to-hex: Fixed bug in hexrgb-int-to-hex: nb-digits not respected.
;;    Added: hexrgb-hsv-to-rgb, hexrgb-rgb-to-hsv, approx-equal.
;;    Renamed old hexrgb-increment-value to hexrgb-increment-equal-rgb.
;; 2005/01/05 dadams
;;    hexrgb-int-to-hex: Used a suggestion from Juri Linkov.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(eval-when-compile (require 'cl-lib)) ;; case

;; Unless you first load `hexrgb.el', then either `palette.el' or `eyedropper.el', you will get
;; warnings about variables and functions with prefix `eyedrop-' when you byte-compile
;; `hexrgb.el'.  You can ignore these warnings.

(defvar eyedrop-picked-foreground)
(defvar eyedrop-picked-background)

;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;###autoload
(eval-and-compile
 (defun hexrgb-canonicalize-defined-colors (list)
   "Copy of LIST with color names canonicalized.
LIST is a list of color names (strings).
Canonical names are lowercase, with no whitespace.
There are no duplicate names."
   (let ((tail  list)
         this new)
     (while tail
       (setq this  (car tail)
             this  (hexrgb-delete-whitespace-from-string (downcase this) 0 (length this)))
       (unless (member this new) (push this new))
       (pop tail))
     (nreverse new)))

 (defun hexrgb-delete-whitespace-from-string (string &optional from to)
   "Remove whitespace from substring of STRING from FROM to TO.
If FROM is nil, then start at the beginning of STRING (FROM = 0).
If TO is nil, then end at the end of STRING (TO = length of STRING).
FROM and TO are zero-based indexes into STRING.
Character FROM is affected (possibly deleted).  Character TO is not."
   (setq from  (or from 0)
         to    (or to (length string)))
   (with-temp-buffer
     (insert string)
     (goto-char (+ from (point-min)))
     (let ((count  from)
           char)
       (while (and (not (eobp))  (< count to))
         (setq char  (char-after))
         (if (memq char '(?\  ?\t ?\n))  (delete-char 1)  (forward-char 1))
         (setq count  (1+ count)))
       (buffer-string)))))

;;;###autoload
(defconst hexrgb-defined-colors (eval-when-compile (and window-system (x-defined-colors)))
  "List of all supported colors.")

;;;###autoload
(defconst hexrgb-defined-colors-no-dups
    (eval-when-compile
     (and window-system (hexrgb-canonicalize-defined-colors (x-defined-colors))))
  "List of all supported color names, with no duplicates.
Names are all lowercase, without any spaces.")

;;;###autoload
(defconst hexrgb-defined-colors-alist
    (eval-when-compile (and window-system (mapcar #'list (x-defined-colors))))
  "Alist of all supported color names, for use in completion.
See also `hexrgb-defined-colors-no-dups-alist', which is the same
thing, but without any duplicates, such as \"light blue\" and
\"LightBlue\".")

;;;###autoload
(defconst hexrgb-defined-colors-no-dups-alist
    (eval-when-compile
     (and window-system
          (mapcar #'list (hexrgb-canonicalize-defined-colors (x-defined-colors)))))
  "Alist of all supported color names, with no duplicates, for completion.
Names are all lowercase, without any spaces.")

;;;###autoload
(defcustom hexrgb-canonicalize-defined-colors-flag t
  "*Non-nil means remove duplicate color names.
Names are considered duplicates if they are the same when abstracting
from whitespace and letter case."
  :type 'boolean
  :group 'Icicles :group 'doremi-frame-commands :group 'faces :group 'convenience)

;; You should use these two functions, not the constants, so users can change
;; the behavior by customizing `hexrgb-canonicalize-defined-colors-flag'.

(defun hexrgb-defined-colors ()
  "List of supported color names.
If `hexrgb-canonicalize-defined-colors-flag' is non-nil, then names
are lowercased, whitespace is removed, and there are no duplicates."
  (if hexrgb-canonicalize-defined-colors-flag
      hexrgb-defined-colors-no-dups
    hexrgb-defined-colors))

(defun hexrgb-defined-colors-alist ()
  "Alist of supported color names.  Usable for completion.
If `hexrgb-canonicalize-defined-colors-flag' is non-nil, then names
are lowercased, whitespace is removed, and there are no duplicates."
  (if hexrgb-canonicalize-defined-colors-flag
      hexrgb-defined-colors-no-dups-alist
    hexrgb-defined-colors-alist))

;; RMS added this function to Emacs (23) as `read-color', with some feature loss.
;;;###autoload
(defun hexrgb-read-color (&optional prompt convert-to-RGB-p allow-empty-name-p msgp)
  "Read a color name or hex RGB hexadecimal color value #RRRRGGGGBBBB.
Completion is available for color names, but not for RGB hex strings.
If you input an RGB hex string, it must have the form #XXXXXXXXXXXX or
XXXXXXXXXXXX, where each X is a hex digit.  The number of Xs must be a
multiple of 3, with the same number of Xs for each of red, green, and
blue.  The order is red, green, blue.

Color names that are normally considered equivalent are canonicalized:
They are lowercased, whitespace is removed, and duplicates are
eliminated.  E.g. \"LightBlue\" and \"light blue\" are both replaced
by \"lightblue\".  If you do not want this behavior, but want to
choose names that might contain whitespace or uppercase letters, then
customize option `hexrgb-canonicalize-defined-colors-flag' to nil.

In addition to standard color names and RGB hex values, the following
are available as color candidates.  In each case, the corresponding
color is used.

,* `*copied foreground*'  - last copied foreground, if available
,* `*copied background*'  - last copied background, if available
,* `*mouse-2 foreground*' - foreground where you click `mouse-2'
,* `*mouse-2 background*' - background where you click `mouse-2'
,* `*point foreground*'   - foreground under the cursor
,* `*point background*'   - background under the cursor

\(You can copy a color using eyedropper commands such as
`eyedrop-pick-foreground-at-mouse'.)

Optional arg PROMPT is the prompt - nil means use a default prompt.

Checks input to be sure it represents a valid color.  If not, raises
an error (but see exception for empty input with non-nil
ALLOW-EMPTY-NAME-P).

Interactively, or with optional arg CONVERT-TO-RGB-P non-nil, converts
an input color name to an RGB hex string.  Returns the RGB hex string.

Optional arg ALLOW-EMPTY-NAME-P controls what happens if you enter an
empty color name (that is, you just hit `RET').  If non-nil, then
`hexrgb-read-color' returns an empty color name, \"\".  If nil, then
it raises an error.  Calling programs must test for \"\" if
ALLOW-EMPTY-NAME-P is non-nil.  They can then perform an appropriate
action in case of empty input.

Interactively, or with non-nil MSGP, show color name in the echo area."
  (interactive "i\np\ni\np")            ; Always convert to RGB interactively.
  (let* ((completion-ignore-case     t)
         (icicle-color-completing-p  t)
         ;; Free variables here: `eyedrop-picked-foreground', `eyedrop-picked-background'.
         ;; They are defined in library `palette.el' or library `eyedropper.el'.
         (colors                     (if (fboundp 'eyedrop-foreground-at-point)
                                         (append (and eyedrop-picked-foreground
                                                      '(("*copied foreground*")))
                                                 (and eyedrop-picked-background
                                                      '(("*copied background*")))
                                                 '(("*mouse-2 foreground*")
                                                   ("*mouse-2 background*")
                                                   ("*point foreground*") ("*point background*"))
                                                 (hexrgb-defined-colors-alist))
                                       (hexrgb-defined-colors-alist)))
         (color                      (completing-read (or prompt "Color (name or #R+G+B+): ")
                                                      colors))
         hex-string)
    (when (fboundp 'eyedrop-foreground-at-point)
      (cond ((string= "*copied foreground*" color) (setq color  eyedrop-picked-foreground))
            ((string= "*copied background*" color) (setq color  eyedrop-picked-background))
            ((string= "*point foreground*" color)  (setq color  (eyedrop-foreground-at-point)))
            ((string= "*point background*" color)  (setq color  (eyedrop-background-at-point)))
            ((string= "*mouse-2 foreground*" color)
             (setq color  (prog1 (eyedrop-foreground-at-mouse
                                  (read-event "Click `mouse-2' to choose foreground color - "))
                            (read-event)))) ; Discard mouse up event.
            ((string= "*mouse-2 background*" color)
             (setq color  (prog1 (eyedrop-background-at-mouse
                                  (read-event "Click `mouse-2' to choose background color - "))
                            (read-event)))))) ; Discard mouse up event.
    (setq hex-string  (or (string-match "^#\\([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]\\)+$" color)
                          (and (string-match "^\\([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]\\)+$" color)
                               t)))
    (if (and allow-empty-name-p (string= "" color))
        ""
      (when (and hex-string (not (eq 0 hex-string)))
        (setq color  (concat "#" color))) ; No #; add it.
      (unless hex-string
        (when (or (string= "" color)
                  (not (if (fboundp 'test-completion) ; Not defined in Emacs 20.
                           (test-completion color colors)
                         (try-completion color colors))))
          (error "No such color: %S" color))
        (when convert-to-RGB-p (setq color  (hexrgb-color-name-to-hex color))))
      (when msgp (message "Color: `%s'" color))
      color)))

(defun hexrgb-rgb-hex-string-p (color &optional laxp)
  "Non-nil if COLOR is an RGB string #XXXXXXXXXXXX.
Each X is a hex digit.  The number of Xs must be a multiple of 3, with
the same number of Xs for each of red, green, and blue.

Non-nil optional arg LAXP means that the initial `#' is optional.  In
that case, for a valid string of hex digits: when # is present 0 is
returned; otherwise, t is returned."
  (or (string-match "^#\\([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]\\)+$" color)
      (and laxp (string-match "^\\([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]\\)+$" color) t)))

;;;###autoload
(defun hexrgb-complement (color &optional msg-p)
  "Return the color that is the complement of COLOR.
Non-interactively, non-nil optional arg MSG-P means show a message
with the complement."
  (interactive (list (hexrgb-read-color) t))
  (setq color  (hexrgb-color-name-to-hex color))
  (let ((red    (hexrgb-red color))
        (green  (hexrgb-green color))
        (blue   (hexrgb-blue color)))
    (setq color  (hexrgb-rgb-to-hex (- 1.0 red) (- 1.0 green) (- 1.0 blue))))
  (when msg-p (message "Complement: `%s'" color))
  color)

;;;###autoload
(defun hexrgb-hue-complement (color &optional msg-p)
  "Return the color that is the hue complement of COLOR.
Saturation and value are not changed from those of COLOR.

Non-interactively, non-nil optional arg MSG-P means show a message
with the complement."
  (interactive (list (hexrgb-read-color) t))
  (setq color  (hexrgb-color-name-to-hex color))
  (let* ((old-hue  (hexrgb-hue color))
         (new-hue  (+ 0.5 old-hue))
         (sat      (hexrgb-saturation color))
         (val      (hexrgb-value color)))
    (when (> new-hue 1.0) (setq new-hue  (1- new-hue)))
    (setq color  (hexrgb-hsv-to-hex new-hue sat val)))
  (when msg-p (message "Hue complement: `%s'" color))
  color)

;;;###autoload
(defun hexrgb-saturation-complement (color &optional msg-p)
  "Return the color that is the saturation complement of COLOR.
Hue and value are not changed from those of COLOR.

Non-interactively, non-nil optional arg MSG-P means show a message
with the complement."
  (interactive (list (hexrgb-read-color) t))
  (setq color  (hexrgb-color-name-to-hex color))
  (let* ((hue      (hexrgb-hue color))
         (old-sat  (hexrgb-saturation color))
         (new-sat  (+ 0.5 old-sat))
         (val      (hexrgb-value color)))
    (when (> new-sat 1.0) (setq new-sat  (1- new-sat)))
    (setq color  (hexrgb-hsv-to-hex hue new-sat val)))
  (when msg-p (message "Saturation complement: `%s'" color))
  color)

;;;###autoload
(defun hexrgb-value-complement (color &optional msg-p)
  "Return the color that is the value complement of COLOR.
Hue and saturation are not changed from those of COLOR.

Non-interactively, non-nil optional arg MSG-P means show a message
with the complement."
  (interactive (list (hexrgb-read-color) t))
  (setq color  (hexrgb-color-name-to-hex color))
  (let* ((hue      (hexrgb-hue color))
         (sat      (hexrgb-saturation color))
         (old-val  (hexrgb-value color))
         (new-val  (+ 0.5 old-val)))
    (when (> new-val 1.0) (setq new-val  (1- new-val)))
    (setq color  (hexrgb-hsv-to-hex hue sat new-val)))
  (when msg-p (message "Value complement: `%s'" color))
  color)

;;;###autoload
(defun hexrgb-hue (color)
  "Return the hue component of COLOR, in range 0 to 1 inclusive.
COLOR is a color name or hex RGB string that starts with \"#\"."
  (interactive (list (hexrgb-read-color)))
  (setq color  (hexrgb-color-name-to-hex color))
  (car (hexrgb-rgb-to-hsv (hexrgb-red color) (hexrgb-green color) (hexrgb-blue color))))

;;;###autoload
(defun hexrgb-saturation (color)
  "Return the saturation component of COLOR, in range 0 to 1 inclusive.
COLOR is a color name or hex RGB string that starts with \"#\"."
  (interactive (list (hexrgb-read-color)))
  (setq color  (hexrgb-color-name-to-hex color))
  (cadr (hexrgb-rgb-to-hsv (hexrgb-red color) (hexrgb-green color) (hexrgb-blue color))))

;;;###autoload
(defun hexrgb-value (color)
  "Return the value component of COLOR, in range 0 to 1 inclusive.
COLOR is a color name or hex RGB string that starts with \"#\"."
  (interactive (list (hexrgb-read-color)))
  (setq color  (hexrgb-color-name-to-hex color))
  (caddr (hexrgb-rgb-to-hsv (hexrgb-red color) (hexrgb-green color) (hexrgb-blue color))))

;;;###autoload
(defun hexrgb-red (color)
  "Return the red component of COLOR, in range 0 to 1 inclusive.
COLOR is a color name or hex RGB string that starts with \"#\"."
  (interactive (list (hexrgb-read-color)))
  (setq color  (hexrgb-color-name-to-hex color))
  (/ (hexrgb-hex-to-int (substring color 1 (1+ (/ (1- (length color)) 3))))
     (expt 16.0 (/ (1- (length color)) 3.0))))

;;;###autoload
(defun hexrgb-green (color)
  "Return the green component of COLOR, in range 0 to 1 inclusive.
COLOR is a color name or hex RGB string that starts with \"#\"."
  (interactive (list (hexrgb-read-color)))
  (setq color  (hexrgb-color-name-to-hex color))
  (let* ((len    (/ (1- (length color)) 3))
         (start  (1+ len)))
    (/ (hexrgb-hex-to-int (substring color start (+ start len)))
       (expt 16.0 (/ (1- (length color)) 3.0)))))

;;;###autoload
(defun hexrgb-blue (color)
  "Return the blue component of COLOR, in range 0 to 1 inclusive.
COLOR is a color name or hex RGB string that starts with \"#\"."
  (interactive (list (hexrgb-read-color)))
  (setq color  (hexrgb-color-name-to-hex color))
  (let* ((len    (/ (1- (length color)) 3))
         (start  (+ 1 len len)))
    (/ (hexrgb-hex-to-int (substring color start (+ start len)))
       (expt 16.0 (/ (1- (length color)) 3.0)))))

(defun hexrgb-rgb-to-hsv (red green blue)
  "Convert RED, GREEN, BLUE components to HSV (hue, saturation, value).
Each input component is 0.0 to 1.0, inclusive.
Returns a list of HSV components of value 0.0 to 1.0, inclusive."
  (let* ((min    (min red green blue))
         (max    (max red green blue))
         (value  max)
         (delta  (- max min))
         hue saturation)
    (if (hexrgb-approx-equal 0.0 delta)
        (setq hue         0.0
              saturation  0.0)          ; Gray scale - no color; only value.
      (if (and (condition-case nil
                   (setq saturation  (/ delta max))
                 (arith-error nil))
               ;; Must be a number, not a NaN.  The standard test for a NaN is (not (= N N)),
               ;; but an Emacs 20 bug makes (= N N) return t for a NaN also.
               (or (< emacs-major-version 21) (= saturation saturation)))
          (if (hexrgb-approx-equal 0.0 saturation)
              (setq hue         0.0
                    saturation  0.0)    ; Again, no color; only value.
            ;; Color
            (setq hue  (if (hexrgb-approx-equal red max)
                           (/ (- green blue) delta) ; Between yellow & magenta.
                         (if (hexrgb-approx-equal green max)
                             (+ 2.0 (/ (- blue red) delta)) ; Between cyan & yellow.
                           (+ 4.0 (/ (- red green) delta)))) ; Between magenta & cyan.
                  hue  (/ hue 6.0))
            ;; (when (<= hue 0.0) (setq hue  (+ hue 1.0)))  ; $$$$$$
            ;; (when (>= hue 1.0) (setq hue  (- hue 1.0)))) ; $$$$$$
            (when (< hue 0.0) (setq hue  (+ hue 1.0)))
            (when (> hue 1.0) (setq hue  (- hue 1.0))))
        (setq hue         0.0           ; Div by zero (max=0): H:=0, S:=0. (Hue undefined.)
              saturation  0.0)))
    (list hue saturation value)))

(defun hexrgb-hsv-to-rgb (hue saturation value)
  "Convert HUE, SATURATION, VALUE components to RGB (red, green, blue).
Each input component is 0.0 to 1.0, inclusive.
Returns a list of RGB components of value 0.0 to 1.0, inclusive."
  (let (red green blue int-hue fract pp qq tt ww)
    (if (hexrgb-approx-equal 0.0 saturation)
        (setq red    value
              green  value
              blue   value)             ; Gray
      (setq hue      (* hue 6.0)        ; Sectors: 0 to 5
            int-hue  (floor hue)
            fract    (- hue int-hue)
            pp       (* value (- 1 saturation))
            qq       (* value (- 1 (* saturation fract)))
            ww       (* value (- 1 (* saturation (- 1 (- hue int-hue))))))
      (case int-hue
        ((0 6) (setq red    value
                     green  ww
                     blue   pp))
        (1 (setq red    qq
                 green  value
                 blue   pp))
        (2 (setq red    pp
                 green  value
                 blue   ww))
        (3 (setq red    pp
                 green  qq
                 blue   value))
        (4 (setq red    ww
                 green  pp
                 blue   value))
        (otherwise (setq red    value
                         green  pp
                         blue   qq))))
    (list red green blue)))

(defun hexrgb-hsv-to-hex (hue saturation value &optional nb-digits)
  "Return the hex RBG color string for inputs HUE, SATURATION, VALUE.
Those inputs are each in the range 0.0 to 1.0, inclusive.

Optional arg NB-DIGITS is the number of hex digits per component.  It
should be 1, 2, 3, or 4 (default: 4).

The output string is `#' followed by NB-DIGITS hex digits for each
color component.  So for the default NB-DIGITS value of 4, the form is
\"#RRRRGGGGBBBB\"."
  (setq nb-digits  (or nb-digits  4))
  (hexrgb-color-values-to-hex
   (mapcar (lambda (x) (floor (* x 65535.0))) (hexrgb-hsv-to-rgb hue saturation value))
   nb-digits))

(defun hexrgb-rgb-to-hex (red green blue &optional nb-digits)
  "Return the hex RBG color string for inputs RED, GREEN, BLUE.
Those inputs are each in the range 0.0 to 1.0, inclusive.

Optional arg NB-DIGITS is the number of hex digits per component.  It
should be 1, 2, 3, or 4 (default: 4).

The output string is `#' followed by NB-DIGITS hex digits for each
color component.  So for the default NB-DIGITS value of 4, the form is
\"#RRRRGGGGBBBB\"."
  (setq nb-digits  (or nb-digits  4))
  (hexrgb-color-values-to-hex
   (mapcar (lambda (x) (floor (* x 65535.0))) (list red green blue))
   nb-digits))

(defun hexrgb-hex-to-hsv (color)
  "Return a list of HSV (hue, saturation, value) color components.
Each component is a value from 0.0 to 1.0, inclusive.
COLOR is a color name or a hex RGB string that starts with \"#\" and
is followed by an equal number (1 to 4) of hex digits for red, green,
and blue components."
  (let ((rgb-components  (hexrgb-hex-to-rgb color)))
    (apply #'hexrgb-rgb-to-hsv rgb-components)))

(defun hexrgb-hex-to-rgb (color)
  "Return a list of RGB (red, green, blue) color components.
Each component is a value from 0.0 to 1.0, inclusive.
COLOR is a color name or a hex RGB string that starts with \"#\" and
is followed by an equal number (1 to 4) of hex digits for red, green,
and blue components."
  (unless (hexrgb-rgb-hex-string-p color) (setq color  (hexrgb-color-name-to-hex color)))
  (let* ((len     (/ (1- (length color)) 3))
         (max-nb  (float (1- (expt 16 len)))))
    (list (/ (hexrgb-hex-to-int (substring color 1 (1+ len)))             max-nb)
          (/ (hexrgb-hex-to-int (substring color (1+ len) (+ 1 len len))) max-nb)
          (/ (hexrgb-hex-to-int (substring color (+ 1 len len)))          max-nb))))

(defun hexrgb-color-name-to-hex (color &optional nb-digits)
  "Return the RGB hex string, starting with \"#\", for the COLOR name.
If COLOR is already a string starting with \"#\", then just return it.

Optional arg NB-DIGITS is the number of hex digits per component.  It
should be 1, 2, 3, or 4 (default: 4).  (This function relies on
`x-color-values', which generally returns integers corresponding to 4
hex digits, so you probably do not want to pass an NB-DIGITS value
greater than 4.)

The output string is `#' followed by NB-DIGITS hex digits for each
color component.  So for the default NB-DIGITS value of 4, the form is
\"#RRRRGGGGBBBB\"."
  (setq nb-digits  (or nb-digits  4))
  (let ((components  (or (x-color-values color)  (error "No such color: %S" color))))
    (unless (hexrgb-rgb-hex-string-p color)
      (setq color  (hexrgb-color-values-to-hex components nb-digits))))
  color)

;; Color "components" would be better in the name than color "value"
;; but this name follows the Emacs tradition (e.g. `x-color-values',
;; `ps-color-values', `ps-e-x-color-values').
(defun hexrgb-color-values-to-hex (components &optional nb-digits)
  "Convert list of rgb color COMPONENTS to a hex RBG color string.
Each X in the string is a hexadecimal digit.
Input COMPONENTS is as for the output of `x-color-values'.

Optional arg NB-DIGITS is the number of hex digits per component.
It should be 1, 2, 3, or 4 (default: 4).

The output string is `#' followed by NB-DIGITS hex digits for each
color component.  So for the default NB-DIGITS value of 4, the form is
\"#RRRRGGGGBBBB\"."
  ;; 4 is the default because `x-color-values' produces appropriate integer values for 4.
  (unless components (error "`hexrgb-color-values-to-hex': null COMPONENTS argument"))
  (setq nb-digits  (or nb-digits  4))
  (concat "#"
          (hexrgb-int-to-hex (nth 0 components) nb-digits) ; red
          (hexrgb-int-to-hex (nth 1 components) nb-digits) ; green
          (hexrgb-int-to-hex (nth 2 components) nb-digits))) ; blue

(defun hexrgb-hex-to-color-values (color)
  "Convert hex COLOR to a list of RGB color components.
COLOR is a hex rgb color string, #XXXXXXXXXXXX
Each X in the string is a hexadecimal digit.  There are 3N X's, N > 0.
The output list is as for `x-color-values'."
  (let* ((hex-strgp  (string-match
                      "^\\(#\\)?\\(\\([a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]\\)+\\)$"
                      color))
         (ndigits    (/ (if (eq (match-beginning 1) (match-end 1))
                            (length color)
                          (1- (length color)))
                        3))
         red green blue)
    (unless hex-strgp (error "Invalid RGB color string: %s" color))
    (setq color  (substring color (match-beginning 2) (match-end 2))
          red    (hexrgb-hex-to-int (substring color 0 ndigits))
          green  (hexrgb-hex-to-int (substring color ndigits (* 2 ndigits)))
          blue   (hexrgb-hex-to-int (substring color (* 2 ndigits) (* 3 ndigits))))
    (list red green blue)))

;; Like `doremi-increment-color-component', but for hue only, and with 0-1 range and NB-DIGITS.
(defun hexrgb-increment-hue (color increment &optional nb-digits)
  "Increase hue component of COLOR by INCREMENT.
INCREMENT ranges from -100 to 100."
  (unless (string-match "#" color)      ; Convert color name to #hhh...
    (setq color  (hexrgb-color-values-to-hex (or (x-color-values color)
                                                 (error "No such color: %S" color)))))
  ;; Convert RGB to HSV
  (let* ((rgb         (or (x-color-values color)  (error "No such color: %S" color)))
         (red         (/ (float (nth 0 rgb)) 65535.0)) ; Convert from 0-65535 to 0.0-1.0
         (green       (/ (float (nth 1 rgb)) 65535.0))
         (blue        (/ (float (nth 2 rgb)) 65535.0))
         (hsv         (hexrgb-rgb-to-hsv red green blue))
         (hue         (nth 0 hsv))
         (saturation  (nth 1 hsv))
         (value       (nth 2 hsv)))
    (setq hue  (+ hue increment))
    (when (> hue 1.0) (setq hue  (1- hue)))
    (hexrgb-color-values-to-hex (mapcar (lambda (x) (floor (* x 65535.0)))
                                        (hexrgb-hsv-to-rgb hue saturation value))
                                nb-digits)))

;; Like `doremi-increment-color-component', but for saturation only, 0-1 range, and NB-DIGITS.
(defun hexrgb-increment-saturation (color increment &optional nb-digits)
  "Increase saturation component of COLOR by INCREMENT."
  (unless (string-match "#" color)      ; Convert color name to #hhh...
    (setq color  (hexrgb-color-values-to-hex (or (x-color-values color)
                                                 (error "No such color: %S" color)))))
  ;; Convert RGB to HSV
  (let* ((rgb         (or (x-color-values color)  (error "No such color: %S" color)))
         (red         (/ (float (nth 0 rgb)) 65535.0)) ; Convert from 0-65535 to 0.0-1.0
         (green       (/ (float (nth 1 rgb)) 65535.0))
         (blue        (/ (float (nth 2 rgb)) 65535.0))
         (hsv         (hexrgb-rgb-to-hsv red green blue))
         (hue         (nth 0 hsv))
         (saturation  (nth 1 hsv))
         (value       (nth 2 hsv)))
    (setq saturation  (+ saturation increment))
    (when (> saturation 1.0) (setq saturation  (1- saturation)))
    (hexrgb-color-values-to-hex (mapcar (lambda (x) (floor (* x 65535.0)))
                                        (hexrgb-hsv-to-rgb hue saturation value))
                                nb-digits)))

;; Like `doremi-increment-color-component', but for value only, 0-1 range, and NB-DIGITS.
(defun hexrgb-increment-value (color increment &optional nb-digits)
  "Increase value component (brightness) of COLOR by INCREMENT."
  (unless (string-match "#" color)      ; Convert color name to #hhh...
    (setq color  (hexrgb-color-values-to-hex (or (x-color-values color)
                                                 (error "No such color: %S" color)))))
  ;; Convert RGB to HSV
  (let* ((rgb         (or (x-color-values color)  (error "No such color: %S" color)))
         (red         (/ (float (nth 0 rgb)) 65535.0)) ; Convert from 0-65535 to 0.0-1.0
         (green       (/ (float (nth 1 rgb)) 65535.0))
         (blue        (/ (float (nth 2 rgb)) 65535.0))
         (hsv         (hexrgb-rgb-to-hsv red green blue))
         (hue         (nth 0 hsv))
         (saturation  (nth 1 hsv))
         (value       (nth 2 hsv)))
    (setq value  (+ value increment))
    (when (> value 1.0) (setq value  (1- value)))
    (hexrgb-color-values-to-hex (mapcar (lambda (x) (floor (* x 65535.0)))
                                        (hexrgb-hsv-to-rgb hue saturation value))
                                nb-digits)))

(defun hexrgb-increment-red (hex nb-digits increment &optional wrap-p)
  "Increment red component of rgb string HEX by INCREMENT.
String HEX starts with \"#\".  Each color is NB-DIGITS hex digits long.
If optional arg WRAP-P is non-nil then the result wraps around zero.
  For example, with NB-DIGITS 3, incrementing \"#fffffffff\" by 1
  causes it to wrap around to \"#000ffffff\"."
  (concat "#"
          (hexrgb-increment-hex (substring hex 1 (1+ nb-digits)) nb-digits increment wrap-p)
          (substring hex (1+ nb-digits) (1+ (* nb-digits 2)))
          (substring hex (1+ (* nb-digits 2)))))

(defun hexrgb-increment-green (hex nb-digits increment &optional wrap-p)
  "Increment green component of rgb string HEX by INCREMENT.
String HEX starts with \"#\".  Each color is NB-DIGITS hex digits long.
If optional arg WRAP-P is non-nil then the result wraps around zero.
  For example, with NB-DIGITS 3, incrementing \"#fffffffff\" by 1
  causes it to wrap around to \"#fff000fff\"."
  (concat
   "#" (substring hex 1 (1+ nb-digits))
   (hexrgb-increment-hex (substring hex (1+ nb-digits) (1+ (* nb-digits 2)))
                         nb-digits
                         increment
                         wrap-p)
   (substring hex (1+ (* nb-digits 2)))))

(defun hexrgb-increment-blue (hex nb-digits increment &optional wrap-p)
  "Increment blue component of rgb string HEX by INCREMENT.
String HEX starts with \"#\".  Each color is NB-DIGITS hex digits long.
If optional arg WRAP-P is non-nil then the result wraps around zero.
  For example, with NB-DIGITS 3, incrementing \"#fffffffff\" by 1
  causes it to wrap around to \"#ffffff000\"."
  (concat "#" (substring hex 1 (1+ (* nb-digits 2)))
          (hexrgb-increment-hex (substring hex (1+ (* nb-digits 2)))
                                nb-digits
                                increment
                                wrap-p)))

(defun hexrgb-increment-equal-rgb (hex nb-digits increment &optional wrap-p)
  "Increment each color component (r,g,b) of rgb string HEX by INCREMENT.
String HEX starts with \"#\".  Each color is NB-DIGITS hex digits long.
If optional arg WRAP-P is non-nil then the result wraps around zero.
  For example, with NB-DIGITS 3, incrementing \"#fffffffff\" by 1
  causes it to wrap around to \"#000000000\"."
  (concat
   "#"
   (hexrgb-increment-hex (substring hex 1 (1+ nb-digits)) nb-digits increment wrap-p)
   (hexrgb-increment-hex (substring hex (1+ nb-digits) (1+ (* nb-digits 2)))
                         nb-digits
                         increment
                         wrap-p)
   (hexrgb-increment-hex (substring hex (1+ (* nb-digits 2))) nb-digits increment wrap-p)))

(defun hexrgb-increment-hex (hex nb-digits increment &optional wrap-p)
  "Increment hexadecimal-digits string HEX by INCREMENT.
Only the first NB-DIGITS of HEX are used.
If optional arg WRAP-P is non-nil then the result wraps around zero.
  For example, with NB-DIGITS 3, incrementing \"fff\" by 1 causes it
  to wrap around to \"000\"."
  (let* ((int      (hexrgb-hex-to-int hex))
         (new-int  (+ increment int)))
    (if (or wrap-p
            (and (>= int 0)             ; Not too large for the machine.
                 (>= new-int 0)         ; For the case where increment < 0.
                 (<= (length (format (concat "%X") new-int)) nb-digits))) ; Not too long.
        (hexrgb-int-to-hex new-int nb-digits) ; Use incremented number.
      hex)))                            ; Don't increment.

(defun hexrgb-hex-to-int (hex)
  "Convert HEX string argument to an integer.
The characters of HEX must be hex characters."
  (let* ((factor  1)
         (len     (length hex))
         (indx    (1- len))
         (int     0))
    (while (>= indx 0)
      (setq int     (+ int (* factor (hexrgb-hex-char-to-integer (aref hex indx))))
            indx    (1- indx)
            factor  (* 16 factor)))
    int))

;; From `hexl.el'.  This is the same as `hexl-hex-char-to-integer' defined there.
(defun hexrgb-hex-char-to-integer (character)
  "Take a CHARACTER and return its value as if it were a hex digit."
  (if (and (>= character ?0) (<= character ?9))
      (- character ?0)
    (let ((ch  (logior character 32)))
      (if (and (>= ch ?a) (<= ch ?f))
          (- ch (- ?a 10))
        (error "Invalid hex digit `%c'" ch)))))

;; Originally, I used the code from `int-to-hex-string' in `float.el' of Emacs 22.
;; This version is thanks to Juri Linkov <juri@jurta.org>.
;;
(defun hexrgb-int-to-hex (int &optional nb-digits)
  "Convert integer arg INT to a string of NB-DIGITS hexadecimal digits.
For use with color specs, NB-DIGITS should be 1, 2, 3, or 4.

If INT is too large to be represented with NB-DIGITS then the result
is truncated from the left.  For example, if INT=256 and NB-DIGITS=2
returns \"00\", since the hex equivalent of 256 decimal is 100, which
is more than 2 digits.

If you want to ensure that `hexrgb-int-to-hex' is not called with INT
too large for NB-DIGITS, use something like this to check the args:

 (<= (length (format (concat \"%X\") INT)) NB-DIGITS)"
  (setq nb-digits  (or nb-digits 4))
  (substring (format (concat "%0" (int-to-string nb-digits) "X") int) (- nb-digits)))

;; Inspired by Elisp Info manual, node "Comparison of Numbers".
(defun hexrgb-approx-equal (x y &optional rfuzz afuzz)
  "Return non-nil if numbers X and Y are approximately equal.
RFUZZ is a relative fuzz factor.  AFUZZ is an absolute fuzz factor.
RFUZZ defaults to 1.0e-8.  AFUZZ defaults to (/ RFUZZ 10).
RFUZZ and AFUZZ are converted to their absolute values.
The algorithm is:
 (< (abs (- X Y)) (+ AFUZZ (* RFUZZ (+ (abs X) (abs Y)))))."
  (setq rfuzz  (or rfuzz 1.0e-8)
        rfuzz  (abs rfuzz)
        afuzz  (or afuzz (/ rfuzz 10))
        afuzz  (abs afuzz))
  (< (abs (- x y)) (+ afuzz (* rfuzz (+ (abs x) (abs y))))))

(defun hexrgb-color-value-to-float (n)
  "Return the floating-point equivalent of color-component value N.
N must be an integer between 0 and 65535, or else an error is raised."
  (unless (and (wholenump n) (<= n 65535))
    (error "Not a whole number less than 65536"))
  (/ (float n) 65535.0))

(defun hexrgb-hex-to-hex (hex nb-digits)
  "Return a hex string of NB-DIGITS digits, rounded from hex string HEX.
Raise an error if HEX represents a number > `most-positive-fixnum'.
HEX is a hex string, not an RGB string.  It does not start with `#'."
  (let* ((len      (length hex))
         (digdiff  (- nb-digits len)))
    (cond ((zerop digdiff)
           hex)
          ((natnump digdiff)
           (let ((int  (hexrgb-hex-to-int hex)))
             (unless (natnump int) (error "HEX number is too large"))
             (format (concat "%0" (int-to-string len) "X" (make-string digdiff ?0)) int)))
          (t
           (let ((over  (substring hex digdiff)))
             (setq hex  (substring hex 0 nb-digits))
             (if (> (string-to-number over 16)
                    (string-to-number (make-string (- digdiff) ?7) 16))
                 (hexrgb-increment-hex hex nb-digits 1) ; Round up.
               hex))))))

(defun hexrgb-rgb-hex-to-rgb-hex (hex nb-digits)
  "Trim or expand hex RGB string HEX to NB-DIGITS digits.
HEX can optionally start with `#'.
In that case, so does the return value."
  (let* ((nb-sign-p  (eq ?# (aref hex 0)))
         (hex+       (or (and nb-sign-p  hex)  (concat "#" hex)))
         (red        (hexrgb-red-hex   hex+))
         (green      (hexrgb-green-hex hex+))
         (blue       (hexrgb-blue-hex  hex+)))
    (format "%s%s%s%s"
            (if nb-sign-p "#" "")
            (hexrgb-hex-to-hex red   nb-digits)
            (hexrgb-hex-to-hex green nb-digits)
            (hexrgb-hex-to-hex blue  nb-digits))))

(defun hexrgb-red-hex (hex)
  "Return the red hex component for RGB string HEX.
HEX can optionally start with `#'.  The return value does not."
  (let* ((nb-sign-p  (eq ?# (aref hex 0)))
         (hex-       (or (and nb-sign-p  (substring hex 1))  hex)))
    (substring hex- 0 (/ (length hex-) 3))))

(defun hexrgb-green-hex (hex)
  "Return the green hex component for RGB string HEX.
HEX can optionally start with `#'.  The return value does not."
  (let* ((nb-sign-p  (eq ?# (aref hex 0)))
         (hex-       (or (and nb-sign-p  (substring hex 1))  hex))
         (len        (/ (length hex-) 3)))
    (substring hex- len (* 2 len))))

(defun hexrgb-blue-hex (hex)
  "Return the blue hex component for RGB string HEX.
HEX can optionally start with `#'.  The return value does not."
  (let* ((nb-sign-p  (eq ?# (aref hex 0)))
         (hex-       (or (and nb-sign-p  (substring hex 1))  hex))
         (len        (/ (length hex-) 3)))
    (substring hex- (* 2 len))))

(defun hexrgb-float-to-color-value (x)
  "Return the color-component value equivalent of floating-point number X.
X must be between 0.0 and 1.0, or else an error is raised."
  (unless (and (numberp x) (<= 0.0 x) (<= x 1.0))
    (error "Not a floating-point number between 0.0 and 1.0"))
  (floor (* x 65535.0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'hexrgb)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; hexrgb.el ends here
#+end_src

** menu-bar+.el

#+call: hash() :exports none

#+RESULTS:
: 20210601222926008086500

#+name: 20210601222926008086500
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; menu-bar+.el --- Extensions to `menu-bar.el'.
;;
;; Filename: menu-bar+.el
;; Description: Extensions to `menu-bar.el'.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 1996-2021, Drew Adams, all rights reserved.
;; Created: Thu Aug 17 10:05:46 1995
;; Version: 0
;; Package-Requires: ()
;; Last-Updated: Wed Dec 30 20:21:37 2020 (-0800)
;;           By: dradams
;;     Update #: 3922
;; URL: https://www.emacswiki.org/emacs/download/menu-bar%2b.el
;; Doc URL: https://www.emacswiki.org/emacs/MenuBarPlus
;; Keywords: internal, local, convenience
;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   `apropos', `apropos+', `avoid', `backquote', `bookmark',
;;   `bookmark+', `bookmark+-1', `bookmark+-bmu', `bookmark+-key',
;;   `bookmark+-lit', `button', `bytecomp', `cconv', `cl', `cl-lib',
;;   `cmds-menu', `col-highlight', `crosshairs', `fit-frame',
;;   `font-lock', `font-lock+', `frame-fns', `gv', `help+',
;;   `help-fns', `help-fns+', `help-macro', `help-macro+',
;;   `help-mode', `hl-line', `hl-line+', `info', `info+', `kmacro',
;;   `macroexp', `menu-bar', `menu-bar+', `misc-cmds', `misc-fns',
;;   `naked', `pp', `pp+', `radix-tree', `replace', `second-sel',
;;   `strings', `syntax', `text-mode', `thingatpt', `thingatpt+',
;;   `vline', `w32browser-dlgopen', `wid-edit', `wid-edit+'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;    Extensions to `menu-bar.el'.  Redefines the default menu bar.
;;
;;  Usage:
;;
;;    This library should be loaded after loading standard library
;;    `menu-bar.el'.  So, in your `~/.emacs' file, do this:
;;
;;      (eval-after-load "menu-bar" '(require 'menu-bar+))
;;
;;    You will also want to do that before loading other libraries
;;    that might modify the following predefined menu-bar menus:
;;
;;      `File'
;;      `Edit'
;;      `More Manuals'
;;      `Options'
;;      `Search'
;;
;;    This is because those menus correspond to the variables
;;    mentioned at the end of this commentary as being REDEFINED here.
;;    If a library modifies one of those variables before you load
;;    `menu-bar+.el' then those changes will be lost when the variable
;;    is redefined.
;;
;;    The following libraries are exceptions to this rule.  If loaded
;;    before `menu-bar+.el' then they are used by `menu-bar+.el'.  So
;;    if you use them then load them before loading `menu-bar+.el'.
;;
;;      `doremi.el'
;;      `help+.el'
;;      `help-fns+.el'
;;      `thumb-frm.el'
;;      `w32-browser-dlgopen.el'
;;
;;  Main differences:
;;
;;    1. Menus "Search", "Frames" and "Do Re Mi" were added.
;;    2. Menus "File", "Edit", & "Help" were changed.
;;    3. Menu order was changed.
;;    4. Buffer-local menus are separated from global menus via "||".
;;
;;
;;  User options defined here:
;;
;;    `menu-barp-select-buffer-function'.
;;
;;  Commands defined here:
;;
;;    `describe-menubar', `fill-paragraph-ala-mode',
;;    `menu-bar-create-directory', `menu-bar-next-tag-other-window'
;;    (Emacs 20), `menu-bar-select-frame' (Emacs 20),
;;    `menu-bar-word-search-backward' (Emacs 22+),
;;    `menu-bar-word-search-forward' (Emacs 22+),
;;    `nonincremental-repeat-search-backward' (Emacs 22+),
;;    `nonincremental-repeat-search-forward' (Emacs 22+),
;;    `nonincremental-repeat-word-search-backward' (Emacs < 22),
;;    `nonincremental-repeat-word-search-forward' (Emacs < 22),
;;
;;  Macros defined here:
;;
;;    `menu-bar-make-toggle-any-version'.
;;
;;  Non-interactive functions defined here:
;;
;;    `menu-barp-nonempty-region-p'.
;;
;;  Variables defined here:
;;
;;    `menu-bar-apropos-menu', `menu-bar-describe-menu',
;;    `menu-bar-divider-menu', `menu-bar-doremi-menu',
;;    `menu-bar-edit-fill-menu', `menu-bar-edit-region-menu',
;;    `menu-bar-edit-sort-menu', `menu-bar-emacs-lisp-manual-menu',
;;    `menu-bar-emacs-manual-menu', `menu-bar-frames-menu',
;;    `menu-bar-i-search-menu' (Emacs < 22),
;;    `menu-bar-non-i-search-menu', `menu-bar-search-replace-menu',
;;    `menu-bar-search-tags-menu', `menu-bar-whereami-menu',
;;    `yank-menu'.
;;
;;
;;  ***** NOTE: The following functions defined in `menu-bar.el' have
;;              been REDEFINED HERE:
;;
;;  `kill-this-buffer' - Deletes buffer's windows as well, if
;;                       `sub-kill-buffer-and-its-windows'.
;;
;;  `menu-bar-options-save' - Added options are saved (>= Emacs 21).
;;
;;  `menu-bar-select-buffer' (Emacs 20-22) - Uses -other-frame.
;;
;;
;;  ***** NOTE: The following variables defined in `menu-bar.el' have
;;              been REDEFINED HERE:
;;
;;  `menu-bar-edit-menu', `menu-bar-file(s)-menu',
;;  `menu-bar-manuals-menu', `menu-bar-options-menu',
;;  `menu-bar-search-menu'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2020/12/30 dadams
;;     Soft-require bookmark+.el.
;;     menu-bar-goto-menu:
;;       Add, rename, and reorder items:
;;         Bookmark submenu, move-to-column, (next|previous)-error, dired-jump.
;; 2020/09/26 dadams
;;     menu-bar-search-tags-menu, item tags-continue: Updated for Emacs 27+.
;;     menu-bar-search-replace-menu: Added tags-repl-continue.
;;                                   tags-query-replace: Removed key reminder.
;; 2020/09/21 dadams
;;     menu-bar-non-i-search-menu: Added :keys (suggestion from Juri Linkov).
;; 2020/09/20 dadams
;;     Added: menu-bar-non-i-search-menu as Search > Incremental Search.
;;     Removed: menu-bar-i-search-menu for Emacs 22+ (not needed).
;;     Move nonincremental search items to it.  (For Emacs 23+ only - don't bother for < 23.)
;; 2020/08/14 dadams
;;     describe-menubar: Use help-print-return-message, not print-help-return-message.
;; 2020/01/22 dadams
;;     Added: menu-bar-search-xref-menu.  Added it to Search menu, for Xref stuff.
;;     menu-bar-bookmark-map, menu-bar-goto-menu: Moved from Search menu to File menu.
;;     menu-bar-goto-menu: Removed Xref stuff, since moved it to Search menu.
;; 2018/01/19 dadams
;;     make-frame(-on-display), delete-this-frame: Guard with (boundp 'menu-bar-frames-menu).
;; 2017/12/21 dadams
;;     Added make-frame(-on-display), delete-this-frame to Frames menu.
;;     Removed frame stuff from Files menu, since added it to Frames menu.
;; 2017/07/20 dadams
;;     menu-bar-options-menu: Protect edit-options entry with fboundp.
;; 2017/06/18 dadams
;;     menu-bar-apropos-menu: Added apropos-local-(value|variable).
;;     Renamed apropos-user-options to apropos-user-option.
;; 2017/04/12 dadams
;;     kill-this-buffer: Updated for more recent Emacs versions.
;; 2016/12/09 dadams
;;     Updated for Emacs 25: x-get-selection -> gui-get-selection,
;;                           x-select-enable-clipboard -> select-enable-clipboard.
;; 2016/09/18 dadams
;;     Applied renaming of secondary-dwim to secondary-yank|select|move|swap.
;; 2016/08/31 dadams
;;     No longer soft-require cmds-menu.el for Emacs 20.
;; 2016/05/12 dadams
;;     menu-bar-doremi-menu: Added doremi-windows+.
;; 2015/12/06 dadams
;;     Protect uses of menu-bar-doremi-menu with boundp test.
;; 2014/12/29 dadams
;;     menu-bar-next-tag-other-window: Define only for Emacs 20.  Do not autoload.
;; 2014/12/10 dadams
;;     menu-bar-edit-menu [paste]: Use x-get-selection, not x-selection-exists-p.
;;                                 Enable also if kill-ring or (cdr yank-menu).
;; 2014/05/04 dadams
;;     Emacs 20-22: soft-require info+20.el (new) instead of info+.el.
;; 2013/11/-8 dadams
;;     Added comment-region-lines to menu-bar-edit-region-menu.
;; 2013/10/19 dadams
;;     Soft-require cmds-menu.el.
;; 2013/07/24 dadams
;;     Added: menu-barp-nonempty-region-p.
;;       Use it everywhere where appropriate, e.g., instead of just mark-active.
;;     menu-bar-edit-region-menu, menu-bar-edit-sort-menu:
;;       Removed :enable from items, since on menu itself.
;; 2013/07/20 dadams
;;     menu-bar-tools-menu: Removed grep, since it is on Search menu.
;;     menu-bar-search-menu: Added: multi-occur(-in-matching-buffers).
;;     Renamed Grep to Files Regexp (grep).  Renamed Occurrences to This Buffer Regexp.
;;     Remove String from search menu item names.
;;     Moved submenus Go To, Bookmarks, and Tags up in Search menu.
;; 2013/07/09 dadams
;;     menu-bar-edit-fill-menu: Added :enable (not buffer-read-only).
;;     fill-paragraph-ala-mode: Corrected definition and added missing interactive spec.
;; 2013/07/02 dadams
;;     Added to commentary: mention load order.
;; 2013/06/16 dadams
;;     menu-barp-select-buffer-function: New default value - no pop-to-buffer-other-frame.
;; 2013/03/12 dadams
;;     toggle-max-frame-*: Removed :enable (no longer needed).
;; 2011/12/03 dadams
;;     All region commands: Enable only if region is also nonempty.
;;     All editing commands: Enable only if buffer is not read-only.
;; 2011/11/04 dadams
;;     Wrap (x-get-selection 'SECONDARY) everywhere in condition-case (Emacs 21 bug).
;; 2011/07/24 dadams
;;     menu-bar-(edit|sort)-region-menu: Disable these submenus if region is not active.
;;     Removed old Emacs19 commented code.
;; 2011/07/01 dadams
;;     Added: option menu-barp-select-buffer-function.
;;     Following fix to Emacs bug #8876, use new var menu-bar-select-buffer-function.
;; 2011/06/15 dadams
;;     menu-bar-select-buffer: Use pop-to-buffer-other-frame for Emacs 24.
;; 2011/01/04 dadams
;;     defsubst -> defun.
;;     Removed autoload cookies from defvar.  Added for commands.
;; 2010/06/04 dadams
;;     Frames menu: Handle fit-frame.el and frame-cmds.el separately.  Added Toggle Max stuff.
;; 2010/05/28 dadams
;;     Added items new-file and new-directory.  Added function menu-bar-create-directory.
;; 2010/05/25 dadams
;;     Added to Frames menu: max-frame, maximize-frame-(horizontally|vertically).
;; 2010/01/12 dadams
;;     describe-menubar: save-excursion + set-buffer -> with-current-buffer.
;; 2009/11/07 dadams
;;     Applied doremi cmd renamings (added +).
;;     Added to Do Re Mi menu: *-all-frames-fg+, *(-face)-(bg|fg)-color-name+, *-all-faces-bg+.
;; 2009/06/25 dadams
;;     Use renaming: yank-secondary-or-swap-w-region to secondary-dwim.
;;     Added: secondary-swap-region (Swap Region and Secondary) to Edit menu.
;;     Renamed secondary selection items in Edit menu.
;; 2009/06/18 dadams
;;     Added doremi-buffer-font-size to Do Re Mi menu.
;; 2009/05/17 dadams
;;     Updated to reflect thumb-frm.el name changes.
;; 2008/05/23 dadams
;;     Soft-require second-sel.el.
;; 2008/05/06 dadams
;;     Renamed yank-secondary-or-convert-primary to yank-secondary-or-swap-w-region.
;;     Added: secondary-to-primary.
;; 2008/05/04 dadams
;;     Added primary-to-secondary to Edit menu.
;;     Changed :enable condition for yank-secondary - use x-get-selection.
;; 2008/02/01 dadams
;;     Update Search menu.
;;       Added: menu-bar-last-search-type, nonincremental-repeat-*, menu-bar-word-search-*.
;;       Define nonincremental-repeat-word-search* only for Emacs 22.
;;       Added menu-bar-i-search-menu submenu for Emacs 22.
;; 2007/12/14 dadams
;;     Require help+20.el for Emacs 20.  Require (new) help+.el for Emacs 22.
;;     Reorganize Help submenus: Apropos, Learn More > (Emacs|Emacs Lisp).
;; 2007/12/11 dadams
;;     menu-bar-final-items: Treat Emacs 21 like 20 - the item is File but it's called files.
;; 2007/12/09 dadams
;;     Added to Help > Describe: describe-(option(-of-type)|command).
;; 2007/12/02 dadams
;;     Added to Help > Describe (and reordered):
;;       describe-(face|keymap|file|input-method|coding-system(-briefly)|current-display-table),
;;     Soft require help-fns+.el.
;; 2007/11/01 dadams
;;     Do Re Mi menu:
;;       Added Window Size.
;;       Move Frame (Vertically|Horizontally)->Move Frame.  Frame (Height|Width)->Frame Size.
;; 2007/10/26 dadams
;;     Added doremi-undo-* to Do Re Mi menu.
;; 2007/08/12 dadams
;;     Removed soft require of highlight.el. Moved code to highlight.el.
;; 2007/08/11 dadams
;;     Removed soft require of replace+.el. Moved code to replace+.el.
;; 2007/06/08 dadams
;;     Renamed: *-tag-other-frame to *-tag-other-window.
;; 2007/06/02 dadams
;;     Renamed: highlight-region(-regexp-region) to hlt-highlight-region(-regexp-region),
;;              unhighlight-region to hlt-unhighlight-region.
;; 2007/05/22 dadams
;;     Removed menu-item-any-version.  Use menu-item everywhere (OK for Emacs 20 also now).
;; 2006/10/13 dadams
;;     menu-bar-final-items: Put pop-up-tool-bar at end, if defined.
;; 2006/05/19 dadams
;;     menu-bar-options-save: Updated to latest Emacs 22 definition. Added Emacs 21 definition.
;; 2005/11/08 dadams
;;     Added to menu-bar-edit-menu: undo, cut, copy, paste, select paste, clear,
;;       separator-edit-delete-lines.
;;     Added to menu-bar-search-tags-menu: set-tags-name, apropos-tags, separator-tags-misc,
;;       separator-tags-regexp, next-tag-other-frame,
;;     Added: yank-menu, menu-bar-next-tag-other-frame, menu-bar-select-frame.
;; 2005/10/23 dadams
;;     Removed references to menu-bar-files-menu - test version, not boundp menu-bar-file-menu.
;;     Still keep "files" in menu-bar-final-items for version < 21; else wrong order.
;; 2005/08/02 dadams
;;     Added to Do Re Mi menu: doremi-all-faces-fg, doremi-all-frames-bg.
;; 2005/06/14 dadams
;;     For Emacs 22: menu-bar-files-menu -> menu-bar-file-menu.
;;     No longer redefine File(s) menu from scratch, removing default bindings.
;;     Open File and Open Directory: Don't use other frame, except in Emacs < 22.
;;     Don't bother to rename File menu items (suggested renamings to emacs-devel@gnu.org.
;;     menu-bar-edit-menu: defvar -> setq.
;;     menu-bar-final-items: Use default order.
;; 2005/05/28 dadams
;;     Protected menu-bar-last-search-type with boundp (thanks to Tim Johnson for the report).
;; 2005/05/17 dadams
;;     Updated to work with Emacs 22.x.
;; 2005/05/10 dadams
;;     Added: set[-all]-frame-alist-parameter[s]-from-frame.
;; 2005/01/25 dadams
;;     Added: menu-bar-make-toggle-any-version, menu-bar-options-save.
;;     Added to Options menu: doremi-push-frame-config-for-cmds-flag, inhibit-fit-frame-flag,
;;           autofit-frames-flag, thumbify-instead-of-iconify-flag, replace-w-completion-flag.
;; 2005/01/20 dadams
;;     Removed: exit-with-confirmation.
;; 2005/01/09 dadams
;;     Renamed: doremi-bg-rgb to doremi-bg, doremi-face-bg-rgb to doremi-face-bg,
;;              doremi-face-fg-rgb to doremi-face-fg.
;; 2005/01/02 dadams
;;     Added doremi-marks, doremi-global-marks.
;; 2004/12/28 dadams
;;     Added doremi-face-fg-rgb, doremi-face-bg-rgb, doremi-*-separator.
;; 2004/12/11 dadams
;;     Added doremi-thumbnail-frames.
;; 2004/11/20 dadams
;;     Refined to deal with Emacs 21 < 21.3.50 (soon to be 22.x)
;;     Require info+.el for all versions of Emacs.
;; 2004/11/16 dadams
;;     Removed requires of files that redefine std cmds, since std versions available.
;; 2004/10/12 dadams
;;     Added require of replace+.el for Emacs 21 also.
;; 2004/10/01 dadams
;;     Updated for Emacs 21 also.
;;     Added macro menu-item-any-version.
;; 2004/09/26 dadams
;;     Use new Do Re Mi names and files.
;; 2004/09/20 dadams
;;     Use adjust-bg-rgb instead of adjust-bg-color.
;; 2004/09/11 dadams
;;     Reflected move of commands from doremi.el to doremi-frm.el
;; 2004/09/10 dadams
;;     Replaced dlgopen.el with w32browser-dlgopen.el.
;; 2004/09/07 dadams
;;     Added doremi menu.
;; 2004/03/19 dadams
;;     Added to menu-bar-frames-menu: tile-frames-[horizontally|vertically].
;; 2000/09/27 dadams
;;     1. Added to Files menu: execute-extended-command, repeat-complex-command.
;;     2. Removed help-frame condition on show-*Help*-buffer.
;; 1999/10/07 dadams
;;     Added show-calendar and separator to Tools menu.
;; 1999/10/01 dadams
;;     Added: menu-bar-divider-menu.  Use it for [menu-bar divider].
;; 1999/09/02 dadams
;;     kill-this-buffer: use sub-kill-buffer-and-its-windows.
;; 1999/08/25 dadams
;;     1. Added Frames menu.  Changed Help to ? menu.
;;     2. Commented out menu-bar-print-menu.
;; 1999/04/08 dadams
;;     Added to help menu: help-for-help.
;; 1999/04/07 dadams
;;     1. Bound apropos stuff regardless of (fboundp 'apropos).
;;     2. Corrected help menu order.
;; 1999/04/07 dadams
;;     1. Added to help menu: help-on-click, save-*Help*-buffer.
;;     2. apropos-symbol->apropos; super-apropos-symbol->apropos-documentation.
;; 1999/04/06 dadams
;;     Added *highlight*-region fns to Edit->Region submenu.
;; 1999/04/02 dadams
;;     Only add "Show *Help* Buffer" if help-frame.
;; 1999/03/26 dadams
;;     Added vc-ediff to ediff menu (when fboundp).
;; 1999/03/23 dadams
;;     Added: ediff-revision, vc-diff.
;; 1999/03/17 dadams
;;     1. Moved Replace menu to be a Search submenu.
;;     2. Reordered Edit menu.
;;     3. Removed default Help items (duplicate).
;; 1996/04/26 dadams
;;     Put escaped newlines on long-line strings.
;; 1996/04/24 dadams
;;     Added edit-options to Edit menu.
;; 1996/04/22 dadams
;;     1. menu-bar-edit-menu:  Added: flush-lines, keep-lines.
;;     2. menu-bar-edit-region-menu:  Added: (un)tabify-region, center-region,
;;        indent-rigidly-region, abbrevs-region, macro-region.
;; 1996/04/04 dadams
;;     1. Added fill-paragraph-ala-mode.
;;     2. Edit menu:
;;        a. Added yank-secondary and select-all to Edit menu.
;;        d. Added Edit submenus Fill, Region, Sort, Highlight.
;; 1996/03/18 dadams
;;     Added vc-diff to menu-bar-ediff-menu.
;; 1996/03/12 dadams
;;     Added diff and reordered ediff menu.
;; 1996/03/08 dadams
;;     Added redefinition of kill-this-buffer.
;; 1996/02/08 dadams
;;     Added: save-*Help*-buffer, describe-syntax, locate-library,
;;            finder-by-keyword, view-emacs-lisp-news.
;; 1996/01/26 dadams
;;     no-op -> %$>disabled@!^ (Shouldn't be bound command, else binding is shown.)
;; 1996/01/25 dadams
;;     menu-bar-help-menu: Added Emacs FAQ.
;; 1996/01/17 dadams
;;     apropos -> apropos-symbol, super-apropos -> super-apropos-symbol.
;; 1995/09/11 dadams
;;     Bookmarks added to Search menu.
;; 1995/08/29 dadams
;;     1) Added to Search menu: grep, occur.
;;     2) Put tags searches on submenu of Search.
;; 1995/08/23 dadams
;;     Changed menu-bar-final-items order.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(require 'menu-bar)

(eval-when-compile (when (< emacs-major-version 21) (require 'cl-lib))) ;; dolist
(when (eq system-type 'windows-nt)
  (require 'w32browser-dlgopen nil t)) ;; (no error if not found): dlgopen-open-files
                                       ;; `w32browser-dlgopen.el' is based on `dlgopen.el'
                                       ;; by Binu Jose Philip

(when (< emacs-major-version 21)
  (require 'help+20 nil t) ;; (no error if not found): describe-keymap, help-on-click/key
  (require 'unaccent nil t)) ;; (no error if not found): unaccent-region

(when (> emacs-major-version 21)
  (require 'help+ nil t) ;; (no error if not found): help-on-click/key
  (require 'help-fns+ nil t)) ;; (no error if not found): describe-keymap

(if (> emacs-major-version 22)
    (require 'info+ nil t) ;; (no error if not found): menu-bar-read-lispref, info-emacs-manual
  (require 'info+20) nil t)
(require 'bookmark+ nil t) ;; (no error if not found): bmkp-jump-menu
(require 'misc-cmds nil t) ;; (no error if not found): kill-buffer-and-its-windows
(require 'second-sel nil t) ;; (no error if not found):
                            ;; primary-to-secondary, secondary-to-primary, yank-secondary
(require 'apropos+ nil t);; (no error if not found): apropos-local-value, apropos-local-variable

(when (> emacs-major-version 20)
  (require 'cmds-menu nil t)) ;; (no error if not found): recent-cmds-menu

;; To quiet the Emacs 20 byte compiler
(defvar menu-bar-goto-menu)
(defvar menu-bar-i-search-menu)
(defvar menu-bar-last-search-type)
(defvar menu-bar-select-buffer-function)
(unless (> emacs-major-version 23) (defvar menu-barp-select-buffer-function))
(defvar select-enable-clipboard)
(defvar menu-bar-search-xref-menu)

;;;;;;;;;;;;;;;;;;;;


(defun menu-barp-nonempty-region-p ()
  "Return non-nil if region is active and non-empty."
  (and transient-mark-mode  mark-active  (> (region-end) (region-beginning))))

(when (> emacs-major-version 23)
  (defcustom menu-barp-select-buffer-function (lambda (buffer &optional other-window norecord)
                                                (interactive
                                                 "BPop to buffer on another frame:\nP")
                                                (let ((pop-up-frames  t))
                                                  (pop-to-buffer buffer other-window norecord)))
    "*Function to use as `menu-bar-select-buffer-function'."
    :type 'function :group 'menu))


;; REPLACE ORIGINAL in `menu-bar.el'.
;;
;; Use Emacs 22 definition.  Emacs 20 version fails when `last-command-event'
;; is the name of the frame.
;;
(when (< emacs-major-version 21)
  (defun menu-bar-select-frame ()
    (interactive)
    (let (frame)
      (dolist (f (frame-list))
        (when (equal last-command-event (frame-parameter f 'name))
          (setq frame f)))
      ;; FRAME can be nil when user specifies the selected frame.
      (setq frame (or frame (selected-frame)))
      (make-frame-visible frame)
      (raise-frame frame)
      (select-frame frame))))


;; REPLACE ORIGINAL in `menu-bar.el'.
;;
;; Use `switch-to-buffer-other-frame' (Emacs 20, 21).
;;
;; Note: Starting with Emacs 23, function `menu-bar-select-buffer' is no longer used by
;;       `menu-bar-update-buffers', so redefining it has no effect on the menu.
;;       See Emacs bug #8876.  The fix to bug #8876, which is for Emacs 24, uses a new
;;       variable, `menu-bar-select-buffer-function'.  We provide a user option for this.
;;
(if (< emacs-major-version 24)
    (defun menu-bar-select-buffer ()
      "Switch to `last-command-event' buffer in other frame."
      (interactive)
      (switch-to-buffer-other-frame last-command-event)) ;`files+.el'
  (setq menu-bar-select-buffer-function  menu-barp-select-buffer-function))


;; REPLACE ORIGINAL MENU-BAR -------------------------------------

;;; Main MENU-BAR entries.
;; Divider before standard menus.
(defvar menu-bar-divider-menu (make-sparse-keymap "Divider"))
(define-key global-map [menu-bar divider] (cons "||" menu-bar-divider-menu))
(define-key menu-bar-divider-menu [menu-bar-divider-hint]
  '("<-- Current mode menus to left.   ||   Common menus to right -->"
    . describe-menubar))

;;;###autoload
(defun describe-menubar ()
  "Explain the menu bar, in general terms."
  (interactive)
  (with-output-to-temp-buffer "*Help*"
    (princ (substitute-command-keys
            "To the right of the menu bar divider (\"||\") are the general menus
that usually appear in every buffer.  To the left of this symbol, there
may also be additional menus that are specific to the buffer's mode
\(use `\\[describe-mode]' for information on a buffer's mode).

The general menus are as follows:

    Buffers  File  Tools  Edit  Frames  Do Re Mi  Help

Use the \"Frames\" menu to resize, tile, and hide/show frames.
Use the \"Do Re Mi\" menu to incrementally change things.
The \"Help\" menu extends the \"Help\" menu described in the Emacs manual (`\\[info]').

For information on a menu item, use the \"This\" item in the \"Describe\"
submenu of the \"Help\" menu."))
    (if (fboundp 'help-print-return-message)
        (help-print-return-message)
      (print-help-return-message))
    (with-current-buffer standard-output
      (help-mode)
      (buffer-string))))                ; Return the text we displayed.


;; REPLACE ORIGINAL defined in `menu-bar.el'.
(setq menu-bar-edit-menu (make-sparse-keymap "Edit"))
(define-key global-map [menu-bar edit] (cons "Edit" menu-bar-edit-menu))


;; REPLACE ORIGINAL menuus defined in `menu-bar.el'.
;; These are all moved to new top-level `Search' menu.
(if (< emacs-major-version 21)
    (global-unset-key [menu-bar search])
  (global-unset-key [menu-bar edit search])
  (global-unset-key [menu-bar edit separator-search])
  (global-unset-key [menu-bar edit replace])
  (global-unset-key [menu-bar edit goto])
  (global-unset-key [menu-bar edit bookmark])
  (global-unset-key [menu-bar edit separator-bookmark]))

(defconst menu-bar-search-menu (make-sparse-keymap "Search"))
(define-key global-map [menu-bar search]  (cons "Search" menu-bar-search-menu))

(when (or (featurep 'doremi-frm) (featurep 'doremi-cmd))
  (defvar menu-bar-doremi-menu (make-sparse-keymap "Do Re Mi"))
  (define-key global-map [menu-bar doremi] (cons "Do Re Mi" menu-bar-doremi-menu)))

(when (or (featurep 'frame-cmds) (featurep 'fit-frame))
  (defvar menu-bar-frames-menu (make-sparse-keymap "Frames"))
  (define-key global-map [menu-bar frames] (cons "Frames" menu-bar-frames-menu)))

;; Main menu-bar order.
(setq menu-bar-final-items
      (append (if (< emacs-major-version 22)
                  '(divider files edit buffer tools search mule)
                '(divider file edit options buffer tools search))
              (and (boundp 'menu-bar-frames-menu) '(frames))
              (and (boundp 'menu-bar-doremi-menu) '(doremi))
              '(help-menu)
              (and (fboundp 'show-tool-bar-for-one-command) '(pop-up-tool-bar))))

;;; `Frames' menu.
(when (and (featurep 'fit-frame) (not (featurep 'frame-cmds)) (eq window-system 'w32))
  (define-key menu-bar-frames-menu [maximize-frame]
    '(menu-item "Maximize Frame" maximize-frame :help "Maximize the selected frame")))

(when (boundp 'menu-bar-frames-menu)
  (define-key menu-bar-frames-menu [make-frame-on-display]
    '(menu-item "New Frame on Display..." make-frame-on-display
      :visible (fboundp 'make-frame-on-display)
      :help "Open a new frame on another display"))
  (define-key menu-bar-frames-menu [make-frame]
    '(menu-item "New Frame" make-frame-command
      :visible (fboundp 'make-frame-command)
      :help "Open a new frame"))
  (define-key menu-bar-frames-menu [delete-this-frame] ; `delete-frame' is for a special event
    '(menu-item "Delete Frame" delete-frame
      :visible (and (fboundp 'delete-frame)  (fboundp 'delete-frame-enabled-p))
      :enable (and (fboundp 'delete-frame-enabled-p)  (delete-frame-enabled-p))
      :help "Delete currently selected frame")))

(when (featurep 'fit-frame)
  (define-key menu-bar-frames-menu [fit-frame]
    '(menu-item "Fit This Frame" fit-frame :help "Resize frame to fit its selected window")))

(when (featurep 'frame-cmds)
  (define-key menu-bar-frames-menu [set-all-params-from-frame]
    '(menu-item "Set All Frame Parameters from Frame..."
      set-all-frame-alist-parameters-from-frame
      :help "Set frame parameters of a frame to their current values in frame"))
  (define-key menu-bar-frames-menu [set-params-from-frame]
    '(menu-item "Set Frame Parameter from Frame..." set-frame-alist-parameter-from-frame
      :help "Set parameter of a frame alist to its current value in frame"))
  (define-key menu-bar-frames-menu [separator-frame-1] '("--"))
  (define-key menu-bar-frames-menu [tile-frames-vertically]
    '(menu-item "Tile Frames Vertically..." tile-frames-vertically
      :help "Tile all visible frames vertically"))
  (define-key menu-bar-frames-menu [tile-frames-horizontally]
    '(menu-item "Tile Frames Horizontally..." tile-frames-horizontally
      :help "Tile all visible frames horizontally"))
  (define-key menu-bar-frames-menu [separator-frame-2] '("--"))
  (define-key menu-bar-frames-menu [toggle-max-frame-vertically]
    '(menu-item "Toggle Max Frame Vertically" toggle-max-frame-vertically
      :help "Maximize or restore the selected frame vertically"))
  (define-key menu-bar-frames-menu [toggle-max-frame-horizontally]
    '(menu-item "Toggle Max Frame Horizontally" toggle-max-frame-horizontally
      :help "Maximize or restore the selected frame horizontally"))
  (define-key menu-bar-frames-menu [toggle-max-frame]
    '(menu-item "Toggle Max Frame" toggle-max-frame
      :help "Maximize or restore the selected frame (in both directions)"))
  (define-key menu-bar-frames-menu [maximize-frame-vertically]
    '(menu-item "Maximize Frame Vertically" maximize-frame-vertically
      :help "Maximize the selected frame vertically"))
  (define-key menu-bar-frames-menu [maximize-frame-horizontally]
    '(menu-item "Maximize Frame Horizontally" maximize-frame-horizontally
      :help "Maximize the selected frame horizontally"))
  (define-key menu-bar-frames-menu [maximize-frame]
    '(menu-item "Maximize Frame" maximize-frame
      :help "Maximize the selected frame (in both directions)"))
  (define-key menu-bar-frames-menu [separator-frame-3] '("--"))
  (define-key menu-bar-frames-menu [iconify-everything]
    '(menu-item "Iconify All Frames" iconify-everything
      :help "Iconify all frames of session at once"))
  (define-key menu-bar-frames-menu [show-hide]
    '(menu-item "Hide Frames / Show Buffers" show-hide
      :help "Show, if only one frame visible; else hide.")))

;;; `Do Re Mi' menu.
(when (and (featurep 'doremi-cmd)  (boundp 'menu-bar-doremi-menu))
  (define-key menu-bar-doremi-menu [doremi-global-marks+]
    '(menu-item "Global Marks" doremi-global-marks+
      :help "Successively cycle among global marks: `up'/`down'"))
  (define-key menu-bar-doremi-menu [doremi-marks+]
    '(menu-item "Marks in Buffer" doremi-marks+
      :help "Successively cycle among marks in this buffer: `up'/`down'"))
  (define-key menu-bar-doremi-menu [doremi-bookmarks+]
    '(menu-item "Bookmarks" doremi-bookmarks+
      :help "Successively cycle among bookmarks: `up'/`down'"))
  (define-key menu-bar-doremi-menu [doremi-buffers+]
    '(menu-item "Buffers" doremi-buffers+
      :help "Successively cycle among buffers: `up'/`down'"))
  (when (fboundp 'doremi-windows+)      ; Emacs 22+
    (define-key menu-bar-doremi-menu [doremi-windows]
      '(menu-item "Windows" doremi-windows+
        :help "Successively cycle among windows: `up'/`down'"
        :enable (not (one-window-p))))))

(when (and (featurep 'thumb-frm)  (boundp 'menu-bar-doremi-menu))
  (define-key menu-bar-doremi-menu [thumfr-doremi-thumbnail-frames+]
    '(menu-item "Fisheye Frame" thumfr-doremi-thumbnail-frames+
      :help "Cycle among frames using fisheye: `up'/`down'")))
(when (and (featurep 'frame-cmds)  (boundp 'menu-bar-doremi-menu))
  (define-key menu-bar-doremi-menu [save-frame-config]
    '(menu-item "Save Frame Configuration" save-frame-config
      :help "Save current frame configuration (M-x jump-to-frame-config-register restores)")))
(when (and (featurep 'doremi-frm)  (boundp 'menu-bar-doremi-menu))
  (define-key menu-bar-doremi-menu [doremi-frame-configs+]
    '(menu-item "Frame Configurations" doremi-frame-configs+
      :help "Cycle among frame configurations recorded: `up'/`down'"))

  (define-key menu-bar-doremi-menu [doremi-fonts-separator] '("--"))
  (define-key menu-bar-doremi-menu [doremi-font+]
    '(menu-item "Font" doremi-font+
      :help "Successively cycle among fonts, choosing by name: `up'/`down'"))
  (when (fboundp 'text-scale-increase)    ; Emacs 23+.
    (define-key menu-bar-doremi-menu [doremi-buffer-font-size+]
      '(menu-item "Buffer Text Size (Zoom)" doremi-buffer-font-size+
        :help "Change text size for buffer incrementally: `up'/`down'")))
  (define-key menu-bar-doremi-menu [doremi-frame-font-size+]
    '(menu-item "Frame Font Size (Zoom)" doremi-frame-font-size+
      :help "Change font size for frame incrementally: `up'/`down'"))

  (define-key menu-bar-doremi-menu [doremi-all-frames-separator] '("--"))
  (define-key menu-bar-doremi-menu [doremi-all-frames-fg+]
    '(menu-item "All Frame Foregrounds..." doremi-all-frames-fg+
      :help "Change foreground of all frames incrementally: `up'/`down' (no undo)"))
  (define-key menu-bar-doremi-menu [doremi-all-frames-bg+]
    '(menu-item "All Frame Backgrounds..." doremi-all-frames-bg+
      :help "Change background of all frames incrementally: `up'/`down' (no undo)"))

  (define-key menu-bar-doremi-menu [doremi-frame-colors-separator] '("--"))
  (define-key menu-bar-doremi-menu [doremi-undo-last-frame-color-change]
    '(menu-item "Undo Frame Color Change" doremi-undo-last-frame-color-change
      :enable doremi-last-frame-color
      :help "Undo the last frame color change by `doremi-fg+' or `doremi-bg+'"))
  (define-key menu-bar-doremi-menu [doremi-fg-color-name+]
    '(menu-item "Frame Foreground Name..." doremi-fg-color-name+
      :help "Change frame foreground color incrementally: `up'/`down'"))
  (define-key menu-bar-doremi-menu [doremi-fg+]
    '(menu-item "Frame Foreground..." doremi-fg+
      :help "Change frame foreground color incrementally: `up'/`down'"))
  (define-key menu-bar-doremi-menu [doremi-bg-color-name+]
    '(menu-item "Frame Background Name..." doremi-bg-color-name+
      :help "Change frame background color incrementally: `up'/`down'"))
  (define-key menu-bar-doremi-menu [doremi-bg+]
    '(menu-item "Frame Background..." doremi-bg+
      :help "Change frame background color incrementally: `up'/`down'"))

  (define-key menu-bar-doremi-menu [doremi-all-faces-separator] '("--"))
  (define-key menu-bar-doremi-menu [doremi-all-faces-fg+]
    '(menu-item "All Faces - Foreground..." doremi-all-faces-fg+
      :help "Change foreground color of all faces incrementally: `up'/`down' (no undo)"))
  (define-key menu-bar-doremi-menu [doremi-all-faces-bg+]
    '(menu-item "All Faces - Background..." doremi-all-faces-bg+
      :help "Change background color of all faces incrementally: `up'/`down' (no undo)"))
  (define-key menu-bar-doremi-menu [doremi-faces-separator] '("--"))
  (define-key menu-bar-doremi-menu [doremi-undo-last-face-change]
    '(menu-item "Undo Face Color Change" doremi-undo-last-face-change
      :enable (facep 'doremi-last-face) ; Actually, it's always non-nil, so always enabled.
      :help "Undo the last face color change by Do Re Mi"))
  (define-key menu-bar-doremi-menu [doremi-face-fg-color-name+]
    '(menu-item "Face Foreground Name..." doremi-face-fg-color-name+
      :help "Change foreground color name of a face incrementally: `up'/`down'"))
  (define-key menu-bar-doremi-menu [doremi-face-fg+]
    '(menu-item "Face Foreground..." doremi-face-fg+
      :help "Change foreground color of a face incrementally: `up'/`down'"))
  (define-key menu-bar-doremi-menu [doremi-face-bg-color-name+]
    '(menu-item "Face Background Name..." doremi-face-bg-color-name+
      :help "Change background color name of a face incrementally: `up'/`down'"))
  (define-key menu-bar-doremi-menu [doremi-face-bg+]
    '(menu-item "Face Background..." doremi-face-bg+
      :help "Change background color of a face incrementally: `up'/`down'")))

(when (and (featurep 'doremi-cmd)  (boundp 'menu-bar-doremi-menu))
  (define-key menu-bar-doremi-menu [doremi-color-themes+]
    '(menu-item "Color Themes" doremi-color-themes+
      :help "Successively cycle among color themes: `up'/`down'")))

(when (and (featurep 'doremi-frm)  (boundp 'menu-bar-doremi-menu))
  (define-key menu-bar-doremi-menu [doremi-frame-params-separator] '("--"))
  (define-key menu-bar-doremi-menu [doremi-frame-vertically+]
    '(menu-item "Move Frame" doremi-frame-vertically+
      :help "Move frame incrementally: `up'/`down'/`left'/`right'"))
  (define-key menu-bar-doremi-menu [doremi-frame-height+]
    '(menu-item "Frame Size" doremi-frame-height+
      :help "Resize frame incrementally: `up'/`down'/`left'/`right'")))
(when (and (featurep 'doremi-cmd)  (boundp 'menu-bar-doremi-menu))
  (define-key menu-bar-doremi-menu [doremi-window-height+]
    '(menu-item "Window Size" doremi-window-height+
      :help "Resize window incrementally: `up'/`down'/`left'/`right'"
      :enable (not (one-window-p)))))


;;; `Files' menu.
;;

;; Remove frame stuff from `Files' menu, since we moved it to `Frames' menu.
(define-key menu-bar-file-menu [make-frame-on-display] nil)
(define-key menu-bar-file-menu [make-frame] nil)
(define-key menu-bar-file-menu [delete-this-frame] nil)

(when (< emacs-major-version 21)
  ;; Use `dlgopen-open-files' if available; else use `find-file-other-frame'.
  (define-key menu-bar-file-menu [open-file]
    (if (and (fboundp 'dlgopen-open-files) (eq system-type 'windows-nt))
        '(menu-item "Open File..." dlgopen-open-files
          :enable (not (window-minibuffer-p (frame-selected-window menu-updating-frame)))
          :help "Read a file into an Emacs buffer")
      '(menu-item "Open File..." find-file-other-frame
        :enable (not (window-minibuffer-p (frame-selected-window menu-updating-frame)))
        :help "Read a file into an Emacs buffer")))
  ;; Use other frame.
  (define-key menu-bar-file-menu [dired]
    '(menu-item "Open Directory..." dired-other-frame
      :help "Read a directory; operate on its files (Dired)"
      :enable (not (window-minibuffer-p (frame-selected-window menu-updating-frame))))))

(define-key menu-bar-file-menu [new-file] ; Add for Emacs < 22.  Rename item otherwise.
  '(menu-item "New File..." find-file
    :enable (or (not (fboundp 'menu-bar-non-minibuffer-window-p))
             (menu-bar-non-minibuffer-window-p))
    :help "Create and edit a new file"))

;;;###autoload
(defun menu-bar-create-directory (directory)
  "Create a subdirectory of `default-directory' called DIRECTORY."
  (interactive (list (read-file-name "Create directory: ")))
  (let ((dir  (directory-file-name (expand-file-name directory))))
    (make-directory dir)
    (message "Created `%s'" dir)))

(define-key-after menu-bar-file-menu [new-directory]
  '(menu-item "New Directory..." menu-bar-create-directory
    :enable (or (not (fboundp 'menu-bar-non-minibuffer-window-p))
             (menu-bar-non-minibuffer-window-p))
    :help "Create a directory")
  'new-file)

(define-key-after menu-bar-file-menu [separator-new] '("--") 'new-directory)

(define-key-after menu-bar-file-menu [bookmark]
  '(menu-item "Bookmarks" menu-bar-bookmark-map
    :help "Record locations, jump to them...")
  'separator-new)

(unless (< emacs-major-version 21)

  ;; Remove `Find' stuff from `Go To' submenu, since we moved it to `Search' menu.
  (define-key menu-bar-goto-menu [set-tags-name] nil)
  (define-key menu-bar-goto-menu [separator-tag-file] nil)
  (define-key menu-bar-goto-menu [xref-pop] nil)
  (define-key menu-bar-goto-menu [xref-apropos] nil)
  (define-key menu-bar-goto-menu [xref-find-otherw] nil)
  (define-key menu-bar-goto-menu [xref-find-def] nil)
  (define-key menu-bar-goto-menu [separator-xref] nil)

  ;; Move `Go To' menu to `File' menu.
  (define-key-after menu-bar-file-menu [goto] (cons "Go To" menu-bar-goto-menu)
    'bookmark)

  ;; Add some `Go To' items.  Rename standard items, to remove "Goto " prefix.  Reorder items.
  (define-key menu-bar-goto-menu [go-to-line]
    '(menu-item "Line..." goto-line
                :help "Read a line number and go to that line"))
  (define-key-after menu-bar-goto-menu [move-to-column]
    '(menu-item "Column (Position in Line)..." move-to-column
                :help "Read position in line and go to it.")
    'go-to-line)
  (define-key-after menu-bar-goto-menu [go-to-pos]
    '(menu-item "Buffer Position..." goto-char
                :help "Read a buffer position and go to it")
    'move-to-column)
  (define-key-after menu-bar-goto-menu [beg-of-buf]
    '(menu-item "Beginning of Buffer" beginning-of-buffer)
    'go-to-pos)
  (define-key-after menu-bar-goto-menu [end-of-buf]
    '(menu-item "End of Buffer" end-of-buffer)
    'beg-of-buf)
  (define-key-after menu-bar-goto-menu [next-error]
    '(menu-item "Next Error" next-error :enable next-error-last-buffer)
    'end-of-buf)
  (define-key-after menu-bar-goto-menu [previous-error]
    '(menu-item "Previous Error" previous-error :enable next-error-last-buffer)
    'next-error)
  (define-key-after menu-bar-goto-menu [dired-jump]
    '(menu-item "Dired for This File" dired-jump
                :visible (buffer-file-name))
    'previous-error)

  (when (boundp 'bmkp-jump-menu)      ; Defined in `bookmark+-key.el'.
    (define-key menu-bar-goto-menu [bmkp-jump] (cons "Bookmark" bmkp-jump-menu))))


(define-key-after menu-bar-file-menu [separator-open] '("--")
  (if (< emacs-major-version 21) 'bookmark 'goto))

(define-key-after menu-bar-file-menu [exec-cmd]
  '(menu-item "Execute Command" execute-extended-command
    :help "Prompts for a command to execute")
  'separator-exit)
(define-key-after menu-bar-file-menu [repeat-cmd]
  '(menu-item "Repeat Earlier Command" repeat-complex-command
    :help "Edit and re-evaluate last complex command")
  'exec-cmd)

(define-key-after menu-bar-file-menu [separator-execute] '("--") 'repeat-cmd)
(define-key-after menu-bar-file-menu [exit-emacs]
  '(menu-item "Exit Emacs" save-buffers-kill-emacs
    :help "Save unsaved buffers, then exit" :keys "C-x C-c")
  'separator-execute)


;; REPLACE ORIGINAL in `menu-bar.el'.
;;
;; Delete buffer's windows as well.
;;
;;;###autoload
(defun kill-this-buffer ()
  "Delete the current buffer and delete all of its windows.
But if invoked in the minibuffer just invoke `abort-recursive-edit'."
  (interactive)
  (cond ((and (fboundp 'menu-bar-menu-frame-live-and-visible-p) ; Emacs 22+
              (not (menu-bar-menu-frame-live-and-visible-p))))
        ((or (not (fboundp 'menu-bar-non-minibuffer-window-p))
             (menu-bar-non-minibuffer-window-p)) ; Emacs 22+
         (if (and (boundp 'sub-kill-buffer-and-its-windows) ; In `setup-keys.el'.
                  sub-kill-buffer-and-its-windows
                  (fboundp 'kill-buffer-and-its-windows))
             (kill-buffer-and-its-windows (current-buffer)) ;`misc-cmds.el'
           (kill-buffer (current-buffer))))
        (t
         (abort-recursive-edit))))


;; Remove search stuff from `Tools' menu, since we moved it to `Search' menu.
(define-key menu-bar-tools-menu [grep] nil)

;; `Ediff' submenu of `Tools' menu.
(when (fboundp 'vc-ediff)
  (define-key menu-bar-tools-menu [compare]
    '(menu-item "Compare" menu-bar-ediff-menu ; Remove "(Ediff)".
      :help "Display differences between files/directories")))
(define-key menu-bar-ediff-menu [ediff-revision] ; Defined in `vc+.el'.
  '(menu-item "File with Revision..." vc-ediff :help "Compare file versions using `ediff'"))
(define-key-after menu-bar-ediff-menu [vc-diff] ; Defined in `vc+.el'.
  '(menu-item "File with Revision using Diff" vc-diff
    :help "Display diffs between file versions using `diff'")
  'ediff-revision)
(define-key-after menu-bar-ediff-menu [diff]
  '(menu-item "Two Files using Diff..." diff ; `diff+.el'
    :help "Display diffs between two files using `diff'")
  'ediff-files)

(define-key menu-bar-edit-menu [undo]
  '(menu-item "Undo" undo :help "Undo last operation"
    :enable (and (not buffer-read-only)
             (not (eq t buffer-undo-list))
             (if (eq last-command 'undo) pending-undo-list (consp buffer-undo-list)))))
;;--------------------
(define-key-after menu-bar-edit-menu [separator-edit-cut] '("--") 'undo)
(define-key-after menu-bar-edit-menu [cut]
  '(menu-item "Cut" kill-region
    :help "Cut (kill) text in nonempty region between mark and current position"
    :enable (and (not buffer-read-only)  (menu-barp-nonempty-region-p)))
  'separator-edit-cut)
(define-key-after menu-bar-edit-menu [copy]
  '(menu-item "Copy" menu-bar-kill-ring-save
    :help "Copy text in nonempty region between mark and current position"
    :enable (menu-barp-nonempty-region-p)
    :keys "\\[kill-ring-save]")
  'cut)

;; Use `x-get-selection', not `x-selection-exists-p', because of Emacs bugs on Windows etc.
;; See thread "x-selection-exists-p  vs  x-get-selection", emacs-devel@gnu.org, 2008-05-04.
;;
;; And Emacs 25 renamed `x-'...
(define-key-after menu-bar-edit-menu [paste]
  '(menu-item "Paste" yank
    :help "Paste (yank) text most recently cut/copied"
    :enable (and (not buffer-read-only)
             (or
              (and (fboundp 'gui-get-selection) ; Emacs 25.1+
               select-enable-clipboard
               (gui-get-selection 'CLIPBOARD))
              (and (fboundp 'x-get-selection)
               x-select-enable-clipboard
               (x-get-selection 'CLIPBOARD))
              (if (featurep 'ns)        ; Like `paste-from-menu'
                  (cdr yank-menu)
                kill-ring))))
  'copy)
(when (or (fboundp 'secondary-yank|select|move|swap)  (fboundp 'secondary-dwim))

  (define-key-after menu-bar-edit-menu [secondary-yank|select|move|swap] ; In `second-sel.el'
    `(menu-item "Paste Secondary" ,(if (fboundp 'secondary-yank|select|move|swap)
                                       'secondary-yank|select|move|swap
                                       'secondary-dwim)
      :help "Paste (yank) secondary selection."
      :enable (and
               (not buffer-read-only)
               (or
                (fboundp 'gui-get-selection) ; Emacs 25.1+
                (fboundp 'x-get-selection))
               (condition-case nil      ; Ignore - Emacs 21 raises error internally.
                   (if (fboundp 'gui-get-selection) ; Emacs 25.1+
                       (gui-get-selection 'SECONDARY)
                     (x-get-selection 'SECONDARY))
                 (error nil)))
      :keys ,(if (fboundp 'secondary-yank|select|move|swap)
                 "\\[secondary-yank|select|move|swap]"
                 "\\[secondary-dwim]"))
    'paste)
  (define-key-after menu-bar-edit-menu [primary-to-secondary] ; In `second-sel.el'
    `(menu-item "Move Secondary to Region" primary-to-secondary
      :help "Make the region in the current buffer into the secondary selection."
      :enable (menu-barp-nonempty-region-p)
      :keys ,(if (fboundp 'secondary-yank|select|move|swap)
                 "C-1 \\[secondary-yank|select|move|swap]"
                 "C-1 \\[secondary-dwim]"))
    'secondary-yank|select|move|swap)
  (define-key-after menu-bar-edit-menu [secondary-swap-region] ; In `second-sel.el'
    `(menu-item "Swap Region and Secondary" secondary-swap-region
      :help "Make region into secondary selection, and vice versa."
      :enable (and
               (or
                (fboundp 'gui-get-selection) ; Emacs 25.1+
                (fboundp 'x-get-selection))
               (condition-case nil      ; Ignore - Emacs 21 raises error internally.
                   (if (fboundp 'gui-get-selection) ; Emacs 25.1+
                       (gui-get-selection 'SECONDARY)
                     (x-get-selection 'SECONDARY))
                 (error nil)))
      :keys ,(if (fboundp 'secondary-yank|select|move|swap)
                 "C-- \\[secondary-yank|select|move|swap]"
                 "C-- \\[secondary-dwim]"))
    'primary-to-secondary)
  (define-key-after menu-bar-edit-menu [secondary-to-primary] ; In `second-sel.el'
    `(menu-item "Select Secondary as Region" secondary-to-primary
      :help "Go to the secondary selection and select it as the active region."
      :enable (and (or
                    (fboundp 'gui-get-selection) ; Emacs 25.1+
                    (fboundp 'x-get-selection))
               (condition-case nil      ; Ignore - Emacs 21 raises error internally.
                   (if (fboundp 'gui-get-selection) ; Emacs 25.1+
                       (gui-get-selection 'SECONDARY)
                     (x-get-selection 'SECONDARY))
                 (error nil)))
      :keys ,(if (fboundp 'secondary-yank|select|move|swap)
                 "C-0 \\[secondary-yank|select|move|swap]"
                 "C-0 \\[secondary-dwim]"))
    'secondary-swap-region))

(defvar yank-menu (cons "Select Yank" nil))
(fset 'yank-menu (cons 'keymap yank-menu))

(define-key-after menu-bar-edit-menu [select-paste]
  '(menu-item "Select and Paste" yank-menu :help "Paste (yank) text cut or copied earlier"
    :enable (and (not buffer-read-only)  (cdr yank-menu)))
  (if (fboundp 'secondary-to-primary) 'secondary-to-primary 'paste))
(define-key-after menu-bar-edit-menu [clear]
  '(menu-item "Clear" delete-region
    :help "Delete the text in region between mark and current position"
    :enable (and  (not buffer-read-only)  (menu-barp-nonempty-region-p)
             (not (mouse-region-match))))
  'select-paste)
(define-key-after menu-bar-edit-menu [mark-whole-buffer]
  '(menu-item "Select All" mark-whole-buffer
    :help "Select everything in buffer (for a subsequent cut/copy)")
  'clear)

;;--------------------
(define-key-after menu-bar-edit-menu [separator-edit-delete-lines] '("--") 'mark-whole-buffer)

(define-key-after menu-bar-edit-menu [flush-lines] ; In `replace+.el' for Emacs 20.
  '(menu-item "Delete Matching Lines..." flush-lines
    :help "Delete all lines after cursor that match a regular expression"
    :enable (not buffer-read-only))
  'separator-edit-delete-lines)
(define-key-after menu-bar-edit-menu [keep-lines] ; In `replace+.el' for Emacs 20.
  '(menu-item "Delete Non-Matching Lines..." keep-lines
    :help "Delete all lines after cursor that do not match a regular expression"
    :enable (not buffer-read-only))
  'flush-lines)
;;--------------------
(define-key-after menu-bar-edit-menu [separator-edit-select-all] '("--") 'keep-lines)

(defvar menu-bar-edit-fill-menu (make-sparse-keymap "Fill"))
(define-key-after menu-bar-edit-menu [props]
  '(menu-item "Text Properties" facemenu-menu :help "Change properties of text in region"
    :enable (not buffer-read-only))
  'separator-edit-select-all)
(define-key-after menu-bar-edit-menu [fill]
  `(menu-item "Fill" ,menu-bar-edit-fill-menu
    :help "Fill text" :enable (not buffer-read-only))
  'props)

(defvar menu-bar-edit-region-menu (make-sparse-keymap "Edit Region"))
(defalias 'menu-bar-edit-region-menu (symbol-value 'menu-bar-edit-region-menu))
(define-key-after menu-bar-edit-menu [region]
  '(menu-item "Edit Region" menu-bar-edit-region-menu
    :help "Edit the nonempty region"
    :enable (and (not buffer-read-only)  (menu-barp-nonempty-region-p)))
  'fill)
(defvar menu-bar-edit-sort-menu (make-sparse-keymap "Sort Region"))
(defalias 'menu-bar-edit-sort-menu (symbol-value 'menu-bar-edit-sort-menu))
(define-key-after menu-bar-edit-menu [sort]
  '(menu-item "Sort Region" menu-bar-edit-sort-menu
    :help "Sort the nonempty region"
    :enable (and (not buffer-read-only)  (menu-barp-nonempty-region-p)))
  'region)

;; `Edit' > `Fill' submenu.
(define-key menu-bar-edit-fill-menu [fill-nonuniform-para]
  '(menu-item "Fill Non-Uniform ¶s" fill-nonuniform-paragraphs
    :help "Fill paragraphs in nonempty region, allowing varying indentation"
    :enable (and (not buffer-read-only)  (menu-barp-nonempty-region-p))))
(define-key menu-bar-edit-fill-menu [fill-indiv-para]
  '(menu-item "Fill Uniform ¶s" fill-individual-paragraphs
    :help "Fill paragraphs of uniform indentation within nonempty region"
    :enable (and (not buffer-read-only)  (menu-barp-nonempty-region-p))))
(define-key menu-bar-edit-fill-menu [fill-region]
  '(menu-item "Fill ¶s" fill-region
    :help "Fill text in the nonempty region to fit between left and right margin"
    :enable (and (not buffer-read-only)  (menu-barp-nonempty-region-p))))
(define-key menu-bar-edit-fill-menu [fill-para]
  '(menu-item "Fill ¶" fill-paragraph-ala-mode
    :help "Fill the paragraph, doing what `M-q' does (if bound)"
    :enable (not buffer-read-only)))

(defun fill-paragraph-ala-mode (&optional arg)
  "Do whatever `M-q' does, if it is bound.  Else, `fill-paragraph'.
Normally, this fills a paragraph according to the current major mode.
For example, in C Mode, `M-q' is normally bound to `c-fill-paragraph',
and in Lisp Mode, `M-q' is normally bound to `lisp-fill-paragraph'.
A prefix argument means justify as well as fill."
  (interactive "P")
  (let (map cmd)
    (or (and (setq map  (current-local-map))
             (setq cmd  (lookup-key map "\M-q"))
             (funcall cmd arg))
        (and (setq map  (current-global-map))
             (setq cmd  (lookup-key map "\M-q"))
             (funcall cmd arg))
        (fill-paragraph arg))))

;; `Edit' > `Region' submenu.
(when (fboundp 'unaccent-region)
  (define-key menu-bar-edit-region-menu [unaccent-region]
    '(menu-item "Unaccent" unaccent-region ; Defined in `unaccent'.
      :help "Replace accented chars in the region by unaccented chars")))
(define-key menu-bar-edit-region-menu [capitalize-region]
  '(menu-item "Capitalize" capitalize-region
    :help "Capitalize (initial caps) words in the region"))
(define-key menu-bar-edit-region-menu [downcase-region]
  '(menu-item "Downcase" downcase-region :help "Make words in the region lower-case"))
(define-key menu-bar-edit-region-menu [upcase-region]
  '(menu-item "Upcase" upcase-region :help "Make words in the region upper-case"))
;;--------------------
(define-key menu-bar-edit-region-menu [separator-chars] '("--"))
(define-key menu-bar-edit-region-menu [untabifyn]
  '(menu-item "Untabify" untabify :help "Convert all tabs in the region to multiple spaces"))
(define-key menu-bar-edit-region-menu [tabify-region]
  '(menu-item "Tabify" tabify
    :help "Convert multiple spaces in the region to tabs when possible"))
(define-key menu-bar-edit-region-menu [comment-region]
  '(menu-item "(Un)Comment" comment-region :help "Comment or uncomment the region"))
(when (fboundp 'comment-region-lines)
  (define-key menu-bar-edit-region-menu [comment-region-lines]
    '(menu-item "(Un)Comment Lines" comment-region-lines
      :help "Comment or uncomment each line in the region")))
(define-key menu-bar-edit-region-menu [center-region]
  '(menu-item "Center" center-region
    :help "Center each nonblank line that starts in the region"))
(define-key menu-bar-edit-region-menu [indent-rigidly-region]
  '(menu-item "Rigid Indent" indent-rigidly :help "Indent each line that starts in the region"))
(define-key menu-bar-edit-region-menu [indent-region]
  '(menu-item "Column/Mode Indent" indent-region
    :help "Indent each nonblank line in the region"))

;;--------------------
(define-key menu-bar-edit-region-menu [separator-indent] '("--"))
(define-key menu-bar-edit-region-menu [abbrevs-region]
  '(menu-item "Expand Abbrevs..." expand-region-abbrevs
    :help "Expand each abbrev in the region (with confirmation)"))
(define-key menu-bar-edit-region-menu [macro-region]
  '(menu-item "Exec Keyboard Macro" apply-macro-to-region-lines ; In `macros+.el'.
    :help "Run keyboard macro at start of each line in the region"))

;; `Edit' > `Sort' submenu.
(define-key menu-bar-edit-sort-menu [sort-regexp-fields]
  '(menu-item "Regexp Fields..." sort-regexp-fields :help "Sort the region lexicographically"))
(define-key menu-bar-edit-sort-menu [sort-pages]
  '(menu-item "Pages" sort-pages :help "Sort pages in the region alphabetically"))
(define-key menu-bar-edit-sort-menu [sort-paragraphs]
  '(menu-item "Paragraphs" sort-paragraphs :help "Sort paragraphs in the region alphabetically"))
(define-key menu-bar-edit-sort-menu [sort-numeric-fields]
  '(menu-item "Numeric Field" sort-numeric-fields
    :help "Sort lines in the region numerically by the Nth field"))
(define-key menu-bar-edit-sort-menu [sort-fields]
  '(menu-item "Field" sort-fields
    :help "Sort lines in the region lexicographically by the Nth field"))
(define-key menu-bar-edit-sort-menu [sort-columns]
  '(menu-item "Columns" sort-columns
    :help "Sort lines in the region alphabetically, by a certain range of columns"))
(define-key menu-bar-edit-sort-menu [sort-lines]
  '(menu-item "Lines" sort-lines :help "Sort lines in the region alphabetically"))
(define-key menu-bar-edit-sort-menu [reverse-region]
  '(menu-item "Reverse" reverse-region :help "Reverse the order of the selected lines"))


;;; `Search' menu.
(when (< emacs-major-version 22)
  (defun nonincremental-repeat-word-search-forward ()
    "Search forward for the previous search string."
    (interactive)
    (word-search-forward (car search-ring)))

  (defun nonincremental-repeat-word-search-backward ()
    "Search backward for the previous search string."
    (interactive)
    (word-search-backward (car search-ring)))

  (define-key menu-bar-search-menu [reminder6] '(" " . %$>disabled@!^))
  (define-key menu-bar-search-menu [reminder5]
    (cons (substitute-command-keys
           "  Incr. Regexp Search: \\[isearch-forward-regexp], \
\\[isearch-backward-regexp]") '%$>disabled@!^))
  (define-key menu-bar-search-menu [reminder4]
    (cons (substitute-command-keys
           " Word Search: \\[isearch-forward] RET C-w, \\[isearch-backward] \
RET C-w") '%$>disabled@!^))
  (define-key menu-bar-search-menu [reminder3]
    (cons (substitute-command-keys
           "Incr. Search: \\[isearch-forward], \\[isearch-backward]  \
\(\\[isearch-forward] C-h: Help)") '%$>disabled@!^))
  (define-key menu-bar-search-menu [reminder2]
    '("           ** Reminder **" . %$>disabled@!^))
  (define-key menu-bar-search-menu [reminder1] '(" " . %$>disabled@!^))
  (put '%$>disabled@!^ 'menu-enable '(not t))
  (when (boundp 'menu-bar-i-search-menu)
    (define-key menu-bar-search-menu [i-search]
      '(menu-item "Incremental Search" menu-bar-i-search-menu
        :help "Incremental Search finds partial matches while you type the search \
string.\nIt is most convenient from the keyboard.  Try it!")))
  ;;--------------------
  (define-key menu-bar-search-menu [separator-search-reminder] '("--")))

(when (fboundp 'multi-occur-in-matching-buffers) ; Emacs 22+
  (define-key menu-bar-search-menu [multi-occur-in-matching-buffers]
    '(menu-item "Buffers Regexp for Bufname Regexp..." multi-occur-in-matching-buffers
      :help "Regexp search buffers whose names match another regexp"))
  (define-key menu-bar-search-menu [multi-occur]
    '(menu-item "Buffers Regexp..." multi-occur
      :help "Regexp search buffers and collect output for navigating to matches")))
(define-key menu-bar-search-menu [occur]
  '(menu-item "This Buffer Regexp..." occur
    :help "Regexp search this buffer and collect output for navigating to matches"))
(define-key menu-bar-search-menu [grep]
  '(menu-item "Files Regexp (`grep')..." grep
    :help "Regexp search files using `grep' and collect output for navigating to matches"))

;;--------------------
(define-key menu-bar-search-menu [separator-search-multiple] '("--"))

(defvar menu-bar-search-tags-menu (make-sparse-keymap "Tags"))
(defalias 'menu-bar-search-tags-menu (symbol-value 'menu-bar-search-tags-menu))
(define-key menu-bar-search-menu [tags] (cons "Tags" menu-bar-search-tags-menu))

(defvar menu-bar-search-xref-menu (make-sparse-keymap "Xref"))
(defalias 'menu-bar-search-xref-menu (symbol-value 'menu-bar-search-xref-menu))
(define-key menu-bar-search-menu [xref] (cons "Xref" menu-bar-search-xref-menu))

(defvar menu-bar-search-replace-menu (make-sparse-keymap "Replace"))
(defalias 'menu-bar-search-replace-menu (symbol-value 'menu-bar-search-replace-menu))
(define-key menu-bar-search-menu [replace] (cons "Replace" menu-bar-search-replace-menu))

(when (< emacs-major-version 22)
  ;;--------------------
  (define-key menu-bar-search-menu [separator-search-word] '("--"))
  (define-key menu-bar-search-menu [repeat-word-search-back]
    '(menu-item "             Again" nonincremental-repeat-word-search-backward
      :help "Search backward again for the same word"))
  (define-key menu-bar-search-menu [word-search-back]
    '(menu-item "     Backward..." word-search-backward
      :help "Search backward, ignoring differences in puncuation"))
  (define-key menu-bar-search-menu [repeat-word-search-fwd]
    '(menu-item "             Again" nonincremental-repeat-word-search-forward
      :help "Search forward again for the same word"))
  (define-key menu-bar-search-menu [word-search-fwd]
    '(menu-item "Word Forward..." word-search-forward
      :help "Search forward, ignoring differences in punctuation"))
  ;;--------------------
  (define-key menu-bar-search-menu [separator-search-re] '("--"))
  (define-key menu-bar-search-menu [repeat-regexp-back]
    '(menu-item "             Again" nonincremental-repeat-re-search-backward
      :help "Search forward again for the same regular expression"))
  (define-key menu-bar-search-menu [re-search-backward]
    '(menu-item "     Backward..." nonincremental-re-search-backward
      :help "Search backward for a regular expression"))
  (define-key menu-bar-search-menu [repeat-regexp-fwd]
    '(menu-item "             Again" nonincremental-repeat-re-search-forward
      :help "Search forward again for the same regular expression"))
  (define-key menu-bar-search-menu [re-search-forward]
    '(menu-item "Regexp Forward..." nonincremental-re-search-forward
      :help "Search forward for a regular expression"))
  ;;--------------------
  (define-key menu-bar-search-menu [separator-search] '("--"))
  (define-key menu-bar-search-menu [repeat-search-back]
    '(menu-item "             Again" nonincremental-repeat-search-backward
      :help "Repeat last search backward"
      :enable (or (not (boundp 'menu-bar-last-search-type))
               (and (eq menu-bar-last-search-type 'string) search-ring)
               (and (eq menu-bar-last-search-type 'regexp) regexp-search-ring))))
  (define-key menu-bar-search-menu [search-backward]
    '(menu-item "Backward..." nonincremental-search-backward
      :help "Search backward for a string"))
  (define-key menu-bar-search-menu [repeat-search-fwd]
    '(menu-item "             Again" nonincremental-repeat-search-forward
      :help "Repeat last search forward"
      :enable (or (not (boundp 'menu-bar-last-search-type))
               (and (eq menu-bar-last-search-type 'string) search-ring)
               (and (eq menu-bar-last-search-type 'regexp) regexp-search-ring))))
  (define-key menu-bar-search-menu [search-forward]
    '(menu-item "Forward..." nonincremental-search-forward :help "Search forward for a string")))


;;; `Search' > `Xref' submenu.
(when (boundp 'menu-bar-search-xref-menu)

  (define-key menu-bar-search-xref-menu [xref-pop]
    '(menu-item "Back" xref-pop-marker-stack
                :visible (and (featurep 'xref)  (not (xref-marker-stack-empty-p)))
                :help "Back to the position of the last search"))
  (define-key menu-bar-search-xref-menu [xref-apropos]
    '(menu-item "Find Apropos..." xref-find-apropos
                :help "Find function/variables whose names match regexp"))
  (define-key menu-bar-search-xref-menu [xref-find-otherw]
    '(menu-item "Find Definition in Other Window..." xref-find-definitions-other-window
                :help "Find tags matching a regexp"))
  (define-key menu-bar-search-xref-menu [xref-find-def]
    '(menu-item "Find Definition..." xref-find-definitions
                :help "Find definition of function or variable")))


;;; `Search' > `Nonincremental Search' submenu.
(unless (< emacs-major-version 22)

  (defun nonincremental-repeat-search-forward ()
    "Search forward for the previous search string or regexp."
    (interactive)
    (cond ((and (eq menu-bar-last-search-type 'string) search-ring)
           (search-forward (car search-ring)))
          ((and (eq menu-bar-last-search-type 'regexp) regexp-search-ring)
           (re-search-forward (car regexp-search-ring)))
          ((and (eq menu-bar-last-search-type 'word) search-ring)
           (word-search-forward (car search-ring)))
          (t (error "No previous search"))))

  (defun nonincremental-repeat-search-backward ()
    "Search backward for the previous search string or regexp."
    (interactive)
    (cond ((and (eq menu-bar-last-search-type 'string) search-ring)
           (search-backward (car search-ring)))
          ((and (eq menu-bar-last-search-type 'regexp) regexp-search-ring)
           (re-search-backward (car regexp-search-ring)))
          ((and (eq menu-bar-last-search-type 'word) search-ring)
           (word-search-backward (car search-ring)))
          (t (error "No previous search"))))

  (defun menu-bar-word-search-forward (word)
    "Search forward, ignoring differences in punctuation."
    (interactive "sSearch for word: ")
    (setq menu-bar-last-search-type 'word)
    (if (equal word "")
        (word-search-forward (car search-ring))
      (isearch-update-ring word nil)
      (word-search-forward word)))

  (defun menu-bar-word-search-backward (word)
    "Search backward, ignoring differences in punctuation."
    (interactive "sSearch for word: ")
    (setq menu-bar-last-search-type 'word)
    (if (equal word "")
        (word-search-backward (car search-ring))
      (isearch-update-ring word nil)
      (word-search-backward word)))

  (defvar menu-bar-non-i-search-menu
    (make-sparse-keymap "Nonincremental Search"))

  (define-key menu-bar-non-i-search-menu [repeat-search-back]
    '(menu-item "     Backward" nonincremental-repeat-search-backward
                :enable (or (and (memq menu-bar-last-search-type '(string word)) search-ring)
                            (and (eq menu-bar-last-search-type 'regexp) regexp-search-ring))
                :help "Repeat last nonincremental search backward"))
  (define-key menu-bar-non-i-search-menu [repeat-search-fwd]
    '(menu-item "Repeat Forward" nonincremental-repeat-search-forward
                :enable (or (and (memq menu-bar-last-search-type '(string word)) search-ring)
                            (and (eq menu-bar-last-search-type 'regexp) regexp-search-ring))
                :help "Repeat last nonincremental search forward"))
  ;;--------------------
  (define-key menu-bar-non-i-search-menu [separator-repeat-search] '(menu-item "--"))
  (define-key menu-bar-non-i-search-menu [menu-bar-word-search-backward]
    '(menu-item "     Backward..." menu-bar-word-search-backward
                :help "Search backward nonincrementally, ignoring differences in punctuation"
                :keys "M-s w C-r RET"))
  (define-key menu-bar-non-i-search-menu [menu-bar-word-search-forward]
    '(menu-item "Word Forward..." menu-bar-word-search-forward
                :help "Search forward nonincrementally, ignoring differences in punctuation"
                :keys "M-s w RET"))
  (define-key menu-bar-non-i-search-menu [re-search-backward]
    '(menu-item "     Backward..." nonincremental-re-search-backward
                :help "Search backward nonincrementally for a regular expression"
                :keys "C-M-r RET"))
  (define-key menu-bar-non-i-search-menu [re-search-forward]
    '(menu-item "Regexp Forward..." nonincremental-re-search-forward
                :help "Search forward nonincrementally for a regular expression"
                :keys "C-M-s RET"))
  (define-key menu-bar-non-i-search-menu [search-backward]
    '(menu-item "     Backward..." nonincremental-search-backward
                :help "Search backward nonincrementally for a string"
                :keys "C-r RET"))
  (define-key menu-bar-non-i-search-menu [search-forward]
    '(menu-item "Forward..." nonincremental-search-forward
                :help "Search forward nonincrementally for a string"
                :keys "C-s RET"))
  (define-key menu-bar-search-menu [non-i-search]
    (list 'menu-item "Nonincremental Search" menu-bar-non-i-search-menu)))


;;; `Search' > `Incremental Search' submenu.
(unless (< emacs-major-version 22)

  (define-key menu-bar-i-search-menu [isearch-backward-regexp]
    '(menu-item "     Backward..." isearch-backward-regexp
                :help "Search backwards for a regular expression as you type it"))
  (define-key menu-bar-i-search-menu [isearch-forward-regexp]
    '(menu-item "Regexp Forward..." isearch-forward-regexp
                :help "Search forward for a regular expression as you type it"))
  (define-key menu-bar-i-search-menu [isearch-backward]
    '(menu-item "     Backward..." isearch-backward
                :help "Search backwards for a literal string as you type it"))
  (define-key menu-bar-i-search-menu [isearch-forward]
    '(menu-item "Forward..." isearch-forward
                :help "Search forward for a literal string as you type it"))
  (define-key menu-bar-search-menu [i-search]
    (list 'menu-item "Incremental Search" menu-bar-i-search-menu))
  ;;--------------------
  (define-key menu-bar-search-menu [separator-search-replace] '("--")))


;;; `Search' > `Tags' submenu.
(define-key menu-bar-search-tags-menu [set-tags-name]
  '(menu-item "Set Tags File Name..." visit-tags-table
    :help "Tell Tags commands which tag table file to use"))
(define-key menu-bar-search-tags-menu [apropos-tags]
  '(menu-item "Tags Apropos..." tags-apropos :help "Find tags matching a regexp"))
;----------------------
(define-key menu-bar-search-tags-menu [separator-tags-misc] '("--"))
(define-key menu-bar-search-tags-menu [tags-continue]
  `(menu-item "    Continue Search/Replace" ,(if (featurep 'filecl-loop)
                                                 'filecl-loop-continue ; Emacs 27+
                                               'tags-cl-loop-continue) ; Emacs < 27
              :help "Continue last tags search or replace operation"
              :enable (or (and (featurep 'filecl-loop) ; Emacs 27+
                               (not (eq filecl-loop--operate-function 'ignore)))
                          (< emacs-major-version 27))))
(define-key menu-bar-search-tags-menu [tags-search]
  '(menu-item "Search Tagged Files..." tags-search
    :help "Search for a regexp in all tagged files"))
(define-key menu-bar-search-tags-menu [find-tag-regexp]
  '(menu-item "Find Tag Regexp..." find-tag-regexp
    :help "Find tag that matches a regular expression"))
;----------------------
(define-key menu-bar-search-tags-menu [separator-tags-regexp] '("--"))

(unless (fboundp 'menu-bar-next-tag-other-window)
  (defun menu-bar-next-tag-other-window ()
    "Find the next definition of the tag already specified."
    (interactive)
    (find-tag-other-window nil t)))

(define-key menu-bar-search-tags-menu [next-tag-other-window]
  '(menu-item "Find Next Tag" menu-bar-next-tag-other-window
    :help "Find next tag name"
    :enable (and (boundp 'tags-location-ring) (not (ring-empty-p tags-location-ring)))))
(define-key menu-bar-search-tags-menu [find-tag-other-window]
  '(menu-item "Find Tag..." find-tag-other-window
    :help "Find tag whose name matches input string"))

;; `Replace' submenu
(define-key menu-bar-search-replace-menu [replace-regexp]
  '(menu-item "       Regexp..." replace-regexp
    :help "Replace things after cursor that match regexp"
    :enable (not buffer-read-only)))
(define-key menu-bar-search-replace-menu [replace-string]
  '(menu-item "Global..." replace-string :help "Replace string, with no confirmation"
    :enable (not buffer-read-only)))
;;--------------------
(define-key menu-bar-search-replace-menu [separator-search-replace-global] '("--"))
(define-key menu-bar-search-replace-menu [tags-repl-continue]
  `(menu-item "                Continue Search/Replace" ,(if (featurep 'filecl-loop)
                                                             'filecl-loop-continue ; Emacs 27+
                                                           'tags-cl-loop-continue) ; Emacs < 27
              :help "Continue last tags search or replace operation"
              :enable (or (and (featurep 'filecl-loop) ; Emacs 27+
                               (not (eq filecl-loop--operate-function 'ignore)))
                          (< emacs-major-version 27))))
(define-key menu-bar-search-replace-menu [tags-query-replace]
  '(menu-item "            Tags..." tags-query-replace
              :help "Replace a regexp in tagged files, with confirmation"))

(define-key menu-bar-search-replace-menu [map-query-replace-regexp]
  '(menu-item "            Map..." map-query-replace-regexp
    :help "Replace regexp matches with various strings, in rotation."
    :enable (not buffer-read-only)))
(define-key menu-bar-search-replace-menu [query-replace-regexp]
  '(menu-item "      Regexp..." query-replace-regexp
    :help "Replace regular expression interactively, ask about each occurrence"
    :enable (not buffer-read-only)))

(define-key menu-bar-search-replace-menu [query-replace]
;;   (if (fboundp 'query-replace-w-options) ; Bind it in `replace+.el' now, not here.
;;       '(menu-item "Query" query-replace-w-options
;;         :help "Replace string interactively, ask about each occurrence"
;;         :enable (not buffer-read-only))
  '(menu-item "Query" query-replace
    :help "Replace string interactively, ask about each occurrence"
    :enable (not buffer-read-only)))


;;; `Help' menu.

;;; General help
(define-key menu-bar-help-menu [separator-genl-help] '("--"))
(when (fboundp 'save-*Help*-buffer)
  (define-key menu-bar-help-menu [save-*Help*-buffer]
    '(menu-item "Save *Help* Buffer" save-*Help*-buffer ; In `help+20.el'.
      :help "Rename *Help* buffer as new buffer *Help*<N>, N=2,3....")))
(when (fboundp 'show-*Help*-buffer)
  (define-key menu-bar-help-menu [show-*Help*-buffer]
    '(menu-item "Show *Help* Buffer" show-*Help*-buffer ; In `frame-cmds.el'
      :help "Raise a frame showing buffer *Help*"
      :enable (and (get-buffer "*Help*") (fboundp 'frames-on) ; In `frame-cmds.el'
               (frames-on (get-buffer "*Help*"))))))
(define-key menu-bar-help-menu [help-for-help]
  '(menu-item "Help on Help..." help-for-help :help "Emacs main help command"))

;;; Remove some default bindings
(define-key menu-bar-help-menu [finder-by-keyword] nil)
(define-key menu-bar-help-menu [emacs-tutorial] nil)
(when (>= emacs-major-version 21)
  (define-key menu-bar-help-menu [emacs-tutorial-language-specific] nil)
  (define-key menu-bar-help-menu [emacs-problems] nil)
  (define-key menu-bar-help-menu [sep1] nil)
  (define-key menu-bar-help-menu [emacs-manual] nil))
(define-key menu-bar-help-menu [sep2] nil)
(define-key menu-bar-help-menu [emacs-faq] nil)
(define-key menu-bar-help-menu [emacs-news] nil)


;;; `Whoops!?' submenu
(defvar menu-bar-whereami-menu (make-sparse-keymap "Whoops!?"))
(define-key menu-bar-help-menu [whereami]
  (cons "Whoops!?" menu-bar-whereami-menu))
(define-key menu-bar-whereami-menu [view-lossage]
  '(menu-item "What did I do !?" view-lossage :help "Display last 100 input keystrokes"))
(define-key menu-bar-whereami-menu [top-level]
  '(menu-item "Back to Top Level" top-level :help "Exit all recursive editing levels"))
(define-key menu-bar-whereami-menu [keyboard-quit]
  '(menu-item "Cancel Current Action" keyboard-quit :help "Quit any operation in progress"))

;;; `Apropos' submenu
(defvar menu-bar-apropos-menu (make-sparse-keymap "Apropos"))
(define-key-after menu-bar-help-menu [apropos] (cons "Apropos" menu-bar-apropos-menu)
                  'separator-genl-help)
;; Wipe out standard (Emacs 22+) Apropos menu and define new Apropos menu
;; The names are different so we don't need to specify the order (otherwise existing order rules)
(define-key menu-bar-apropos-menu [apropos-tags]
  '(menu-item "Tags..." tags-apropos :help "Find tags matching a regexp"))
(define-key menu-bar-apropos-menu [apropos-documentation] nil)
(define-key menu-bar-apropos-menu [apropos-doc]
  '(menu-item "Symbol Descriptions (Doc)..." apropos-documentation
    :help "Find functions and variables whose doc string matches a regexp"))
(define-key menu-bar-apropos-menu [apropos] nil)
(define-key menu-bar-apropos-menu [apropos-symbol]
  '(menu-item "Symbols..." apropos :help "Find symbols whose name matches a regexp"))
(when (fboundp 'apropos-local-variable)
  (define-key menu-bar-apropos-menu [apropos-local-value]
    '(menu-item "Buffer-Local Variable Values..." apropos-local-value
      :help "Find buffer-local variables whose values match a pattern")))
(when (fboundp 'apropos-local-variable)
  (define-key menu-bar-apropos-menu [apropos-local-variable]
    '(menu-item "Buffer-local Variables..." apropos-local-variable
      :help "Find buffer-local variables whose names match a pattern")))
(define-key menu-bar-apropos-menu [apropos-value] nil)
(define-key menu-bar-apropos-menu [apropos-var-value]
  '(menu-item "Variable Values..." apropos-value
    :help "Find variables whose values match a pattern"))
(define-key menu-bar-apropos-menu [apropos-variables] nil)
(define-key menu-bar-apropos-menu [apropos-variable]
  '(menu-item "All Variables..." apropos-variable
    :help "Find variables whose names match a pattern"))
(when (fboundp 'apropos-user-option)
  (define-key menu-bar-apropos-menu [apropos-user-option]
    '(menu-item "User Options..." apropos-user-option
      :help "Find user options (variables you can change) whose names match a pattern")))
(define-key menu-bar-apropos-menu [apropos-commands] nil)
(define-key menu-bar-apropos-menu [apropos-command]
  '(menu-item "Commands..." apropos-command :help "Find commands whose name matches a regexp"))
(define-key menu-bar-apropos-menu [sep1] nil)
(define-key menu-bar-apropos-menu [emacs-command-node] nil)
(define-key menu-bar-apropos-menu [emacs-key-command-node] nil)
(define-key menu-bar-apropos-menu [elisp-index-search] nil)
(define-key menu-bar-apropos-menu [emacs-index-search] nil)
(define-key menu-bar-apropos-menu [emacs-glossary] nil)

;;; `Describe' submenu
(define-key-after menu-bar-help-menu [describe] (cons "Describe" menu-bar-describe-menu)
                  'apropos)
(if (not (fboundp 'describe-command))
    (define-key menu-bar-describe-menu [describe-function] ; `Function...'
      '(menu-item "Function..." describe-function :help "Describe a command or other function"))
  (define-key menu-bar-describe-menu [describe-command] ; `Command...'
   '(menu-item "Command..." describe-command :help "Describe an Emacs command"))
  (define-key-after menu-bar-describe-menu [describe-function] ; `Function...'
    '(menu-item "Function..." describe-function :help "Describe a command or other function")
    'describe-command))
(if (not (fboundp 'describe-option))
    (define-key-after menu-bar-describe-menu [describe-variable] ; `Variable...'
      '(menu-item "Variable..." describe-variable
        :help "Describe an Emacs user option or other variable")
      'describe-function)
  (define-key-after menu-bar-describe-menu [describe-option] ; `Option...'
    '(menu-item "Option..." describe-option :help "Describe an Emacs user option")
    'describe-function)
  (define-key-after menu-bar-describe-menu [describe-option-of-type] ; `Option of Type...'
    '(menu-item "Option of Type..." describe-option-of-type
      :help "Describe a user option of a particular type")
    'describe-option)
  (define-key-after menu-bar-describe-menu [describe-variable] ; `Variable...'
      '(menu-item "Variable..." describe-variable
        :help "Describe an Emacs user option or other variable")
      'describe-option-of-type))
(define-key-after menu-bar-describe-menu [describe-face] ; `Face...'
  '(menu-item "Face..." describe-face :help "Describe a face")
  'describe-variable)
(define-key menu-bar-describe-menu [describe-key-1] nil) ; Remove this for Emacs 21
(define-key-after menu-bar-describe-menu [describe-key] ; `Key...'
  '(menu-item "Key..." describe-key
    :help "Describe a command bound to a key, mouse action, or menu item")
  'describe-face)
(when (fboundp 'describe-keymap)
  (define-key-after menu-bar-describe-menu [describe-keymap] ; `Keymap...'
    '(menu-item "Keymap..." describe-keymap :help "Describe a keymap")
    'describe-key))
(when (fboundp 'describe-file) ; Defined in `help-fns+.el' and `help+20.el'.
  (define-key-after menu-bar-describe-menu [describe-file] ; `File...'
    '(menu-item "File..." describe-file
      :help "Describe a file")
    (if (fboundp 'describe-keymap) 'describe-keymap 'describe-face)))
(define-key-after menu-bar-describe-menu [describe-input-method] ; `Input Method...'
  '(menu-item "Input Method..." describe-input-method
    :help "Describe keyboard layout for an input method")
  (if (fboundp 'describe-file)
      'describe-file
    (if (fboundp 'describe-keymap) 'describe-keymap 'describe-face)))
(define-key-after menu-bar-describe-menu [describe-coding-system] ; `Coding System...'
  '(menu-item "Coding System..." describe-coding-system :help "Describe a coding system")
  'describe-input-method)
(when (fboundp 'help-on-click/key)      ; `This...' - defined in `help+.el' and `help+20.el'.
  (define-key-after menu-bar-describe-menu [help-on-click/key]
    '(menu-item "This..." help-on-click/key
      :help "Describe a key/menu sequence or object clicked with the mouse")
    'describe-coding-system))

(define-key-after menu-bar-describe-menu [separator-current]
  '("--") (if (fboundp 'help-on-click/key) 'help-on-click/key 'describe-coding-system))
(define-key-after menu-bar-describe-menu [describe-mode] ; `Current Modes'
  '(menu-item "Current Modes" describe-mode
    :help "Describe this buffer's major and minor modes")
  'separator-current)
(define-key-after menu-bar-describe-menu [list-keybindings] ; `Current Key Bindings'
  '(menu-item "Current Key Bindings" describe-bindings
    :help "List all current keybindings, with brief descriptions")
  'describe-mode)
(define-key-after menu-bar-describe-menu [describe-syntax] ; `Current Syntax'
  '(menu-item "Current Syntax" describe-syntax
    :help "Describe the syntax specifications in the current syntax table")
  'list-keybindings)
(when (fboundp 'describe-current-display-table)
  (define-key-after menu-bar-describe-menu [describe-current-display-table]
    '(menu-item "Current Display Table" describe-current-display-table ; `Current Display Table'
      :help "Describe the display table in use in the selected window and buffer")
   'describe-syntax))
(when (fboundp 'describe-current-coding-system-briefly) ; `Current Coding Systems'
  (define-key-after menu-bar-describe-menu [describe-coding-system-briefly]
    '(menu-item "Current Coding Systems" describe-current-coding-system-briefly
      :help "Describe the current coding systems")
    (if (fboundp 'describe-current-display-table)
        'describe-current-display-table
      'list-keybindings)))
(when (fboundp 'describe-menubar)
  (define-key-after menu-bar-describe-menu [describe-menubar] ; `Menu Bar'
    '(menu-item "Menu Bar" describe-menubar :help "Explain the menu-bar, in general terms")
    (if (fboundp 'describe-current-coding-system-briefly)
        'describe-coding-system-briefly
      (if (fboundp 'describe-current-display-table)
          'describe-current-display-table
        'list-keybindings))))

;;; `Manuals' submenu.

;; REPLACE ORIGINAL defined in `menu-bar.el'.
;;
;; Remove some default bindings.  Name changes.
;;
(defconst menu-bar-manuals-menu (make-sparse-keymap "Learn More"))
(define-key-after menu-bar-help-menu [manuals]
  (cons "Learn More" menu-bar-manuals-menu) 'describe)
(when (>= emacs-major-version 21)
  (define-key menu-bar-manuals-menu [order-emacs-manuals]
    '(menu-item "Ordering Manuals" view-order-manuals
      :help "How to order manuals from the Free Software Foundation")))
(define-key-after menu-bar-help-menu [separator-manuals] '("--") 'manuals)
(define-key menu-bar-manuals-menu [man]
  '(menu-item "Unix Man Page..." manual-entry
    :help "Unix man-page documentation for external commands and libraries"))
(define-key menu-bar-manuals-menu [info]
  '(menu-item "All Manuals (`Info')" Info-directory :help "Read any of the installed manuals"))
(define-key menu-bar-manuals-menu [last-info]
  '(menu-item "Last Accessed Manual (`Info')" info
    :help "Open Info, the doc browser, at the last doc place visited"))
(define-key menu-bar-manuals-menu [emacs-faq] nil)
(define-key menu-bar-manuals-menu [emacs-news] nil)
(define-key menu-bar-manuals-menu [key] nil)
(define-key menu-bar-manuals-menu [command] nil)


;;; `Emacs Lisp' submenu of `Manuals' submenu.
(defvar menu-bar-emacs-lisp-manual-menu (make-sparse-keymap "Emacs Lisp"))
(define-key menu-bar-manuals-menu [emacs-lisp-manual]
  (cons "Emacs Lisp" menu-bar-emacs-lisp-manual-menu))

;; Is there a direct way to get to Lisp NEWS in Emacs 21?
(when (< emacs-major-version 21)
  (define-key menu-bar-emacs-lisp-manual-menu [emacs-Lisp-News]
    '(menu-item "What's New (Change History)" view-emacs-lisp-news
      :help "Display information on recent changes to Emacs Lisp")))
(define-key menu-bar-emacs-lisp-manual-menu [finder-by-keyword]
  '(menu-item "Locate Libraries by Keyword" finder-by-keyword
    :help "Find Emacs Lisp packages matching a keyword"))
(define-key menu-bar-emacs-lisp-manual-menu [locate-library] ; Defined in `subr.el', `help+20.el'
  '(menu-item "Locate Library..." locate-library
    :help "Show the full path name of an Emacs library"))
(define-key menu-bar-emacs-lisp-manual-menu [emacs-lisp-manual-separator] '("--"))
(when (> emacs-major-version 21)
  (define-key menu-bar-emacs-lisp-manual-menu [elisp-index-search]
    '(menu-item "    Index..." elisp-index-search
      :help "Look up a topic in the Emacs Lisp manual index")))
(when (fboundp 'menu-bar-read-lispref)  ; Defined in `info+.el' or `info+20.el'.
  (define-key menu-bar-emacs-lisp-manual-menu [menu-bar-read-lispref]
    '(menu-item "Manual" menu-bar-read-lispref
      :help "Read the Emacs Lisp reference manual"))
  (define-key menu-bar-emacs-lisp-manual-menu [info-elintro]
    '(menu-item "Intro to Elisp" menu-bar-read-lispintro
      :help "Read an introduction to Emacs Lisp programming")))


;;; `Emacs' submenu of `Manuals' submenu.
(defvar menu-bar-emacs-manual-menu (make-sparse-keymap "Emacs"))
(define-key menu-bar-manuals-menu [emacs-manual] (cons "Emacs" menu-bar-emacs-manual-menu))
(when (>= emacs-major-version 21)
  (define-key menu-bar-emacs-manual-menu [emacs-problems]
    '(menu-item "Known Problems" view-emacs-problems
      :help "Known problems of this Emacs version")))
(define-key menu-bar-emacs-manual-menu [emacs-news]
  '(menu-item "What's New (Change History)" view-emacs-news
    :help "New features of this Emacs version"))
(define-key menu-bar-emacs-manual-menu [emacs-faq]
  '(menu-item "FAQ" view-emacs-FAQ
    :help "Read frequently asked questions about Emacs (with answers)"))
(if (> emacs-major-version 21)
    (define-key menu-bar-emacs-manual-menu [emacs-tutorial-language-specific]
      '(menu-item "Tutorial (Choose Language)..." help-with-tutorial-spec-language
        :help "Learn Emacs with a hands-on tutorial"))
  (define-key menu-bar-emacs-manual-menu [emacs-tutorial]
    '(menu-item "Tutorial" help-with-tutorial :help "Learn Emacs with a hands-on tutorial")))
(define-key menu-bar-emacs-manual-menu [emacs-manual-separator] '("--"))
(when (> emacs-major-version 21)
  (define-key menu-bar-emacs-manual-menu [emacs-glossary]
    '(menu-item "    Glossary" search-emacs-glossary
      :help "Show the Emacs manual Glossary"))
  (define-key menu-bar-emacs-manual-menu [emacs-index-search]
    '(menu-item "    Index..." emacs-index-search
      :help "Look up a topic in the Emacs manual index")))
(define-key menu-bar-emacs-manual-menu [key]
  '(menu-item "    Key Description..." Info-goto-emacs-key-command-node
    :help "Show Emacs manual section that describes a key sequence"))
(define-key menu-bar-emacs-manual-menu [command]
  '(menu-item "    Command Description..." Info-goto-emacs-command-node
    :help "Show Emacs manual section that describes a command"))
(when (fboundp 'info-emacs-manual)
  (define-key menu-bar-emacs-manual-menu [info-emacs-manual]
    '(menu-item "Manual" info-emacs-manual :help "Read the Emacs manual")))


;;; `Options' menu.

(defmacro menu-bar-make-toggle-any-version (name variable doc message help &rest body)
  "Return a valid `menu-bar-make-toggle' call in Emacs 20 or later.
NAME is the name of the toggle command to define.
VARIABLE is the variable to set.
DOC is the menu-item name.
MESSAGE is the toggle message, minus status.
HELP is :help string.
BODY is the function body to use.  If present, it is responsible for
setting the variable and displaying a status message (not MESSAGE)."
  (if (< emacs-major-version 21)
      `(menu-bar-make-toggle ,name ,variable ,doc ,message ,@body)
    `(menu-bar-make-toggle ,name ,variable ,doc ,message ,help ,@body)))

(when (or (boundp 'doremi-push-frame-config-for-cmds-flag)
          (boundp 'fit-frame-inhibit-fitting-flag)
          (boundp 'autofit-frames-flag) (boundp 'thumfr-thumbify-dont-iconify-flag))
  (define-key menu-bar-options-menu [frames-separator] '("--")))
(when (boundp 'doremi-push-frame-config-for-cmds-flag)
  (define-key menu-bar-options-menu [doremi-push-frame-config]
    (menu-bar-make-toggle-any-version menu-bar-doremi-push-frame-config
                                      doremi-push-frame-config-for-cmds-flag
                                      "Save Frame Configs (DoReMi)"
                                      "Saving frame configurations is %s for DoReMi commands"
                                      "Saving of frame configurations by DoReMi commands")))
(when (boundp 'fit-frame-inhibit-fitting-flag)
  (define-key menu-bar-options-menu [inhibit-fit-frame]
    (menu-bar-make-toggle-any-version menu-bar-inhibit-fit-frame fit-frame-inhibit-fitting-flag
                          "Inhibit Frame Fitting"
                          "Inhibit frame fitting is %s (overrides automatic frame fitting)"
                          "Inhibit frame fitting")))
(when (boundp 'autofit-frames-flag)
  (define-key menu-bar-options-menu [autofit-frames]
    (menu-bar-make-toggle-any-version menu-bar-autofit-frames autofit-frames-flag
                          "Fit Frames Automatically"
                          "Automatic fitting of one-window frames is %s"
                          "Automatic fitting of one-window frames")))
(when (boundp 'thumfr-thumbify-dont-iconify-flag)
  (define-key menu-bar-options-menu [thumfr-thumbify-frames]
    (menu-bar-make-toggle-any-version menu-bar-thumbify-frames
                                      thumfr-thumbify-dont-iconify-flag
                          "Thumbify, Don't Iconify, Frames"
                          "Thumbifying instead of iconifying frames is %s"
                          "Thumbifying instead of iconifying frames")))

(when (fboundp 'edit-options)
  (define-key menu-bar-options-menu [all-options-separator] '("--"))
  (define-key menu-bar-options-menu [edit-options]
    '(menu-item "Show, Edit All Options" edit-options
      :help "Edit a list of Emacs user option (variable) values")))

;; (when (boundp 'replace-w-completion-flag)
;;   (define-key-after menu-bar-options-menu [replace-w-completion-flag]
;;     (menu-bar-make-toggle-any-version menu-bar-toggle-replace-w-completion
;;                                       replace-w-completion-flag
;;                                       "Completion for Query Replace"
;;                                       "Using completion with query replace is %s"
;;                                       "Using completion with query replace")
;;     'case-fold-search))

;; Can't seem to byte-compile this - try to debug later.
;; (when (and (< emacs-major-version 21) (featurep 'icomplete)) ; Not needed/available for 21?
;;   (define-key-after menu-bar-options-menu [icomplete-mode]
;;     (menu-bar-make-toggle toggle-icomplete-mode icomplete-mode
;;                           "Command Completion Clues" "Completion Clues %s")
;;     'all-options-separator))



;; REPLACES ORIGINAL in `menu-bar.el'.
;; Updated for added items.
;; For this to work, however, compilation needs to be with Emacs >= 21,
;; to use the right definition of `menu-bar-make-toggle'.
;;
(cond ((= emacs-major-version 21)
       (defun menu-bar-options-save ()
         "Save current values of Options menu items using Custom."
         (interactive)
         (dolist (elt '(debug-on-quit debug-on-error auto-compression-mode
                        case-fold-search truncate-lines show-paren-mode
                        transient-mark-mode global-font-lock-mode
                        current-language-environment default-input-method
                        ;; D. ADAMS: Added these options.
                        doremi-push-frame-config-for-cmds-flag
                        fit-frame-inhibit-fitting-flag autofit-frames-flag
                        thumfr-thumbify-dont-iconify-flag replace-w-completion-flag))
           (if (default-value elt)
               (customize-save-variable elt (default-value elt))))
         (if (memq 'turn-on-auto-fill text-mode-hook)
             (customize-save-variable 'text-mode-hook
                                      (default-value 'text-mode-hook)))
         (if (featurep 'saveplace)
             (customize-save-variable 'save-place (default-value 'save-place)))
         (if (featurep 'uniquify)
             (customize-save-variable 'uniquify-buffer-name-style
                                      (default-value 'uniquify-buffer-name-style)))))
      ((> emacs-major-version 21)
       (defun menu-bar-options-save ()
         "Save current values of Options menu items using Custom."
         (interactive)
         (let ((need-save nil))
           ;; These are set with menu-bar-make-mm-toggle, which does not
           ;; put on a customized-value property.
           (dolist (elt '(line-number-mode column-number-mode size-indication-mode
                          cua-mode show-paren-mode transient-mark-mode
                          blink-cursor-mode display-time-mode display-battery-mode))
             (and (customize-mark-to-save elt)
                  (setq need-save t)))
           ;; These are set with `customize-set-variable'.
           (dolist (elt '(scroll-bar-mode debug-on-quit debug-on-error tooltip-mode
                          menu-bar-mode tool-bar-mode save-place uniquify-buffer-name-style
                          fringe-mode indicate-empty-lines indicate-buffer-boundaries
                          case-fold-search current-language-environment default-input-method
                          ;; D. ADAMS: Added these options.
                          doremi-push-frame-config-for-cmds-flag fit-frame-inhibit-fitting-flag
                          autofit-frames-flag thumfr-thumbify-dont-iconify-flag
                          replace-w-completion-flag
                          ;; Saving `text-mode-hook' is somewhat questionable,
                          ;; as we might get more than we bargain for, if
                          ;; other code may has added hooks as well.
                          ;; Nonetheless, not saving it would like be confuse
                          ;; more often.
                          ;; -- Per Abrahamsen <abraham@dina.kvl.dk> 2002-02-11.
                          text-mode-hook))
             (and (get elt 'customized-value)
                  (customize-mark-to-save elt)
                  (setq need-save t)))
           ;; Save if we changed anything.
           (when need-save
             (custom-save-all))))))

;;;;;;;;;;;;;;;;;;;;;;;

(provide 'menu-bar+)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; menu-bar+.el ends here
#+end_src

** setup-keys.el

#+call: hash() :exports none

#+RESULTS:
: 20210601222930469855200

#+name: 20210601222930469855200
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; setup-keys.el --- Some key bindings.
;;
;; Filename: setup-keys.el
;; Description: Some key bindings.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 1999-2021, Drew Adams, all rights reserved.
;; Created: Fri Apr  2 12:34:20 1999
;; Version: 0
;; Package-Requires: ()
;; Last-Updated: Mon Feb  8 19:07:58 2021 (-0800)
;;           By: dradams
;;     Update #: 1361
;; URL: https://www.emacswiki.org/emacs/download/setup-keys.el
;; Keywords: mouse, keyboard, menus, menu-bar
;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   `apropos', `apropos+', `avoid', `backquote', `bookmark',
;;   `bookmark+', `bookmark+-1', `bookmark+-bmu', `bookmark+-key',
;;   `bookmark+-lit', `button', `bytecomp', `cconv', `cl', `cl-lib',
;;   `cmds-menu', `col-highlight', `color', `crosshairs', `cus-edit',
;;   `cus-face', `cus-load', `cus-start', `cus-theme', `custom',
;;   `doremi', `doremi-cmd', `doremi-frm', `easymenu', `faces',
;;   `faces+', `fit-frame', `font-lock', `font-lock+', `frame-cmds',
;;   `frame-fns', `gv', `help+', `help-fns', `help-fns+',
;;   `help-macro', `help-macro+', `help-mode', `hexrgb', `highlight',
;;   `highlight-symbol', `hl-line', `hl-line+', `info', `info+',
;;   `isearch+', `isearch-prop', `iso-transl', `kmacro', `macroexp',
;;   `menu-bar', `menu-bar+', `misc-cmds', `misc-fns', `mouse',
;;   `mouse+', `mwheel', `naked', `palette', `pp', `pp+',
;;   `radix-tree', `replace', `replace+', `ring', `second-sel',
;;   `strings', `syntax', `text-mode', `thingatpt', `thingatpt+',
;;   `timer', `vline', `w32browser-dlgopen', `wid-edit', `wid-edit+',
;;   `widget', `zones'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;    Some key bindings.
;;
;;  Think of this library more as an extension to your init file
;;  (~/.emacs) than as a true library.  It makes changes to your Emacs
;;  key bindings.  If you want only some of the bindings that are
;;  defined here, then either modify this file for your own use or
;;  load it and then modify selected bindings afterward.
;;
;;  The user options defined here are not customizable using Customize
;;  (they are not defined using `defcustom').  They are used only
;;  once, when this file is loaded - it makes no sense to change their
;;  values after this file is loaded.  To change their behavior from
;;  the default, set them in your init file before loading this
;;  library.
;;
;;  For example, if you do not want to substitute command
;;  `kill-buffer-and-its-windows' for command `kill-buffer' in all
;;  interactive uses, then put this in your init file *before* loading
;;  library `setup-keys':
;;
;;  (setq sub-kill-buffer-and-its-windows nil) ; Keep `kill-buffer'.
;;
;;  If you also load library `menu-bar+', then load it *before*
;;  loading library `setup-keys'.
;;
;;  User options defined here:
;;
;;    `sub-*-of-line', `sub-delete-windows-for',
;;    `sub-kill-buffer-and-its-windows', `sub-pp-evals',
;;    `sub-query-replace-w-options', `sub-quit-window-delete',
;;    `sub-recenter-top-bottom', `sub-transpose-sexps'.
;;
;;  Other variables defined here:
;;
;;    `comparison-map', `doremi-map'.
;;
;;  Functions defined here:
;;
;;    `remap-command'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2021/02/08 dadams
;;     Renamed to-indentation-repeat-(back|for)ward to (back|forward)-to-indentation+.
;; 2020/01/03 dadams
;;     Applied renamings from thing-cmd.el:
;;       mark-thing to select-things, cycle-thing-region to cycle-select-something.
;; 2018/11/09 dadams
;;     Change binding of to-indentation-repeat-backward to M-p.
;; 2018/09/22 dadams
;;     Use tear-off-window, not mouse-* (aliased), now in mouse+.el, not in frame-cmds.el.
;; 2018/09/14 dadams
;;     Added: sub-clone-frame.  Use it.
;; 2018/03/03 dadams
;;     Removed binding of <delete> to kill-line.
;; 2017/09/10 dadams
;;     Change binding of 1on1-fit-minibuffer-frame in minibuffer keymaps to M-up from C-o.
;; 2016/11/02 dadams
;;     Added: sub-transpose-sexps.
;;     Remap transpose-sexps to reversible-transpose-sexps, if sub-transpose-sexps.
;; 2016/09/18 dadams
;;     Applied renaming of secondary-dwim to secondary-yank|select|move|swap.
;; 2016/07/19 dadams
;;     Bound M-m to to-indentation-repeat-backward and M-n to to-indentation-repeat-forward.
;; 2016/01/24 dadams
;;     Bound C-x 5 1 to tear-off-window.
;; 2015/06/30 dadams
;;     Changed highlight-symbol-* bindings to f9 from f11.
;;     Replaced f12 by f8.
;; 2015/04/02 dadams
;;     Corrected command names for ni-narrow-to-*.
;; 2015/03/15 dadams
;;     Added: remap-command, sub-quit-window-delete.
;;     Remap quit-window to quit-window-delete, if sub-quit-window-delete.
;; 2014/11/28 dadams
;;     Bind compare-windows-repeat instead of compare-windows, if available.
;; 2014/10/29 dadams
;;     Bind (next|previous)-buffer-repeat.
;; 2014/05/23 dadams
;;     Bind narrow-indirect.el commands.
;; 2014/05/19 dadams
;;     If use mouse+.el then get rid of Emacs 24+ minibuffer.el's mouse-1 in echo area.
;;     Consolidate two eval-after-load's for mouse+.
;; 2014/03/12 dadams
;;     Bind C-M-^ to up-list, i.e., forward direction.
;; 2013/11/18 dadams
;;     Bind C-x C-; to comment-region-lines instead of comment-region.
;;     Do not require simple+.el.
;; 2013/11/07 dadams
;;     Bind hlt-highlight-enclosing-list to C-M-S.
;; 2013/10/23 dadams
;;     Bind C-x t s to either doremi-custom-themes+ or doremi-color-themes+.
;; 2013/09/15 dadams
;;     Do not bind help-on-click/key here.  Do not require help+(20).el for that.
;; 2013/09/01 dadams
;;     Added remapping of undo to undo-repeat.
;; 2013/08/23 dadams
;;     Soft-require highlight-symbol.el (Emacs 22+).  Bind its commands to f11 (+ modifiers).
;; 2013/07/25 dadams
;;     Invoke find-function-setup-keys.
;; 2013/07/05 dadams
;;     Bind move-frame-to-screen-top-left to C-S-home.
;; 2013/04/21 dadams
;;     Bind zoom-in/out to C-x +, C-x -, C-x =, C-x 0.
;; 2013/03/06 dadams
;;     Bind C-x C-M-SPC to set-secondary-start, C-x C-M-RET to secondary-save-then-kill.
;; 2013/01/17 dadams
;;     Added bindings for move-frame-to-screen-(top|bottom|left|right).
;; 2013/01/02 dadams
;;     Bound C-o also in minibuffer-(inactive-mode|local-(isearch|shell-command))-map.
;; 2012/12/24 dadams
;;     Added bindings for visual-line-mode line movements.
;; 2012/08/27 dadams
;;     Treat Emacs 24+ insert-char the same as ucs-insert (old name).
;; 2012/07/08 dadams
;;     Bind C-mouse-1 to ignore, so don't see error msg on up event.
;; 2012/07/02 dadams
;;     Bind find-library-other-window to C-x 4 l.
;; 2012/06/02 dadams
;;     If ucs-cmds.el is loaded, bind C-x 8 RET to ucsc-insert, if Emacs 23+.
;; 2011/11/12 dadams
;;     Vars sub-*: Removed (when (fboundp '*)...) wrapper - define always.  But mention in doc
;;       string that has no effect unless library loaded.
;; 2011/07/25 dadams
;;     Use eval-after-load where appropriate (e.g. instead of featurep/fboundp/boundp).
;; 2010/04/22 dadams
;;     Bound C-M-y to isearch-yank-secondary in isearch-mode-map.
;; 2010/02/24 dadams
;;     Bound C-; to iedit-mode, globally and in isearch-mode-map.
;; 2010/02/20 dadams
;;     Bound framemove keys: M-S-(up|down|left|right).
;; 2009/11/07 dadams
;;     Bound doremi-face-bg+ to k.  Applied doremi cmd renamings (added +).
;; 2009/08/26 dadams
;;     Changed binding of region-to-file from `C-x a' to C-x M-f, due to abbrev keys conflict.
;; 2009/07/26 dadams
;;     Fixed typo: prev-buffer -> previous-buffer.
;; 2009/06/25 dadams
;;     Use renaming: yank-secondary-or-swap-w-region to secondary-dwim.
;; 2009/06/11 dadams
;;     Bind zoom-(in|out), not zoom-frm-(in|out).
;;     Don't bind M-s if Emacs 23+.
;; 2009/05/17 dadams
;;     Updated to reflect thumb-frm.el name changes.
;; 2009/04/08 dadams
;;     Use revert-buffer-no-confirm, if defined.
;; 2009/04/06 dadams
;;     Changed binding of revert-buffer from S-f1 to f5 (a la MS Windows).
;; 2009/01/06 dadams
;;     Move delete-window from C-x C-a to C-x C-z, to avoid conflict with gud.
;;      Replaces std binding for iconify-or-deiconify-frame.
;; 2008/11/08 dadams
;;     Bind swiss-move-line-up/down to S-prior/S-next.
;; 2008/10/19 dadams
;;     Bind mouse-2 in ctl-x-map to ignore, so hlt-highlighter works on down-mouse-2.
;; 2008/08/17 dadams
;;     Made zoom-frm-(in|out) bindings portable, and make C- bindings work for Emacs 20, 21.
;; 2008/08/14 dadams
;;     Bound C-x C-a to delete-window, so you can do it with one hand.
;; 2008/08/07 dadams
;;     Bound zoom-frm-(in|out) to C-wheel-(down|up).
;; 2008/08/06 dadams
;;     Bind bm-toggle, bm-next, bm-previous to S-f3, C-f3, M-f3, not C-f3, f3, S-f3.
;; 2008/05/23 dadams
;;     Bound yank-pop-commands to M-y.  Soft-require second-sel.el.
;;     Soft-require second-sel.el.
;; 2008/05/06 dadams
;;     Renamed yank-secondary-or-convert-primary to yank-secondary-or-swap-w-region.
;; 2008/05/03 dadams
;;     Bind yank-secondary-or-convert-primary, not yank-secondary, to C-M-y.
;; 2008/03/19 dadams
;;     Don't bind C-o in completion maps if they inherit from minibuffer-local-map.
;; 2008/03/06 dadams
;;     Removed binding for iconify-everything - too easy to hit by mistake.
;; 2008/03/02 dadams
;;     Removed describe-file binding (done now in help-fns+.el and help+20.el).
;; 2007/12/14 dadams
;;     Require help+20.el for Emacs 20.  Require (new) help+.el for Emacss 22.
;; 2007/12/02 dadams
;;     Bound describe-face to C-h C-M-f.
;; 2007/11/21 dadams
;;     Bound C-o in minibuffer maps to 1on1-fit-minibuffer-frame.
;; 2007/11/06 dadams
;;     Added: sub-recenter-top-bottom.  Substituted recenter-top-bottom for recenter binding.
;; 2007/11/01 dadams
;;     Changed C-x t w from doremi-frame-width to doremi-window-height.
;; 2007/10/13 dadams
;;     Bound bm.el keys to [f3] with modifiers.
;; 2007/09/28 dadams
;;     Bound lisp-spell-symbol to M-#.
;; 2007/09/24 dadams
;;     Bound mark-buffer-(before|after)-point.
;; 2007/09/19 dadams
;;     Removed bindings for goto-previous(-global)-mark.
;; 2007/07/15 dadams
;;     Changed binding of cycle-thing-region to M-@.
;; 2007/06/04 dadams
;;     Removed sub-customize-other window (RMS's bug fix was implemented).
;; 2007/06/02 dadams
;;     Renamed: highlight to hlt-highlight,
;;              highlight-(highlighter|eraser) to hlt-(highlighter|eraser),
;;              highlight-(next|previous)-* to hlt-(next|previous)-*.
;; 2007/04/06 dadams
;;     Changed bindings of fisheye-(next|previous)-frame.
;; 2007/04/02 dadams
;;     Bound goto-longest-line to C-x L.
;; 2007/03/17 dadams
;;     Bound highlight-(next|previous)-highlight, highlight-eraser.
;; 2007/03/16 dadams
;;     Bound highlight-with-marker.  Protect with fboundp.
;; 2007/02/03 dadams
;;     Fixed mark-ring binding.  Thx to Fidel Salas.
;; 2007/01/27 dadams
;;     Bound S-down-mouse-2 to mouse-scan-lines-or-M-:, instead of mouse-M-:.
;; 2007/01/13 dadams
;;     Bound C-h M-f to describe-file.
;; 2006/11/04 dadams
;;     Bound S-down-mouse-2 to mouse-M-:.
;; 2006/11/03 dadams
;;     Bound down-mouse-2 to mouse-flash-position-or-M-x, not mouse-flash-position.
;; 2006/09/12 dadams
;;     Replaced [pause] by [f12] for C-x 8 synonym.  ([pause] is used by Icicles.)
;; 2006/09/08 dadams
;;     Bound crosshairs-mode to C-+.
;; 2006/08/22 dadams
;;     Replaced sub-remove-window by sub-delete-windows-for.
;; 2006/08/15 dadams
;;     Removed C-f1 binding of kill-buffer.
;; 2006/08/11 dadams
;;     Bound mouse-flash-position to down-mouse-2.
;; 2006/07/30 dadams
;;     Added bindings for mark-thing and cycle-thing-region.
;; 2006/05/26 dadams
;;     Clarified commentary.
;;     foldout-mouse-modifiers: Use setq, not defvar.
;; 2006/05/16 dadams
;;     Removed Icicles bindings - use new library icicles-keys.el instead.
;; 2006/03/01 dadams
;;     Bound icicle-complete-thesaurus-entry to C-c /.
;; 2006/01/24 dadams
;;     Bound icicle-execute-extended-command.
;; 2006/01/19 dadams
;;     Added sub-*-of-line.  Use it with move-*-of-line, if Emacs 22.
;; 2006/01/04 dadams
;;     Bound other-window-or-frame to C-x o.
;; 2005/12/13 dadams
;;     Bound delete-other-frames to C-x 4 1.
;; 2005/12/03 dadams
;;     Changed bindings of thumb-frm.el commands and show-hide.
;; 2005/11/18 dadams
;;     Bound mouse-4 to help-go-back in help-mode-map, and M-` to icicle-execute-menu-command.
;; 2005/10/27 dadams
;;     Renamed sub-icicle-buffer to sub-icicle-commands.  Bound icicle-find-file*.
;; 2005/10/16 dadams
;;     Bound icicle-compilation-search in compilation-minor-mode-map.  Bound grep in grep.
;; 2005/09/02 dadams
;;     Added sub-icicle-buffer, and substituted for switch-to-buffer*.
;;     Protected sub-* by fboundp.
;; 2005/08/13 dadams
;;     Added binding for icicle-execute-menu-command.
;; 2005/08/02 dadams
;;     Added binding for doremi-all-faces-fg.
;; 2005/05/29 dadams
;;     Added move-frame-* bindings.
;; 2005/05/17 dadams
;;     Updated to work with Emacs 22.x.
;; 2005/05/06 dadams
;;     Added commented-out binding for thumbify-frame-upon-event, as a model.
;; 2005/01/26 dadams
;;     Commented out (w32-register-hot-key [A-tab]).
;;     Removed ###autoload for defvars.
;; 2005/01/20 dadams
;;     Removed sub-exit-with-confirmation.
;; 2005/01/09 dadams
;;     Renamed: doremi-bg-rgb to doremi-bg, doremi-face-fg-rgb to doremi-face-fg.
;;     Changed some doremi bindings.
;; 2005/01/02 dadams
;;     Changed binding of region-to-file because `C-x w' conflicted with hi-lock.
;;     Added bindings for doremi-mark and doremi-global-mark; changed for doremi-bookmarks.
;; 2004/12/28 dadams
;;     Added doremi-face-fg-rgb binding.  Changed binding: doremi-font.
;; 2004/12/26 dadams
;;     Added thumb-frm.el bindings.
;; 2004/11/24 dadams
;;     (w32-register-hot-key [A-tab])
;; 2004/11/21 dadams
;;     Added [C-pause], [M-pause] bindings for prev-buffer, next-buffer.
;; 2004/11/20 dadams
;;     Refined to deal with Emacs 21 < 21.3.50 (soon to be 22.x)
;; 2004/11/16 dadams
;;     Added substitute-key-definition '*-of-line '*-of-line+.
;; 2004/10/13 dadams
;;     These were added for Emacs 21 also: replace+.el, buff-menu+.el.
;; 2004/10/02 dadams
;;     Per request by RMS:
;;     Renamed grow-frame-height and grow-frame-width to enlarge-frame
;;     and enlarge-frame-horizontally, respectively.
;;     Added shrink-frame and shrink-frame-horizontally.
;; 2004/09/21 dadams
;;     Don't require stuff that's not yet ready or inappropriate for Emacs 21.
;; 2004/09/11 dadams
;;     Bound vertical-line mouse commands.
;;     Added bindings for commands in doremi-frm.el.
;; 2004/08/26 dadams
;;     Changed C-M-up/down/left/right to enlarge-frame* and shrink-frame*.
;; 2004/04/28 dadams
;;     Added C-M-home and C-M-end bindings for beginning- and end-of-defun.
;; 1999/09/03 dadams
;;     Added sub-pp-evals.  Use it to replace eval-* with pp-eval-*.
;; 1999/09/02 dadams
;;     1. Added binding for show-hide.
;;     2. Added vars: sub-exit-with-confirmation,
;;        sub-kill-buffer-and-its-windows, sub-pp-evals,
;;        sub-query-replace-w-options, sub-remove-window.  Use to
;;        protect substitute-key-definition's.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(require 'frame-cmds nil t) ;; (no error if not found): delete-other-frames,
                            ;; delete-windows-for, enlarge-frame*,
                            ;; iconify-everything, iconify/map-frame, move-frame-*,
                            ;; mouse-iconify/map-frame, mouse-remove-window,
                            ;; mouse-show-hide-mark-unmark, other-window-or-frame,
                            ;; show-*Help*-buffer, show-hide, shrink-frame*,
(require 'mouse+ nil t)     ;; (no error if not found):
                            ;; mouse-flash-position, (mouse-)tear-off-window
(require 'highlight nil t) ;; (no error if not found): hlt-highlight, hlt-highlighter,
                           ;; hlt-eraser, hlt-(next|previous)-highlight
(when (fboundp 'define-minor-mode) ;; (no error if not found): *-at-point,
  (require 'highlight-symbol nil t)) ;; *-(next|prev), *-query-replace

(require 'misc-cmds nil t) ;; (no error if not found): beginning-of-line+,
                           ;; end-of-line+, goto-longest-line, kill-buffer-and-its-windows,
                           ;; mark-buffer-after-point, mark-buffer-before-point,
                           ;; recenter-top-bottom, region-to-buffer, region-to-file,
                           ;; back-to-indentation+, forward-to-indentation+, undo-repeat
(require 'second-sel nil t) ;; (no error if not found): secondary-yank|select|move|swap,
                            ;; isearch-yank-secondary, yank-pop-commands,
                            ;; isearch-yank-secondary, set-secondary-start,
                            ;; secondary-save-then-kill
(require 'pp+ nil t) ;; (no error if not found): pp-eval-expression
(require 'fit-frame nil t) ;; (no error if not found):
                           ;; fit-frame, fit-frame-or-mouse-drag-vertical-line
(require 'doremi-frm nil t) ;; (no error if not found): doremi-bg+, doremi-face-fg+,
                            ;; doremi-font+, doremi-frame-font-size+, doremi-frame-configs+,
                            ;; doremi-frame-height+, doremi-frame-horizontally+,
                            ;; doremi-frame-vertically+
(require 'doremi-cmd nil t) ;; (no error if not found): doremi-buffers+, doremi-bookmarks+,
                            ;; doremi-color-themes+, doremi-custom-themes+

(when (< emacs-major-version 21)
  ;; (require 'help+20 nil t) ;; (no error if not found): help-on-click/key
  (require 'unaccent nil t)) ;; (no error if not found): unaccent-region, unaccent-word
;;; (when (> emacs-major-version 21)
;;;   (require 'help+ nil t)) ;; (no error if not found): help-on-click/key
(require 'replace+ nil t)   ;; (no error if not found): query-replace-w-options

;; Quiet the byte compiler.
(defvar grep-mode-map)                  ; Defined in `grep.el'.
(defvar mouse-wheel-down-event)         ; Defined in `mwheel.el'.
(defvar mouse-wheel-up-event)           ; Defined in `mwheel.el'.

;;;-----------------------------

(defun remap-command (old new map &optional oldmap)
  "Bind command NEW in MAP to all keys currently bound to OLD.
If command remapping is available, use that.  Otherwise, bind NEW to
whatever OLD is bound to in MAP, or in OLDMAP, if provided."
  (if (fboundp 'command-remapping)
      (define-key map (vector 'remap old) new) ; Ignore OLDMAP for Emacs 22.
    (substitute-key-definition old new map oldmap)))

(when (boundp 'help-mode-map) (define-key help-mode-map [mouse-4] 'help-go-back))
(when (boundp 'grep-mode-map) (define-key grep-mode-map "g" 'grep)) ; Emacs 22

(autoload 'compare-windows "compare-w"
  "Compare text in current window with text in next window." t)
(autoload 'ediff-buffers "ediff"
  "Run Ediff on a pair of buffers, BUFFER-A and BUFFER-B." t)
(autoload 'ediff-files "ediff"
  "Run Ediff on a pair of files, FILE-A and FILE-B." t)
(autoload 'kill-rectangle "rect"
  "Delete rectangle with corners at point & mark; save as last killed." t)
(autoload 'fill-individual-paragraphs "fill"
  "Fill paragraphs of uniform indentation within the region." t)
(autoload 'ispell-complete-word "ispell"
  "Complete word using letters at point to word beginning using `look'." t)
(autoload 'forward-whitespace "thingatpt" nil t)
(autoload 'forward-symbol "thingatpt" nil t)
(autoload 'dired-jump-other-window "dired-x"
  "Jump to dired buffer corresponding to current buffer, in new window." t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Don't let Windows grap ALT-TAB:
;; (when (eq system-type 'windows-nt) (w32-register-hot-key [A-tab]))

;; Additional definitions for some standard mouse commands:
;; SGI does not pass all ALT-mouse stuff thru to Emacs, so use C-M-mouse also:
(global-set-key [C-M-mouse-1] 'mouse-start-secondary) ; In `mouse.el'.            `C-M-mouse-1'
(global-set-key [C-M-drag-mouse-1] 'mouse-set-secondary) ; In `mouse.el'.
(global-set-key [C-M-down-mouse-1] 'mouse-drag-secondary) ; In `mouse.el'.
(global-set-key [C-M-mouse-3] 'mouse-secondary-save-then-kill) ; `second-sel.el'. `C-M-mouse-3'
(global-set-key [C-M-mouse-2] 'mouse-yank-secondary) ; `mouse+.el' or `mouse.el'  `C-M-mouse-2'

(global-set-key "\C-\M-^" 'up-list)                                              ; `C-M-^'

(eval-after-load "mouse+"
  '(progn                               ; Highlight yank position or call `M-x' in echo area.
    (global-set-key [down-mouse-2]   'mouse-flash-position-or-M-x)               ; `mouse-2'
    ;; Highlight line or `M-:'.
    (global-set-key [S-down-mouse-2]      'mouse-scan-lines-or-M-:)              ; `S-mouse-2'
    (global-set-key [mode-line C-mouse-1] 'tear-off-window)            ; `<mode-line> C-mouse-1'
    (define-key ctl-x-5-map "1"           'tear-off-window)                      ; `C-x 5 1'
    (when (> emacs-major-version 23)
      (define-key minibuffer-inactive-mode-map [down-mouse-1] nil)               ; `mouse-1'
      (define-key minibuffer-inactive-mode-map [mouse-1] nil))))                 ; in echo area

(eval-after-load "second-sel"
  '(progn
    (global-set-key (kbd "C-M-y")  (if (fboundp 'secondary-yank|select|move|swap)
                                       'secondary-yank|select|move|swap
                                     'secondary-dwim))                           ; `C-M-y'
    (define-key esc-map "y"                     'yank-pop-commands)              ; `M-y'
    (define-key isearch-mode-map (kbd "C-M-y")  'isearch-yank-secondary)         ; `C-M-y'
    (global-set-key (kbd "C-x C-M-SPC")         'set-secondary-start)            ;`C-x C-M-SPC'
    (global-set-key (kbd "C-x C-M-<return>")    'secondary-save-then-kill)))     ;`C-x C-M-RET'

(eval-after-load "narrow-indirect"
  '(progn
    (define-key ctl-x-4-map "nd" 'ni-narrow-to-defun-indirect-other-window)      ; `C-x 4 n d'
    (define-key ctl-x-4-map "nn" 'ni-narrow-to-region-indirect-other-window)     ; `C-x 4 n n'
    (define-key ctl-x-4-map "np" 'ni-narrow-to-page-indirect-other-window)))     ; `C-x 4 n p'

;; Because C-M- is being used for secondary.
(eval-after-load "foldout" '(setq foldout-mouse-modifiers '(meta shift)))

(eval-after-load "oneonone" ; Bind `1on1-fit-minibuffer-frame' to `M-up' in minubuffer maps.
  '(when (framep 1on1-minibuffer-frame) ; Standalone minibuffer frame.
    (define-key minibuffer-local-map [(meta up)] '1on1-fit-minibuffer-frame)
    (unless (eq minibuffer-local-map (keymap-parent minibuffer-local-completion-map))
      (define-key minibuffer-local-must-match-map [(meta up)] '1on1-fit-minibuffer-frame)
      (define-key minibuffer-local-completion-map [(meta up)] '1on1-fit-minibuffer-frame))
    (when (boundp 'minibuffer-local-filename-completion-map)
      (define-key minibuffer-local-filename-completion-map [(meta up)]
        '1on1-fit-minibuffer-frame))
    (when (boundp 'minibuffer-local-must-match-filename-map) ; Emacs 22
      (define-key minibuffer-local-must-match-filename-map [(meta up)]
        '1on1-fit-minibuffer-frame))
    (when (boundp 'minibuffer-local-filename-must-match-map) ; Emacs 23+
      (define-key minibuffer-local-filename-must-match-map [(meta up)]
        '1on1-fit-minibuffer-frame))
    (when (boundp 'minibuffer-local-isearch-map)
      (unless (eq minibuffer-local-map (keymap-parent minibuffer-local-isearch-map))
        (define-key minibuffer-local-isearch-map [(meta up)] '1on1-fit-minibuffer-frame)))
    (when (boundp 'minibuffer-local-shell-command-map)
      (unless (eq minibuffer-local-map (keymap-parent minibuffer-local-shell-command-map))
        (define-key minibuffer-local-shell-command-map [(meta up)] '1on1-fit-minibuffer-frame)))
    (when (boundp 'minibuffer-inactive-mode-map)
      (define-key minibuffer-inactive-mode-map [(meta up)] '1on1-fit-minibuffer-frame))))

(eval-after-load "frame-cmds"
  '(progn
    (global-set-key [(meta up)]             'move-frame-up)                      ; `M-up'
    (global-set-key [(meta down)]           'move-frame-down)                    ; `M-down'
    (global-set-key [(meta left)]           'move-frame-left)                    ; `M-left'
    (global-set-key [(meta right)]          'move-frame-right)                   ; `M-right'
    (global-set-key [(meta shift ?v)]       'move-frame-to-screen-top)           ; `M-S-v'
    (global-set-key [(control shift ?v)]    'move-frame-to-screen-bottom)        ; `C-S-v'
    (global-set-key [(control shift prior)] 'move-frame-to-screen-left)          ; `C-S-prior'
    (global-set-key [(control shift next)]  'move-frame-to-screen-right)         ; `C-S-next'
    (global-set-key [(control shift home)]  'move-frame-to-screen-top-left)      ; `C-S-home'
    (global-set-key [(control meta up)]     'shrink-frame)                       ; `C-M-up'
    (global-set-key [(control meta down)]   'enlarge-frame)                      ; `C-M-down'
    (global-set-key [(control meta left)]   'shrink-frame-horizontally)          ; `C-M-left'
    (global-set-key [(control meta right)]  'enlarge-frame-horizontally)         ; `C-M-right'
    ;; Replaces`iconify-or-deiconify-frame'.
    (global-set-key [(control ?z)] 'iconify/map-frame)                           ; `C-z'
    ;; $$$$ (global-set-key [(control ?x) (control ?z)] 'iconify-everything)
    (global-set-key [(shift control meta ?z)] 'show-hide)                        ; `C-M-S-z'
    (global-set-key [C-down-mouse-1]        'mouse-show-hide-mark-unmark)        ; `C-mouse-1'
    (global-set-key [C-mouse-1]            'ignore)
    (global-set-key [S-down-mouse-1]       nil) ; Get rid of `mouse-set-font'.   ; `S-mouse-1'
    ;;(global-set-key [vertical-line mouse-1] 'ignore)
    (global-set-key [vertical-line C-down-mouse-1] 'show-hide)
    ;;(global-set-key [vertical-line C-mouse-1] 'ignore)
    (global-set-key [vertical-line S-down-mouse-1] 'iconify-everything)
    ;;(global-set-key [vertical-line S-mouse-1] 'ignore)
    ;; [mode-line mouse-3] as deletion (Emacs std) is too hazardous.  Iconify instead.
    (global-set-key [mode-line mouse-3]     'mouse-iconify/map-frame)
    (global-set-key [mode-line C-mouse-3]   'mouse-remove-window)))

(eval-after-load "framemove"
  '(progn
    (global-set-key [(shift meta up)]    'fm-up-frame)                           ; `M-S-up'
    (global-set-key [(shift meta down)]  'fm-down-frame)                         ; `M-S-down'
    (global-set-key [(shift meta left)]  'fm-left-frame)                         ; `M-S-left'
    (global-set-key [(shift meta right)] 'fm-right-frame)))                      ; `M-S-right'

(eval-after-load "zoom-frm"             ; `zoom-frm.el' requires `frame-cmds.el'.
  '(progn
    (global-set-key [S-mouse-1] 'zoom-in)                                     ; `S-mouse-1'
    (global-set-key [C-S-mouse-1] 'zoom-out)                                  ; `C-S-mouse-1'
    (global-set-key (if (boundp 'mouse-wheel-down-event)                      ; `C-mouse-wheel'
                        (vector (list 'control mouse-wheel-down-event))
                      [C-mouse-wheel])  ; Emacs 20, 21
     'zoom-in)
    (when (boundp 'mouse-wheel-up-event)
      (global-set-key (vector (list 'control mouse-wheel-up-event)) 'zoom-out))

    (when (fboundp 'text-scale-adjust)  ; Emacs 23+
      (define-key ctl-x-map [(control ?+)] 'zoom-in/out)                         ; `C-x +'
      (define-key ctl-x-map [(control ?-)] 'zoom-in/out)                         ; `C-x -'
      (define-key ctl-x-map [(control ?=)] 'zoom-in/out)                         ; `C-x ='
      (define-key ctl-x-map [(control ?0)] 'zoom-in/out))))                      ; `C-x 0'

;;;   ;; These [nil] bindings are no doubt a HACK, based on an undocumented handy "feature".
;;;   ;; (This works in Emacs 19.34.6, but it doesn't work in Emacs 20.6.)
;;;   ;; In Windows, at least, such a key sequence [nil...] occurs if you click in the
;;;   ;; lower right corner, between the scroll bar and the mode-line.
;;;   (global-set-key [nil down-mouse-1] 'fit-frame)
;;;   (global-set-key [nil mouse-1] 'ignore)
;;;   (global-set-key [nil C-down-mouse-1] 'show-hide)
;;;   (global-set-key [nil C-mouse-1] 'ignore)
;;;   (global-set-key [nil S-down-mouse-1] 'iconify-everything)
;;;   (global-set-key [nil S-mouse-1] 'ignore)

;; These are defined in `fit-frame.el'.
(eval-after-load "fit-frame"
  '(progn
    (global-set-key [(control ?x) (control ?_)] 'fit-frame)                      ; `C-x C-_'
    (global-set-key [vertical-line down-mouse-1] 'fit-frame-or-mouse-drag-vertical-line)))

(eval-after-load "iedit"
  '(progn
    (define-key global-map       (kbd "C-;") 'iedit-mode)                        ; `C-;'
    (define-key isearch-mode-map (kbd "C-;") 'iedit-mode)))

;;; Put *Help* buffer in `help-minor-mode'.
;;(save-excursion (set-buffer (get-buffer-create "*Help*")) (help-minor-mode 1))

;;;; Help mouse-menu.
;;(when (fboundp 'help-mouse-menu)        ; In `help-minor.el'.
;;  (unless (lookup-key (current-global-map) [C-M-S-down-mouse-1])
;;    (global-set-key [C-M-S-down-mouse-1] 'help-mouse-menu)
;;    (global-set-key [C-M-S-mouse-1] 'ignore))
;;  (unless (lookup-key (current-global-map) [C-M-S-down-mouse-2])
;;    (global-set-key [C-M-S-down-mouse-2] 'help-mouse-menu)
;;    (global-set-key [C-M-S-mouse-2] 'ignore))
;;  (unless (lookup-key (current-global-map) [C-M-S-down-mouse-3])
;;    (global-set-key [C-M-S-down-mouse-3] 'help-mouse-menu)
;;    (global-set-key [C-M-S-mouse-3] 'ignore)))

;; Comparisons: windows, buffers, files.
(global-set-key [(control meta ?=)] (if (fboundp 'compare-windows-repeat)
                                        'compare-windows-repeat ; In `misc-cmds.el'.
                                      'compare-windows)) ; In `compare-w.el'.
(defvar comparison-map (lookup-key global-map [?\C-=])
  "Prefix keymap for comparison commands.")
(unless (keymapp comparison-map)
  (setq comparison-map (make-sparse-keymap))
  (global-set-key [(control ?=)] comparison-map)
  (define-key comparison-map "b" 'ediff-buffers) ; In `ediff.el'.                ; `C-= b'
  (define-key comparison-map "e" 'ediff-files) ; In `ediff.el'.                  ; `C-= e'
  (define-key comparison-map "f" 'ediff-files) ; In `ediff.el'.                  ; `C-= f'
  (define-key comparison-map "d" 'diff) ; In `diff+.el'.                         ; `C-= d'
  (define-key comparison-map "w" (if (fboundp 'compare-windows-repeat)           ; `C-= w'
                                     'compare-windows-repeat ; In `misc-cmds.el'.
                                   'compare-windows))) ; In `compare-w.el'.

;; Completions (non-minibuffer).
;(global-set-key "\M-\r" 'complete)      ; Defined in `completion.el':
;(global-set-key [?\C-\r] 'complete)
;(define-key function-key-map [C-return] [?\C-\r])

(eval-after-load "fill"
  '(define-key text-mode-map [(meta ?j)] 'fill-individual-paragraphs))           ; `M-j'

(eval-after-load "ispell"
  '(global-set-key [(meta ?$)] 'ispell-complete-word))                           ; `M-$'

(eval-after-load "thingatpt"
  '(progn
    (global-set-key [(meta ?_)] 'forward-whitespace)                             ; `M-_'
    ;; Emacs 23 co-opts `M-s-' as a prefix key.
    (unless (lookup-key global-map [(meta ?s)])                                  ; `M-s-'
      (global-set-key [(meta ?s)] 'forward-symbol)))) ; Defined in `thingatpt.el'

;; These replace the bindings for `mark-sexp' and `mark-word'.  Defined in `thing-cmds.el'.
(eval-after-load "thing-cmds"
  '(progn
    (global-set-key [(control meta ? )] 'select-things)                          ; `C-M-SPC'
    (global-set-key [(meta ?@)] 'cycle-select-something)))                       ; `M-@'

(eval-after-load "crosshairs"
  '(global-set-key [(control ?+)] 'crosshairs-mode))                             ; `C-+'

(eval-after-load "unaccent"
  '(progn
    (global-set-key [(meta ?\")] 'unaccent-word)                                 ; `M-"'
    (define-key ctl-x-map [\"] 'unaccent-region)))                               ; `C-x "'

;;; Do Re Mi commands
(eval-after-load "doremi-frm"
  '(progn
    (unless (fboundp 'doremi-prefix)
      (defalias 'doremi-prefix (make-sparse-keymap))
      (defvar doremi-map (symbol-function 'doremi-prefix)
        "Keymap for Do Re Mi commands."))
    (define-key global-map "\C-xt" 'doremi-prefix)
    (define-key doremi-map "a" 'doremi-all-faces-fg+) ; "All"                    `C-x t a'
    (define-key doremi-map "c" 'doremi-bg+) ; "Color"                            `C-x t c'
    (define-key doremi-map "f" 'doremi-face-fg+) ; Face"                         `C-x t f'
    (define-key doremi-map "h" 'doremi-frame-height+) ; Height                   `C-x t h'
    (define-key doremi-map "k" 'doremi-face-bg+) ; bacKground"                   `C-x t k'
    (define-key doremi-map "t" 'doremi-font+) ; "Typeface"                       `C-x t t'
    (define-key doremi-map "u" 'doremi-frame-configs+) ; "Undo"                  `C-x t u'
    (define-key doremi-map "x" 'doremi-frame-horizontally+) ; X (abscissa)       `C-x t x'
    (define-key doremi-map "y" 'doremi-frame-vertically+)   ; Y (ordinate)       `C-x t y'
    (define-key doremi-map "z" 'doremi-frame-font-size+))) ; "Zoom"              `C-x t z'

(eval-after-load "doremi-cmd"
  '(progn
    (unless (fboundp 'doremi-prefix)
      (defalias 'doremi-prefix (make-sparse-keymap))
      (defvar doremi-map (symbol-function 'doremi-prefix)
        "Keymap for Do Re Mi commands."))
    (define-key global-map "\C-xt"  'doremi-prefix)
    (define-key doremi-map "b" 'doremi-buffers+) ; Buffer                        `C-x t b'
    (define-key doremi-map "g" 'doremi-global-marks+) ; Global mark              `C-x t g'
    (define-key doremi-map "m" 'doremi-marks+) ; Mark                            `C-x t m'
    (define-key doremi-map "r" 'doremi-bookmarks+) ; `r' for Reading books       `C-x t r'
    (define-key doremi-map "s" (if (fboundp 'doremi-custom-themes+)
                                   'doremi-custom-themes+
                                 'doremi-color-themes+)) ; `s' for color Schemes `C-x t s'
    (define-key doremi-map "w" 'doremi-window-height+))) ; Window                `C-x t w'

(eval-after-load "frame-cmds"
  '(progn
    (unless (fboundp 'doremi-prefix)
      (defalias 'doremi-prefix (make-sparse-keymap))
      (defvar doremi-map (symbol-function 'doremi-prefix)
        "Keymap for Do Re Mi commands."))
    (define-key global-map "\C-xt"  'doremi-prefix)
    (define-key doremi-map "." 'save-frame-config)))                           ; `C-x t .'

(eval-after-load "thumb-frm"
  '(progn
    (global-set-key [(shift mouse-3)]         'thumfr-toggle-thumbnail-frame)  ; `S-mouse-3'
    (global-set-key [(shift control mouse-3)] 'thumfr-thumbify-other-frames)   ; `C-S-mouse-3'
    (global-set-key [(shift control ?z)]      'thumfr-thumbify-other-frames)   ; `C-S-z'
    (global-set-key [(shift control ?n)]      'thumfr-fisheye-next-frame)      ; `C-S-n'
    (global-set-key [(shift control ?p)]      'thumfr-fisheye-previous-frame)  ; `C-S-p'
    (global-set-key [(control meta ?z)]    'thumfr-really-iconify-or-deiconify-frame) ; `C-M-z'
    ;; `e' for eye (fisheye)
    (define-key global-map "\C-xte" 'thumfr-doremi-thumbnail-frames+)          ; `C-x t e'
    ;; Make window-manager "minimize" button thumbify instead of iconify.
    ;; (define-key special-event-map [iconify-frame] 'thumfr-thumbify-frame-upon-event)
    ))

(eval-after-load "ucs-cmds"
  '(when (> emacs-major-version 22)     ; Need Emacs 23+ version of `insert-char'/`ucs-insert'.
    (when (commandp 'insert-char)       ; `ucs-insert' renamed to `insert-char' in Emacs 24.
      (define-key global-map [remap insert-char] 'ucsc-insert))
    (when (fboundp 'ucs-insert)
      (define-key global-map [remap ucs-insert] 'ucsc-insert))))

(define-key help-map "\C-\M-f" 'describe-face)                                 ; `C-h C-M-f'

;; `C-x' stuff.
;;
;; So you can do it with one hand.
(define-key ctl-x-map [(control ?z)] 'delete-window)                           ; `C-x C-z'

(eval-after-load "misc-cmds"
  '(progn
    (define-key ctl-x-map [home] 'mark-buffer-before-point)                    ; `C-x home'
    (define-key ctl-x-map [end]  'mark-buffer-after-point)                     ; `C-x end'
    (define-key ctl-x-map [(control ?\;)] 'comment-region-lines)               ; `C-x C-;'
    (define-key ctl-x-map "\M-f" 'region-to-file)                              ; `C-x M-f'
    (define-key ctl-x-map "L"    'goto-longest-line)                           ; `C-x L'
    (when (fboundp 'undo-repeat) (global-set-key [remap undo] 'undo-repeat))   ; `C-x u' etc.
    (when (fboundp 'next-buffer-repeat)
      (global-set-key [remap previous-buffer] 'previous-buffer-repeat)         ; `C-x left'
      (global-set-key [remap next-buffer]     'next-buffer-repeat))))          ; `C-x right'

;; In `chistory.el'.
(define-key ctl-x-map [(meta ?x)] 'repeat-matching-complex-command)            ; `C-x M-x'
(define-key ctl-x-map "c" 'font-lock-mode)                                     ; `C-x c'

(eval-after-load "frame-cmds"
  '(define-key ctl-x-map "o" 'other-window-or-frame))                          ; `C-x o'

(eval-after-load "highlight"
  '(progn
    (define-key ctl-x-map [(control ?y)] 'hlt-highlight)                       ; `C-x C-y'
    (define-key ctl-x-map [(down-mouse-2)] 'hlt-highlighter)                   ; `C-x mouse-2'
    (define-key ctl-x-map [(mouse-2)] 'ignore)
    (define-key ctl-x-map [(S-down-mouse-2)] 'hlt-eraser)                     ; `C-x S-mouse-2'
    (when (fboundp 'next-single-char-property-change) ; Emacs 21+
      (global-set-key [(shift control ?p)] 'hlt-previous-highlight)            ; `C-S-p'
      (global-set-key [(shift control ?n)] 'hlt-next-highlight))               ; `C-S-n'
    (global-set-key [(control meta shift ?s)] 'hlt-highlight-enclosing-list))) ; `C-M-S'

(eval-after-load "highlight-symbol"
  '(progn
    (global-set-key [(control f9)] 'highlight-symbol-at-point)                 ; `C-f9'
    (global-set-key [f9]           'highlight-symbol-next)                     ; `f9'
    (global-set-key [(shift f9)]   'highlight-symbol-prev)                     ; `S-f9'
    (global-set-key [(meta f3)]    'highlight-symbol-query-replace)))          ; `M-f9'

(eval-after-load "dired-x"
  '(progn
    (define-key ctl-x-map   [(control ?j)] 'dired-jump)                        ; `C-x j'
    (define-key ctl-x-4-map [(control ?j)] 'dired-jump-other-window)))         ; `C-x 4 j'

(eval-after-load "frame-cmds"
  '(progn
    (define-key ctl-x-4-map "1" 'delete-other-frames)                          ; `C-x 4 1'
    (define-key ctl-x-5-map "h" 'show-*Help*-buffer)))                         ; `C-x 5 h'

(eval-after-load "find-func+"           ; Emacs 22+
  '(define-key ctl-x-4-map "l" 'find-library-other-window))                    ; `C-x 4 l'
(find-function-setup-keys)  ;; C-x F, C-x 4 F, C-x 5 F, C-x K, C-x V, C-x 4 V, C-x 5 V

;; [f1] function key.
;;; (eval-after-load "help+"
;;;   ;; Standard binding is `help-command'
;;;   '(global-set-key [f1] 'help-on-click/key))                                   ; `f1'
;;; (eval-after-load "help+20"
;;;   '(global-set-key [f1] 'help-on-click/key))

(eval-after-load "misc-cmds"
  '(global-set-key [C-S-f1] 'region-to-buffer))                                ; `C-S-f1'

(global-set-key [M-S-f1] 'insert-buffer) ; Defined in `simple.el'.             ; `M-S-f1'
;; Defined in `font-lock.el'
(global-set-key [C-M-f1] 'font-lock-fontify-buffer)                            ; `C-M-f1'
(global-set-key [C-M-S-f1] 'rename-buffer)                                     ; `C-M-S-f1'

;; [f3] function key.
(eval-after-load "bm"
  '(progn
    (global-set-key (kbd "<S-f3>") 'bm-toggle)                                 ; `S-f3'
    (global-set-key (kbd "<C-f3>") 'bm-next)                                   ; `C-f3'
    (global-set-key (kbd "<M-f3>") 'bm-previous)))                             ; `M-f3'

;; [f5] function key - a la MS Windows.
(global-set-key [f5] 'revert-buffer)                                           ; `f5'
(eval-after-load "misc-cmds"
  '(global-set-key [f5] 'revert-buffer-no-confirm))                            ; `f5'

;; [insert] key.  [C-insert] is `kill-ring-save'.  [S-insert] is `yank'.
(global-set-key [M-insert] 'yank-pop) ; Defined in `simple.el'.                ; `M-insert'
(global-set-key [C-S-insert] 'insert-buffer) ; Defined in `simple.el'.         ; `C-S-insert'
(global-set-key [M-S-insert] 'yank-rectangle)                                  ; `M-S-insert'
(global-set-key [C-M-insert] 'lisp-complete-symbol)                            ; `C-M-insert'
(global-set-key [C-M-S-insert] 'insert-file)                                   ; `C-M-S-insert'

(eval-after-load "fuzzy-match"
  '(global-set-key "\M-#" 'lisp-spell-symbol))                                 ; `M-#'

;; [delete] key.
(global-set-key [C-delete] 'kill-paragraph) ; Defined in `paragraphs.el'.        `C-delete'
(global-set-key [M-delete] 'kill-ring-save) ; Defined in `simple.el'.            `M-delete'
; Emacs standard: [S-delete] is `kill-region'.
(global-set-key [C-S-delete] 'append-next-kill) ; Defined in `simple.el'.        `C-S-delete'
(global-set-key [M-S-delete] 'kill-rectangle) ; Defined in `rect.el'.            `M-S-delete'
(global-set-key [C-M-delete] 'kill-sexp) ; Defined in `lisp.el'.                 `C-M-delete'
(global-set-key [C-M-S-delete] 'append-to-register) ; Defined in `register.el'.  `C-M-S-delete'

;; [backspace] key.
(global-set-key [C-backspace] 'backward-kill-paragraph) ; In `paragraphs.el'.    `C-backspace'

(eval-after-load "misc-cmds"
  '(global-set-key [C-S-backspace] 'region-to-file))                        ; `C-S-backspace'

(global-set-key [M-S-backspace] 'clear-rectangle) ; Defined in `rect.el'.     `M-S-backspace'
; This was standard in Emacs 20:
(global-set-key [C-M-backspace] 'backward-kill-sexp) ; In  `lisp.el'.         `C-M-backspace'
(global-set-key [C-M-S-backspace] 'copy-to-register) ; In `register.el'.      `C-M-S-backspace'

;; [pause] / [break] key:
;; NOTE: On Windows, [C-pause] is considered to be [C-cancel].  Still true for XP?

;; Better than the standard bindings `C-x <right>' and `C-x <right>',
;; because you can hold these down to repeat: cycle through buffers.
(when (fboundp 'next-buffer)            ; Emacs 21+.
  (global-set-key [C-pause] 'previous-buffer)                                   ; `C-pause'
  (global-set-key [M-pause] 'next-buffer))                                      ; `M-pause'

;; `iso-transl.el' is needed to use an ISO prefix key (e.g. `C-x 8'. [f8]).
;; It defines `key-translation-map'.
(require 'iso-transl)
;;;@@@Emacs20 ;; This lets users do `[f8] C-h]' for help on ISO chars.
;;;@@@Emacs20 (autoload 'help-iso-prefix "help+"
;;;@@@Emacs20   "Show commands bound to ISO (pseudo-)prefix key sequences." t)

  ;; Make [f8] key be a synonym for `C-x 8'. (Use [f8] as a compose key.)
(define-key key-translation-map [f8]   ; See `iso-transl.el'.                   ; `f8'
  (lookup-key key-translation-map "\C-x8"))

;; Make [f8] key be a synonym for `C-x 8' for isearch too.
;; This lets you search for accented chars using [f8].
(define-key isearch-mode-map [f8] nil)
;;;@@@Emacs20 ;; [f8] C-h and C-x 8 C-h  :=  Help for [f8] and C-x 8 prefixes:
;;;@@@Emacs20 (global-set-key (vector 'f8 help-char) 'help-iso-prefix) ; In `help.el'.
;;;@@@Emacs20 (define-key ctl-x-map "8\C-h" 'help-iso-prefix) ; Defined in `help.el'.

;; These *declp* commands are defined in `misc-cmds.el'.
;(global-set-key [C-print] 'declp-buffer) ; Print buffer. (defsubst)
;(global-set-key [M-print] 'pr-declp-buffer) ; Print buffer via `pr'.
;(global-set-key [C-M-print] 'declp-buffer-w-switches) ; User `declp' switches.
;(global-set-key [S-print] 'transpose-paragraphs) ; Defined in `paragraphs.el'
;(global-set-key [C-S-print] 'declp-region) ; Print region. (defsubst)
;(global-set-key [M-S-print] 'pr-declp-region) ; Print region via `pr'.
;(global-set-key [C-M-S-print] 'declp-region-w-switches) ; `declp' + switches.

;; [home], [end], [prior], and [next] keys.  These are used, unmodified, by
;; `s-region-move', which is defined in `s-region+.el'.  The following commands,
;; except `forward-page' & `backward-page', are also defined in `s-region+.el'.
;(global-set-key [C-prior] 'backward-page) ; Defined in `page.el'.
;(global-set-key [C-previous] 'backward-page)
;(global-set-key [C-next] 'forward-page) ; Defined in `page.el'.
;(global-set-key [next] 'scroll-up-windowful) ; Defined in `s-region+.el'.
;(global-set-key [previous] 'scroll-down-windowful) ; Defined in `s-region+.el'.
;(global-set-key [prior] 'scroll-down-windowful)
;(global-set-key [M-next] 'scroll-other-window-up-windowful) ; In `s-region+.el'
;(global-set-key [M-previous] 'scroll-other-window-down-windowful)
;(global-set-key [M-prior] 'scroll-other-window-down-windowful) ; `s-region+.el'
;(global-set-key [home] 'goto-point-min) ; (defsubst) Defined in `s-region+.el'.
;(global-set-key [end] 'goto-point-max) ; (defsubst) Defined in `s-region+.el'.
;(global-set-key [M-home] 'bob-other-window) ; (defsubst) In `s-region+.el'.
;(global-set-key [M-end] 'eob-other-window) ; (defsubst) In `s-region+.el'.
;(s-region-bind (list [prior] [C-prior] [M-prior]))

(eval-after-load "swiss-move"
  '(progn
    (global-set-key [S-prior] 'swiss-move-line-up)                            ; `S-prior'
    (global-set-key [S-next]  'swiss-move-line-down)))                        ; `S-next'

;; [up], [down], [left], [right] keys.
(global-set-key [S-down] (lambda () (interactive) (scroll-up 1)))                  ; `S-down'
(global-set-key [S-up] (lambda () (interactive) (scroll-down 1)))                  ; `S-up'
;;(global-set-key [M-up] (lookup-key esc-map "p")) ; Probably not defined.
;;(global-set-key [M-down] (lookup-key esc-map "n")) ; Probably not defined.
;;(global-set-key [M-left] (lookup-key esc-map "b")) ; Predefined.
;;(global-set-key [M-right] (lookup-key esc-map "f")) ; Predefined.
(global-set-key [C-M-home] 'beginning-of-defun)                               ; `C-M-home'
(global-set-key [C-M-end] 'end-of-defun)                                      ; `C-M-end'

(eval-after-load "misc-cmds"
  '(progn
    (global-set-key "\M-p" 'back-to-indentation+)                             ; `M-p'
    (global-set-key "\M-n" 'forward-to-indentation+)))                        ; `M-n'

;;;-----------REPLACEMENT BINDINGS------------------------------------

(defvar sub-*-of-line t
  "*Non-nil means remap `*-of-line' commands to `*-of-line+' globally.
This applies to `move-to-(beginning|end)-of-line', if defined, or to
`(beginning|end)-of-line', otherwise.
This has no effect unless you use library `misc-cmds.el'.")

(defvar sub-clone-frame t
  "*Non-nil means remap `make-frame-command' to `clone-frame' globally.
This has no effect unless you use library `frame-cmds.el'.")

(defvar sub-delete-windows-for t
  "*Non-nil means remap `delete-window' to `delete-windows-for' globally.
This has no effect unless you use library `frame-cmds.el'.")

(defvar sub-kill-buffer-and-its-windows t
  "*Non-nil means remap `kill-buffer' to `kill-buffer-and-its-windows' globally.
This has no effect unless you use library `misc-cmds.el'.")

(defvar sub-pp-evals t
  "*Non-nil means remap `eval-*' commands to `pp-eval-*' globally.
Thus, `pp-eval-expression' replaces `eval-expression' and
`pp-eval-last-sexp' replaces `eval-last-sexp'.
This has no effect unless you use library `pp+.el'.")

(defvar sub-query-replace-w-options t
  "*Non-nil means remap `query-replace' to `query-replace-w-options' globally.
This has no effect unless you use library `replace+.el'.")

(defvar sub-quit-window-delete (fboundp 'quit-restore-window) ; Emacs 24.3+
  "*Non-nil means remap `quit-window' to `quit-window-delete' globally.
This has no effect unless you use library `misc-cmds.el' and Emacs
24.4 or later.")

(defvar sub-recenter-top-bottom t
  "*Non-nil means remap `recenter' to `sub-recenter-top-bottom' globally.
This has no effect unless you use library `misc-cmds.el'.")

(defvar sub-transpose-sexps t
  "*Non-nil means remap `transpose-sexps' to `reversible-transpose-sexps'.
This has no effect unless you use library `misc-cmds.el'.")


;;; Do these all *after* load `menu-bar+.el', since that sets original bindings.

(eval-after-load "frame-cmds"
  '(progn
    (when sub-delete-windows-for
      (remap-command 'delete-window 'delete-windows-for global-map))
    (when sub-clone-frame
      (remap-command 'make-frame-command 'clone-frame global-map))))
(eval-after-load "replace+"
  '(when sub-query-replace-w-options
    (remap-command 'query-replace 'query-replace-w-options global-map)))
(eval-after-load "misc-cmds"
  '(when sub-kill-buffer-and-its-windows
    (remap-command 'kill-buffer 'kill-buffer-and-its-windows global-map)))
(eval-after-load "pp+"
  '(when sub-pp-evals
    (remap-command 'eval-last-sexp 'pp-eval-last-sexp global-map)
    (remap-command 'eval-expression 'pp-eval-expression global-map)))
(when (fboundp 'buffer-menu)
  (remap-command 'list-buffers 'buffer-menu global-map)) ; In `buff-menu+.el'.
(eval-after-load "misc-cmds"
  '(progn
    (when sub-*-of-line
      (cond ((fboundp 'move-beginning-of-line)
             (remap-command 'move-beginning-of-line 'beginning-of-line+ global-map)
             (remap-command 'move-end-of-line 'end-of-line+ global-map))
            (t
             (remap-command 'beginning-of-line 'beginning-of-line+ global-map)
             (remap-command 'end-of-line 'end-of-line+ global-map)))
      (when (boundp 'visual-line-mode-map)
        (define-key visual-line-mode-map [remap move-beginning-of-line] nil)
        (define-key visual-line-mode-map [remap move-end-of-line]       nil)
        (define-key visual-line-mode-map [home] 'beginning-of-line+)
        (define-key visual-line-mode-map [end]  'end-of-line+)
        (define-key visual-line-mode-map "\C-a" 'beginning-of-visual-line+)
        (define-key visual-line-mode-map "\C-e" 'end-of-visual-line+)))
    (when sub-recenter-top-bottom
      (remap-command 'recenter 'recenter-top-bottom global-map))
    (when sub-transpose-sexps
      (remap-command 'transpose-sexps 'reversible-transpose-sexps global-map))))
(eval-after-load "misc-cmds"
  '(when sub-quit-window-delete
    (remap-command 'quit-window 'quit-window-delete global-map)))

;;;;;;;;;;;;;;;;;;;;;;;

(provide 'setup-keys)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; setup-keys.el ends here
#+end_src

** thumb-frm.el

#+call: hash() :exports none

#+RESULTS:
: 20210601222933145700100

#+name: 20210601222933145700100
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; thumb-frm.el --- Commands for thumbnail frames.
;;
;; Filename: thumb-frm.el
;; Description: Commands for thumbnail frames.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 2004-2018, Drew Adams, all rights reserved.
;; Created: Fri Dec 10 16:44:55 2004
;; Version: 0
;; Package-Requires: ((frame-fns "0") (frame-cmds "0"))
;; Last-Updated: Mon Jan  1 16:07:43 2018 (-0800)
;;           By: dradams
;;     Update #: 1801
;; URL: https://www.emacswiki.org/emacs/download/thumb-frm.el
;; Doc URL: https://www.emacswiki.org/emacs/FisheyeWithThumbs
;; Keywords: frame, icon
;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   `avoid', `frame-cmds', `frame-fns', `misc-fns', `strings',
;;   `thingatpt', `thingatpt+'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;    Shrink frames to a thumbnail size and restore them again.
;;
;;  User option `thumfr-frame-parameters' defines the appearance of
;;  the thumbnail frames.  If you change it and set the new definition
;;  for the current session you can immediately see the effect in all
;;  of your thumbnail frames.
;;
;;  By default, `thumfr-frame-parameters' gives you thumbnail frames
;;  that:
;;
;;   * have no menu bar or tool bar
;;   * have a 6x6-pixel scroll bar
;;   * are 30% transparent when not selected (opaque when selected)
;;
;;  Commands `thumfr-toggle-thumbnail-frame', `thumfr-thumbify-frame',
;;  and `thumfr-dethumbify-frame' thumbify and dethumbify an
;;  individual frame.  If option `thumfr-thumbify-dont-iconify-flag'
;;  is non-nil (the default), then keys (e.g. `C-z') that normally
;;  iconify and deiconify will instead thumbify and dethumbify.
;;
;;  Command `thumfr-thumbify-other-frames', alias `thumfr-fisheye',
;;  shrinks all frames except the selected frame to a thumbnail size.
;;  The thumbnail frames are stacked from top to bottom, left to right
;;  on your display.  This provides a kind of "fisheye" view of the
;;  frames you are using.  Command `thumfr-dethumbify-all-frames'
;;  restores all thumbnail frames to full size.
;;
;;  Command `thumfr-stack-thumbnail-frames' neatly stacks all of the
;;  thumbnail frames along a display edge.  You can use it at any
;;  time, and it is called automatically by `thumfr-fisheye'.  Which
;;  display edge to stack along (left, right, top, or bottom), and
;;  which direction (up, down, to-left or to-right), is determined by
;;  option `thumfr-stack-display-edge'.  The stacking order is
;;  determined by option `thumfr-sort-function'.  You can turn sorting
;;  on and off using command
;;  `thumfr-toggle-sort-thumbnail-frame-stack'.
;;
;;  By default, this library provides thumbifying and dethumbifying as
;;  a *replacement* for iconifying and deiconifying.  Whenever option
;;  `thumfr-thumbify-dont-iconify-flag' is non-nil, loading the
;;  library changes the standard commands `iconify-frame' and
;;  `iconify-or-deiconify-frame' so that they use thumbnail frames
;;  instead of desktop icons.  To prevent this thumbnail behavior, you
;;  can customize `thumfr-thumbify-dont-iconify-flag' to nil.
;;  Alternatively, you can deactivate (`ad-deactivate') the advice
;;  imposed here on these functions, to restore their original
;;  behavior.
;;
;;  The original behavior of commands `iconify-frame' and
;;  `iconify-or-deiconify-frame' is available using commands
;;  `thumfr-really-iconify-frame' and
;;  `thumfr-really-iconify-or-deiconify-frame'.  In particular, these
;;  commands can be used to iconify even if you bind [iconify-frame]
;;  in `special-event-map' (see below).
;;
;;  You can iconify or deiconify all thumbnail frames (that is, only
;;  the thumbnail frames), to get them out of the way and bring them
;;  back.  Use commands `thumfr-iconify-thumbnail-frames' and
;;  `thumfr-deiconify-thumbnail-frames' to do this.
;;
;;  Emacs built-in function `raise-frame' is redefined here to also
;;  dethumbify.  The original behavior of `raise-frame' is available
;;  in command `thumfr-only-raise-frame'.
;;
;;  You can cycle among the visible frames in two ways, applying
;;  `thumfr-fisheye' to each in turn.  The first way is using commands
;;  `thumfr-fisheye-previous-frame' and `thumfr-fisheye-next-frame'
;;  (which you can bind to, for instance, `C-M-prior' and `C-m-next').
;;  The second way is using command `thumfr-doremi-thumbnail-frames+'
;;  plus the arrow keys or mouse wheel.
;;
;;  To be able to use `thumfr-doremi-thumbnail-frames+', you need
;;  library `doremi-frm.el' (which in turn requires libraries
;;  `hexrgb.el', `faces+.el', `doremi.el', and perhaps `ring+.el',
;;  depending on your Emacs version).  The only libraries strictly
;;  required by `thumb-frm.el' are `frame-fns.el' and `frame-cmds.el'.
;;
;;  A more comprehensive, lower-level way of substituting thumbifying
;;  for iconifying is to do the following in your init file:
;;
;;    (define-key special-event-map [iconify-frame]
;;                'thumfr-thumbify-frame-upon-event)
;;
;;  In effect, this thumbifies any frame as soon as it is iconified,
;;  no matter how it was iconified.  In particular, this will let you
;;  use the window-manager "minimize" frame button (usually at the
;;  upper left or right frame corner) to thumbify.
;;
;;  Be aware of this fact/feature, which is true of any binding on
;;  keymap `special-event-map': The event interrupts any key sequence
;;  in progress, to invoke its command, and then the key sequence as a
;;  whole is processed, ignoring the special event.
;;
;;  For example, assuming that event `iconify-frame' occurs whenever
;;  you use a window-manager button (e.g. in the title bar) or menu
;;  item to minimize (iconify) a frame, if you do `C-x
;;  <click-the-minimize-button> b', then: (1) as soon as you click the
;;  minimize button the frame is thumbified, and (2) when you hit `b'
;;  the key sequence `C-x b' is processed (e.g. `switch-to-buffer'
;;  prompts you for a buffer name).  I mention this not because it is
;;  a useful feature but in order to avoid confusion.
;;
;;  If you do bind `thumfr-thumbify-frame-upon-event' to
;;  `iconify-frame', be aware that `thumfr-thumbify-dont-iconify-flag'
;;  will no longer have any effect: Emacs will *always* thumbify
;;  instead of iconify (except for functions `really-iconify-*frame',
;;  which are designed to counter this).  If you try this behavior and
;;  then wish to cancel it, to once again allow iconification, use
;;  this code:
;;
;;  In Emacs 20 or prior:
;;    (define-key special-event-map [iconify-frame] 'ignore-event)
;;
;;  In Emacs 21 or later:
;;    (define-key special-event-map [iconify-frame] 'ignore)
;;
;;
;;  Other user options (variables) not mentioned above are these:
;;
;;    `thumfr-font-difference'             - Zoom of thumbnail frames.
;;    `thumfr-rename-when-thumbify-flag'   - Rename frame to buffer.
;;    `thumfr-stack-display-edge'         - Display edge for stacking.
;;    `window-mgr-title-bar-pixel-width'   - Thickness of title bar.
;;
;;
;;  IMPORTANT:
;;
;;    Thumbnail frames are *FULLY FUNCTIONAL*.  In particular, their
;;    buffers are *NOT* read-only in any way.  You can edit their
;;    buffers normally, even if you can't see what you're doing :-).
;;
;;    You can also scroll and search their buffers.  You can thumbify
;;    the frame of a progressive output buffer, to monitor the output
;;    from 4,000 meters as it is produced.  In other words, you can
;;    interactive with thumbnail frames in the usual ways.  They are
;;    not special; they are just small.
;;
;;  Functions defined here:
;;
;;    `set-frame-parameter' (Emacs < 22),
;;    `thumfr-culled-thumbnail-frames',
;;    `thumfr-deiconify-thumbnail-frames', `thumfr-delete-if-not',
;;    `thumfr-dethumbify-all-frames', `thumfr-dethumbify-frame',
;;    `thumfr-doremi-thumbnail-frames+', `thumfr-fisheye',
;;    `thumfr-fisheye-next-frame', `thumfr-fisheye-previous-frame',
;;    `thumfr--frame-parameters-:set-function',
;;    `thumfr-iconify-thumbnail-frames', `thumfr-only-raise-frame',
;;    `thumfr-nset-difference', `thumfr-next-stack-position',
;;    `thumfr-really-iconify-frame',
;;    `thumfr-really-iconify-or-deiconify-frame', `thumfr-remove-if',
;;    `thumfr-remove-if-not', `thumfr-set-difference',
;;    `thumfr-stack-thumbnail-frames', `thumfr-sort-by-name',
;;    `thumfr-sort-by-window-id', `thumfr-thumbify-frame',
;;    `thumfr-thumbnail-frame-p', `thumfr-thumbnail-frames',
;;    `thumfr-thumbify-frame-upon-event',
;;    `thumfr-thumbify-other-frames', `thumfr-thumfr-parameter-p',
;;    `thumfr-toggle-sort-thumbnail-frame-stack',
;;    `thumfr-toggle-thumbnail-frame'.
;;
;;
;;  User options (variables) defined here:
;;
;;    `thumfr-font-difference', `thumfr-thumbify-dont-iconify-flag',
;;    `thumfr-frame-parameters', `thumfr-rename-when-thumbify-flag',
;;    `thumfr-sort-function', `thumfr-stack-display-edge',
;;    `window-mgr-title-bar-pixel-width'.
;;
;;
;;  Internal variables defined here:
;;
;;    `thumfr-last-row-show', `thumfr-last-sort-function',
;;    `thumfr-next-stack-xoffset', `thumfr-next-stack-yoffset'.
;;
;;
;;  ***** NOTE: These EMACS functions have been ADVISED or REDEFINED:
;;
;;  `iconify-frame' - Thumbify if `thumfr-thumbify-dont-iconify-flag'.
;;  `iconify-or-deiconify-frame' - Similar to `iconify-frame', plus
;;                                 dethumbify if already a thumbnail.
;;  `raise-frame' - Dethumbify also, if a thumbnail.
;;
;;
;;  Put this in your init file (`~/.emacs'): (require 'thumb-frm)
;;
;;  Suggested key bindings:
;;
;;   (global-set-key [(shift mouse-3)]
;;                   'thumfr-toggle-thumbnail-frame)
;;   (global-set-key [(shift control mouse-3)]
;;                   'thumfr-thumbify-other-frames)
;;   (global-set-key [(shift control ?z)]
;;                   'thumfr-thumbify-other-frames)
;;   (global-set-key [(shift control ?p)]
;;                   'thumfr-fisheye-previous-frame)
;;   (global-set-key [(shift control ?n)]
;;                   'thumfr-fisheye-next-frame)
;;   (global-set-key [(control meta ?z)]
;;                   'thumfr-really-iconify-or-deiconify-frame)
;;
;;   ;; Make the window-manager "minimize" button thumbify instead.
;;   (define-key special-event-map [iconify-frame]
;;               'thumfr-thumbify-frame-upon-event)
;;
;;   ;; Add `thumfr-doremi-thumbnail-frames+' to the Do Re Mi commands
;;   ;; - see library `doremi-frm.el'.
;;   (unless (fboundp 'doremi-prefix)
;;     (defalias 'doremi-prefix (make-sparse-keymap))
;;     (defvar doremi-map (symbol-function 'doremi-prefix)
;;       "Keymap for Do Re Mi commands."))
;;   (define-key global-map "\C-xt"  'doremi-prefix)
;;   (define-key global-map "\C-xte"
;;               'thumfr-doremi-thumbnail-frames+) ; "Eye"
;;
;;   Keep in mind also that if `thumfr-thumbify-dont-iconify-flag' is
;;   non-nil then keys bound to (de-)iconifying commands, such as
;;   `C-z', will instead (de)thumbify.  (This is not true, however, if
;;   `thumfr-thumbify-frame-upon-event' is bound to `iconify-frame'.
;;   Such a binding causes `thumfr-thumbify-dont-iconify-flag' not to
;;   have any effect - Emacs *always* thumbifies instead of
;;   iconifying, except for commands like `really-iconify-*frame'.)
;;
;;
;;  See also these libraries for other frame commands:
;;
;;     `autofit-frame.el' - Automatically fit each frame to its
;;                          selected window.  Uses `fit-frame.el'.
;;
;;     `fit-frame.el'     - 1) Fit a frame to its selected window.
;;                          2) Incrementally resize a frame.
;;
;;     `doremi-frm.el'    - Incrementally adjust frame properties
;;                          using arrow keys and/or mouse wheel.
;;
;;     `frame-cmds.el'    - Miscellaneous frame and window commands.
;;
;;     `zoom-frm.el'      - Zoom a frame, so that its font becomes
;;                          larger or smaller.
;;
;;  Acknowledgements (thanks):
;;    Michael Cadilhac [Michael.Cadilhac-@t-lrde.epita.fr] for a tip
;;      on using `discard-input' to effectively nullify
;;      `special-event-map' bindings (used in
;;      `really-iconify-[or-deiconify]frame').
;;
;;  TO DO?:
;;
;;     Make thumbnail frames read-only, to prevent inadvertent
;;     changes.  How to do so? Could make all buffers in frame's
;;     buffer-list r-o, but that would affect the buffer on
;;     non-thumbnail frames too.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;;
;; 2017/12/21 dadams
;;     thumfr-thumbify-frame:
;;       Change to thumfr-frame-parameters before changing font size.  Needed for Emacs 25+.
;; 2015/09/13 dadams
;;     thumfr-frame-parameters: Added alpha parameter to default value.
;;     thumfr-thumbify-frame: Added (alpha . 100) to NON-TF-PARAMS, if absent from FRAME.
;; 2014/11/17 dadams
;;     Added: thumfr--frame-parameters-:set-function.
;;     thumfr-frame-parameters: Use thumfr--frame-parameters-:set-function.  Need for Emacs 20.
;; 2014/08/27 dadams
;;     thumfr-frame-parameters: Added scroll-bar-height.
;; 2013/08/09 dadams
;;     Added: thumfr-thumfr-parameter-p.
;;     *-(de)thumbify-frame: Exclude thumfr-thumfr-parameter-p.
;; 2013/08-07 dadams
;;     Rewrite: Store info in frame parameters instead of vars thumfr(-non)-thumbnail-frames.
;;       Removed: thumfr(-non)-thumbnail-frames (vars), thumfr-cull-thumbnail-frames.
;;       *-frame-parameters, *-(de)thumbify-frame, *-thumbnail-frame-p,
;;         *-toggle-thumbnail-frame, *-thumbify-other-frames,
;;         *-(stack|(de)iconify)-thumbnail-frames, thumfr-sort-by-(name|window-id):
;;           Use frames & frame parameters thumfr(-non)-thumbnail-frame, not alist frame specs.
;;       Added: thumfr-thumbnail-frames (function), thumfr-remove-if(-not),
;;              thumfr-culled-thumbnail-frames, set-frame-parameter (Emacs < 22).
;;       thumfr-dethumbify-all-frames: use thumfr-culled-thumbnail-frames, not *-cull-*.
;; 2013/05/15 dadams
;;     thumfr-thumbify-frame: Handle font-too-small signal: try smaller thumfr-font-difference.
;; 2013/04/21 dadams
;;     thumfr-dethumbify-all-frames: Added prefix arg behavior (arg ICONIFIED-ALSO-P).
;;     thumfr-cull-thumbnail-frames: Added optional arg KEEP-ICONIFIED-P.
;;     thumfr-deiconify-thumbnail-frames: Pass arg to thumfr-cull-thumbnail-frames (bug fix).
;; 2013/04/17 dadams
;;     thumfr-frame-parameters: Added :set.  Added (scroll-bar-width . 6).
;;     Moved defvars before defcustoms (thumfr-frame-parameters uses thumfr-thumbnail-frames).
;;     Removed defadvice for *-mode (just use :set for thumfr-frame-parameters).
;; 2012/03/02 dadams
;;     Added thumfr-delete-if-not, thumfr-(n)set-difference: to avoid runtime load of cl.el.
;;     thumfr-thumbify-other-frames: Use thumfr-nset-difference.
;;     thumfr-cull-thumbnail-frames: Use thumfr-delete-if-not.
;; 2011/12/03 dadams
;;     Fixed menu-bar-mode, tool-bar-mode, scroll-bar-mode, fringe-mode: Frame is car of entry.
;; 2011/11/25 dadams
;;     menu-bar-mode, tool-bar-mode, scroll-bar-mode, fringe-mode: Ensure frame is live.
;; 2011/04/16 dadams
;;     iconify-frame: Fix for lexbind Emacs 24: replace named arg FRAME by (ad-get-arg 0).
;; 2011/01/04 dadams
;;     Added autoload cookies for defgroup, defcustom, and cmd thumfr-stack-thumbnail-frames.
;; 2009/11/07 dadams
;;     Renamed: thumfr-doremi-thumbnail-frames to thumfr-doremi-thumbnail-frames+.
;; 2009/05/17 dadams
;;     Added advice for: menu-bar-mode, tool-bar-mode, scroll-bar-mode, fringe-mode.
;;     Renamed everything to have prefix thumfr- (not thumbfrm-).
;;     Renamed: frame-thumbnail-font-difference to thumfr-font-difference,
;;              thumbify-instead-of-iconify-flag to thumfr-thumbify-dont-iconify-flag,
;;              rename-frame-when-thumbify-flag to thumfr-rename-when-thumbify-flag.
;; 2009/04/01 dadams
;;     frame-thumbnail-font-difference:
;;       Use 8 as default value.  Added note about error message in doc string.
;; 2009/03/28 dadams
;;     Removed require of doremi-frm.el - moved it to command doremi-thumbnail-frames.
;; 2009/01/30 dadams
;;     frame-thumbnail-font-difference: Removed temporary hack - Emacs 23 bug #119 was fixed.
;;     thumbfrm-frame-parameters: Don't remove scroll bar.  Users can do that by customizing.
;; 2008/12/13 dadams
;;     frame-thumbnail-font-difference: Hacked it for Emacs 23 - use 8, not 10 pts.
;; 2008/09/21 dadams
;;     thumbfrm-sort-by-name: Respect read-file-name-completion-ignore-case.
;; 2007/09/14 dadams
;;      (de)thumbify-frame: Wrap frame changes in condition-case and undo them if error.
;; 2006/08/07 dadams
;;      dethumbify-frame: raise-frame and give it focus.  Reported Emacs bug:
;;                        sends front Windows app to the bottom of the stack.
;; 2006/01/07 dadams
;;      Added :link for sending bug report.
;; 2006/01/06 dadams
;;      Added :link.
;; 2005/12/03 dadams
;;     Changed suggested bindings.
;; 2005/07/25 dadams
;;     Added :prefix to defgroup.
;; 2005/06/26 dadams
;;     raise-frame: Cleaned up doc string.
;; 2005/05/15 dadams
;;     Renamed: minibuffer-frame to 1on1-minibuffer-frame.
;; 2005/05/09 dadams
;;     Added: thumbnail-frame-p.
;; 2005/05/06 dadams
;;     Added: thumbfrm-next-stack-xoffset and thumbfrm-next-stack-yoffset.  Use them in
;;            thumbify-frame and stack-thumbnail-frames to 1) return thumbified frame to
;;            its stacked position and 2) ensure that thumbifying uses next stack position.
;;     Added: thumbify-frame-upon-event.
;; 2005/04/19 dadams
;;     Protected fset 'only-raise-frame with fboundp.
;; 2005/01/26 dadams
;;     Added: fisheye-next-frame, fisheye-previous-frame.
;;     thumbfrm-stack-display-edge: use right+down as default value.
;; 2005/01/08 dadams
;;     Renamed doremi-grow-font to enlarge-font.  It is now defined in frame-cmds.el.
;; 2005/01/04 dadams
;;     Added rename-frame-when-thumbify-flag; use it in thumbify-frame.
;; 2004/12/25 dadams
;;     stack-thumbnail-frames: Allow any display edge in any direction.
;;     Added: next-stack-position, thumbfrm-frame-parameters,
;;            thumbfrm-last-row-show, thumbfrm-sort-by-window-id.
;;     thumbify-frame: Use thumbfrm-frame-parameters.
;; 2004/12/24 dadams
;;     Added: thumbfrm-stack-display-edge.
;; 2004/12/23 dadams
;;     stack-thumbnail-frames: Raise each frame, so title bars show.
;;         Sort frames.  Account for window-mgr title bar.  Use copy-sequence,
;;         so no side effects.
;;     Use defcustom for user vars.  Added defgroup thumbfrm.
;;     Added: thumbfrm-sort-function, thumbfrm-last-sort-function,
;;            thumbfrm-sort-by-name, toggle-sort-thumbnail-frame-stack,
;;            window-mgr-title-bar-pixel-width.
;;     cull-thumbnail-frames: Remove invisible and iconified frames also.
;; 2004/12/21 dadams
;;     frame-thumbnail-font-difference: Changed defvar to defcustom.
;;     Added: iconify-frame, iconify-or-deiconify-frame, really-iconify-frame,
;;        really-iconify-or-deiconify-frame, thumbify-instead-of-iconify-flag.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(require 'frame-cmds) ;; enlarge-font, rename-non-minibuffer-frame
(eval-when-compile (require 'cl-lib)) ;; case (plus, for Emacs 20: dolist)

;; Quiet the byte-compiler
(defvar read-file-name-completion-ignore-case) ; Emacs 22+

;;;;;;;;;;;;;;;;;;;;;



;;; INTERNAL VARIABLES ;;;;;;;;;;

(defvar thumfr-last-sort-function nil
  "Last non-nil value for `thumfr-sort-function' during this session.")

(defvar thumfr-last-row-show 0.7
  "Minimum amount showing of frames in last row (or column).
Set to 1.0 to see whole frames.
A smaller value uses display real estate better.")

(defvar thumfr-next-stack-xoffset nil
  "X offset for position to stack next thumbnail frame.")

(defvar thumfr-next-stack-yoffset nil
  "Y offset for position to stack next thumbnail frame.")

;; Just so we don't need to test boundp each time.
(defvar 1on1-minibuffer-frame nil)



;;; USER OPTIONS ;;;;;;;;;;;;;;;;

;;;###autoload
(defgroup Thumbnail-Frames nil
  "Commands for thumbnail frames"
  :prefix "thumfr-" :group 'frames :group 'convenience
  :link `(url-link :tag "Send Bug Report"
          ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
thumb-frm.el bug: \
&body=Describe bug here, starting with `emacs -q'.  \
Don't forget to mention your Emacs and library versions."))
  :link '(url-link :tag "Other Libraries by Drew"
          "https://www.emacswiki.org/emacs/DrewsElispLibraries")
  :link '(url-link :tag "Download" "https://www.emacswiki.org/emacs/download/thumb-frm.el")
  :link '(url-link :tag "Description"
          "https://www.emacswiki.org/emacs/FisheyeWithThumbs")
  :link '(emacs-commentary-link :tag "Commentary" "thumb-frm"))

;;;###autoload
(defcustom thumfr-font-difference 8
  "*Number of points for `thumfr-thumbify-frame' to decrease frame font.
This must be less than the current font size, since the new font size
cannot be less than 1 point.

If you get the error \"New font size is too small\" when you try to
thumbify a frame, then decrease `thumfr-font-difference'.

Note that the option value can be a negative integer, in which case
thumbifying actually increases the font and frame size, instead of
decreasing them."
  :type 'integer :group 'Thumbnail-Frames)

;;;###autoload
(defcustom thumfr-thumbify-dont-iconify-flag t
  "*Non-nil means thumbify frames instead of iconifying them."
  :type 'boolean :group 'Thumbnail-Frames)

;;;###autoload
(defcustom thumfr-rename-when-thumbify-flag t
  "*Non-nil means frames are renamed when thumbified.
The new name is the name of the current buffer."
  :type 'boolean :group 'Thumbnail-Frames)

;;;###autoload
(defcustom thumfr-stack-display-edge 'right+down
  "*Display edge to stack thumbnail frames along.
Possible values are symbols named EDGE+DIRECTION,
where EDGE is one of `left', `right', `top', and `bottom',
and DIRECTION is one of `up', `down', `to-left', and `to-right'.

For example, value `right+down' means to arrange thumbnail frames
along the right edge from top to bottom."
  :type
  '(choice
    (const
     :tag "Arrange thumbnail frames along display left, downward" left+down)
    (const
     :tag "Arrange thumbnail frames along display left, upward" left+up)
    (const
     :tag "Arrange thumbnail frames along display right, downward" right+down)
    (const
     :tag "Arrange thumbnail frames along display right, upward" right+up)
    (const
     :tag "Arrange thumbnail frames along display top, toward the right" top+to-right)
    (const
     :tag "Arrange thumbnail frames along display top, toward the left" top+to-left)
    (const
     :tag "Arrange thumbnail frames along display bottom, toward the right" bottom+to-right)
    (const
     :tag "Arrange thumbnail frames along display bottom, toward the left" bottom+to-left))
  :group 'Thumbnail-Frames)

;;;###autoload
(defun thumfr--frame-parameters-:set-function (sym defs)
  "Used for :set of `thumfr-frame-parameters' defcustom.
Needed because Emacs 20 does not have `dolist' without `cl.el'."
  (custom-set-default sym defs)
  (dolist (frm  (frame-list))
    (when (and (frame-live-p frm)  (frame-parameter frm 'thumfr-thumbnail-frame))
      (modify-frame-parameters frm thumfr-frame-parameters))))

;;;###autoload
(defcustom thumfr-frame-parameters
  '((menu-bar-lines . 0)
    (tool-bar-lines . 0)
    (scroll-bar-width . 6)
    (scroll-bar-height . 6)
    (alpha . (100 . 70)))               ; Ignored for Emacs < 23.
  "*Frame parameters for thumbnail frames.
Use this to show or hide things like the menu bar, tool bar, tab bar,
and scroll bars for thumbnail frames.  An `alpha' parameter controls
the frame transparency (Emacs 23+) - see (elisp) `Font and Color
Parameters'."
  :type '(repeat (cons symbol sexp))
  :group 'Thumbnail-Frames
  :set 'thumfr--frame-parameters-:set-function)

;;;###autoload
(defcustom thumfr-sort-function 'thumfr-sort-by-name
  "*Function to use for sorting the stacked thumbnail frames.
If nil, then no sorting is done.
Set this to `thumfr-sort-by-name' for alphabetical order.

The function should take two frames as arguments.  It should return
non-nil if the first frame comes before that of the second.  See, for
example, `thumfr-sort-by-name' and `thumfr-sort-by-window-id'.

Use `thumfr-toggle-sort-thumbnail-frame-stack' to turn sorting on
and off."
  :type '(choice (const :tag "No sorting" nil)
                 (const :tag "Sort by name" thumfr-sort-by-name)
                 (const :tag "Sort by name" thumfr-sort-by-window-id)
                 (function :tag "Another function"))
  :group 'Thumbnail-Frames)

(unless (boundp 'window-mgr-title-bar-pixel-width) ; Defined in `frame-cmds.el'.
  (defcustom window-mgr-title-bar-pixel-width 30
    "*Width of frame title bar provided by window manager, in pixels."
    :type 'integer :group 'Thumbnail-Frames)) ; Normally, the :group is `Frame-Commands'.




;;; FUNCTIONS ;;;;;;;;;;;;;;;;;;;

;; Standard definition from `frame.el'.  Define only if not defined (Emacs 22+ defines it).
(unless (fboundp 'set-frame-parameter)
  (defun set-frame-parameter (frame parameter value)
    "Set frame parameter PARAMETER to VALUE on FRAME.
If FRAME is nil, it defaults to the selected frame.
See `modify-frame-parameters'."
    (modify-frame-parameters frame (list (cons parameter value)))))


;; REPLACES ORIGINAL (built-in).
;; Thumbifies if `thumfr-thumbify-dont-iconify-flag'.
;;
(defadvice iconify-frame (around thumbify-replace-iconify activate)
  "Thumbify FRAME if `thumfr-thumbify-dont-iconify-flag'; else iconify.
To iconify a frame in spite of this flag, use
`\\[thumfr-really-iconify-frame]'."
  (if thumfr-thumbify-dont-iconify-flag
      (thumfr-thumbify-frame (ad-get-arg 0))
    ad-do-it))



;; REPLACES ORIGINAL.
;; Thumbifies/dethumbifies if `thumfr-thumbify-dont-iconify-flag'.
;;
(defadvice iconify-or-deiconify-frame
  (around thumbify-replace-iconify activate)
  "Thumbify frame if `thumfr-thumbify-dont-iconify-flag'; else iconify.
To iconify selected frame in spite of this flag, use
`\\[thumfr-really-iconify-or-deiconify-frame]'."
  (if thumfr-thumbify-dont-iconify-flag
      (thumfr-toggle-thumbnail-frame)
    ad-do-it))

;;;###autoload
(defun thumfr-thumbify-frame-upon-event (event)
  "Thumbify frame upon event EVENT.
To make the window-manager \"minimize\" button thumbify instead, bind
\[iconify-frame] to this command, as follows:
  (define-key special-event-map [iconify-frame]
              'thumfr-thumbify-frame-upon-event)
That will effectively replace iconification by thumbification
everywhere, except for `thumfr-really-iconify-frame' and
`thumfr-really-iconify-or-deiconify-frame'."
  (interactive "e")
  (select-frame (posn-window (event-start event)))
  (make-frame-visible)
  (thumfr-toggle-thumbnail-frame))

;; Thanks to Michael Cadilhac [Michael.Cadilhac-@t-lrde.epita.fr]
;; for a tip on using `discard-input' in a situation like this.
;;;###autoload
(defun thumfr-really-iconify-frame (&optional frame)
  "Iconify FRAME, even if `thumfr-thumbify-dont-iconify-flag' is non-nil."
  (interactive)
  (setq frame  (or frame  (selected-frame)))
  (let ((thumfr-thumbify-dont-iconify-flag  nil))
    ;; Ensure we iconify, even if [iconify-frame] is bound in `special-event-map'.
    (iconify-frame frame)
    (while (not (input-pending-p)) (sit-for 0))
    (discard-input)))

;; Thanks to Michael Cadilhac [Michael.Cadilhac-@t-lrde.epita.fr]
;; for a tip on using `discard-input' in a situation like this.
;;;###autoload
(defun thumfr-really-iconify-or-deiconify-frame ()
  "Iconify or deiconify frame, even if `thumfr-thumbify-dont-iconify-flag'
is non-nil."
  (interactive)
  (let ((thumfr-thumbify-dont-iconify-flag  nil))
    (iconify-or-deiconify-frame)
    ;; Ensure we iconify, even if [iconify-frame] is bound in `special-event-map'.
    (while (not (input-pending-p)) (sit-for 0))
    (discard-input)))

(defun thumfr-thumfr-parameter-p (parameter+value)
  "Return non-nil if PARAMETER+VALUE is a `thumb-frm.el' frame parameter.
PARAMETER+VALUE is a frame-parameter cons: (PARAMETER . VALUE).
This means that PARAMETER is either `thumbfr-thumbnail-frame' or
`thumbfr-non-thumbnail-frame'."
  (memq (car parameter+value) '(thumfr-thumbnail-frame thumfr-non-thumbnail-frame)))

;;;###autoload
(defun thumfr-thumbify-frame (&optional frame)
  "Create a thumbnail version of FRAME (default: selected frame).
Variable `thumfr-frame-parameters' is used to determine
which frame parameters (such as `menu-bar-lines') to remove."
  (interactive)
  (setq frame  (or frame  (selected-frame)))
  (let* ((fr-params      (frame-parameters frame))
         (tf-params      (frame-parameter frame 'thumfr-non-thumbnail-frame))
         (non-tf-params  (thumfr-remove-if #'thumfr-thumfr-parameter-p fr-params)))
    (unless (frame-parameter frame 'alpha) ; Ensure that opacity will be restored.
      (setq non-tf-params  (cons '(alpha . 100) non-tf-params)))
    (when thumfr-rename-when-thumbify-flag (rename-non-minibuffer-frame))
    (unless (frame-parameter frame 'thumfr-thumbnail-frame) ; No-op if already a thumbnail.
      (set-frame-parameter frame 'thumfr-thumbnail-frame     non-tf-params)
      (set-frame-parameter frame 'thumfr-non-thumbnail-frame nil)
      (condition-case thumfr-thumbify-frame
          (progn
            ;; Change to `thumfr-frame-parameters' first.  Needed for Emacs 25+.
            ;; Otherwise, the thumbified frame is too tall.
            (modify-frame-parameters frame thumfr-frame-parameters)
            (enlarge-font (- thumfr-font-difference) frame) ; In `frame-cmds.el'.
            (when tf-params (modify-frame-parameters frame tf-params))
            (when thumfr-next-stack-xoffset
              (set-frame-position frame thumfr-next-stack-xoffset
                                  thumfr-next-stack-yoffset)
              (setq thumfr-next-stack-xoffset  nil
                    thumfr-next-stack-yoffset  nil)))
            ;; See comment above.  Can no longer do this after changing font size.
            ;; (modify-frame-parameters frame thumfr-frame-parameters)

        (font-too-small                 ; Try again, with a larger font.
         (set-frame-parameter frame 'thumfr-non-thumbnail-frame tf-params)
         (set-frame-parameter frame 'thumfr-thumbnail-frame     nil)
         (unless (> thumfr-font-difference 0)
           (error (error-message-string thumfr-thumbify-frame)))
         (let ((thumfr-font-difference  (1- thumfr-font-difference)))
           (thumfr-thumbify-frame frame)))
        (error
         (set-frame-parameter frame 'thumfr-non-thumbnail-frame tf-params)
         (set-frame-parameter frame 'thumfr-thumbnail-frame     nil)
         (error (error-message-string thumfr-thumbify-frame)))))))

;;;###autoload
(defun thumfr-dethumbify-frame (&optional frame)
  "Restore thumbnail FRAME to original size (default: selected frame)."
  (interactive)
  (setq frame  (or frame  (selected-frame)))
  (let* ((fr-params      (frame-parameters frame))
         (non-tf-params  (frame-parameter frame 'thumfr-thumbnail-frame))
         (tf-params      (thumfr-remove-if #'thumfr-thumfr-parameter-p fr-params)))
    (when non-tf-params                 ; No-op if not a thumbnail.
      (set-frame-parameter frame 'thumfr-non-thumbnail-frame tf-params)
      (set-frame-parameter frame 'thumfr-thumbnail-frame     nil)
      (condition-case thumfr-dethumbify-frame
          (progn
            (enlarge-font thumfr-font-difference frame) ; In `frame-cmds.el'.
            (modify-frame-parameters frame non-tf-params))
        (error
         (set-frame-parameter frame 'thumfr-thumbnail-frame     non-tf-params)
         (set-frame-parameter frame 'thumfr-non-thumbnail-frame nil)
         (error (error-message-string thumfr-dethumbify-frame))))
      (select-frame-set-input-focus frame)
      (thumfr-only-raise-frame frame))))

;;;###autoload
(defsubst thumfr-thumbnail-frame-p (&optional frame)
  "Return non-nil if FRAME is a thumbnail."
  (interactive)
  (frame-parameter frame 'thumfr-thumbnail-frame))


(or (fboundp 'thumfr-only-raise-frame)
    (fset 'thumfr-only-raise-frame (symbol-function 'raise-frame)))

;; REPLACES ORIGINAL (built-in):
;; Also dethumbifies frame.
;;
(defun raise-frame (&optional frame)
  "Bring FRAME to the front, so it occludes any frames it overlaps.
If FRAME is invisible, make it visible.
If FRAME is a thumbnail frame (see `thumb-frm.el'), dethumbify it also.
If you do not specify a frame, the selected frame is used.

If Emacs is displaying on an ordinary terminal or other device that
does not support multiple overlapping frames, then do nothing.

The original behavior function `raise-frame', which does not also
dethumbify, is available as function `thumfr-only-raise-frame'."
  (unless frame (setq frame  (selected-frame)))
  (thumfr-only-raise-frame frame)
  (thumfr-dethumbify-frame frame))

;;;###autoload
(defun thumfr-toggle-thumbnail-frame (&optional frame)
  "If FRAME is a thumbnail, restore it; else thumbify it.
FRAME defaults to the selected frame."
  (interactive)
  (setq frame  (or frame  (selected-frame)))
  (if (thumfr-thumbnail-frame-p frame)
      (thumfr-dethumbify-frame frame)
    (thumfr-thumbify-frame frame)))

;;;###autoload
(defalias 'thumfr-fisheye 'thumfr-thumbify-other-frames)
;;;###autoload
(defun thumfr-thumbify-other-frames (&optional frame)
  "Thumbify all visible non-minibuffer frames except FRAME.
Dethumbify FRAME, if it is a thumbnail frame.
FRAME is the selected frame, by default."
  (interactive)
  (setq frame  (or frame  (selected-frame)))
  (thumfr-dethumbify-frame frame)
  (let ((other-frames  (visible-frame-list)))
    (setq other-frames  (delq frame other-frames)
          other-frames  (delq 1on1-minibuffer-frame other-frames))
    (dolist (fr  (thumfr-nset-difference other-frames (thumfr-thumbnail-frames)))
      (thumfr-thumbify-frame fr))
    (thumfr-stack-thumbnail-frames))
  frame)                                ; Return frame.

(defun thumfr-thumbnail-frames ()
  "Return the current list of visible thumbnail frames."
  (thumfr-remove-if-not #'thumfr-thumbnail-frame-p (visible-frame-list)))

(defun thumfr-culled-thumbnail-frames (&optional keep-iconified-p)
  "Return the list of thumbnail frames without iconified and useless frames.
Useless frames here means includes dead and invisible frames.
Non-nil optional arg KEEP-ICONIFIED-P means do not remove iconified frames."
  (let ((frs  ()))
    (dolist (fr  (thumfr-thumbnail-frames))
      (when (and (frame-live-p fr)
                 (frame-visible-p fr)
                 (or keep-iconified-p  (eq t (frame-visible-p fr))))
        (push fr frs)))
    frs))

;; Same as `bmkp-remove-if' in `bookmark+-1.el'.
(defun thumfr-remove-if (pred xs)
  "A copy of list XS with no elements that satisfy predicate PRED."
  (let ((result  ()))
    (dolist (x  xs)  (unless (funcall pred x) (push x result)))
    (nreverse result)))

;; Same as `bmkp-remove-if-not' in `bookmark+-1.el'.
(defun thumfr-remove-if-not (pred xs)
  "A copy of list XS with only elements that satisfy predicate PRED."
  (let ((result  ()))
    (dolist (x  xs)  (when (funcall pred x) (push x result)))
    (nreverse result)))

;; Define this to avoid requiring `cl.el' at runtime.
(defun thumfr-nset-difference (list1 list2 &optional key)
  "Combine LIST1 and LIST2 using a set-difference operation.
The resulting list contains all items that appear in LIST1 but not LIST2.
This is a destructive function; it reuses the storage of LIST1 and LIST2
whenever possible.

Optional arg KEY is a function used to extract the part of each list
element to compare."
  (if (or (null list1)  (null list2))
      list1
    (apply #'thumfr-set-difference list1 list2 key)))

;; Define this to avoid requiring `cl.el' at runtime.  Same as `icicle-set-difference'.
(defun thumfr-set-difference (list1 list2 &optional key)
  "Combine LIST1 and LIST2 using a set-difference operation.
Optional arg KEY is a function used to extract the part of each list
element to compare.

The result list contains all items that appear in LIST1 but not LIST2.
This is non-destructive; it makes a copy of the data if necessary, to
avoid corrupting the original LIST1 and LIST2."
  (if (or (null list1)  (null list2))
      list1
    (let ((keyed-list2  (and key  (mapcar key list2)))
          (result       ()))
      (while list1
        (unless (if key
                    (member (funcall key (car list1)) keyed-list2)
                  (member (car list1) list2))
          (setq result  (cons (car list1) result)))
        (setq list1  (cdr list1)))
      result)))

;;;###autoload
(defun thumfr-fisheye-previous-frame ()
  "Call `thumfr-fisheye' on the previous frame.
Thumbify all visible non-minibuffer frames except the previous frame.
Dethumbify the previous frame (if it is a thumbnail frame)."
  (interactive)
  (select-frame (thumfr-thumbify-other-frames (other-frame -1)))
  (message "%s" (get-frame-name)))

;;;###autoload
(defun thumfr-fisheye-next-frame ()
  "Call `thumfr-fisheye' on the next frame.
Thumbify all visible non-minibuffer frames except the next frame.
Dethumbify the next frame (if it is a thumbnail frame)."
  (interactive)
  (select-frame (thumfr-thumbify-other-frames (other-frame 1)))
  (message "%s" (get-frame-name)))

;;;###autoload
(defun thumfr-dethumbify-all-frames (&optional iconified-also-p)
  "Dethumbify all visible frames
restoring them to their states before they were thumbified.
With a prefix arg, restore also iconified frames, not just thumbified
frames."
  (interactive "P")
  (dolist (fr  (thumfr-culled-thumbnail-frames iconified-also-p))
    (thumfr-dethumbify-frame fr)))

;; New row (or column) offset is based on the size of the previous
;; frame, not the current frame, which is not really correct.  This is
;; easier to do, and works OK most of the time.  It is not ideal if
;; frame sizes vary a great deal.
;;
;;;###autoload
(defun thumfr-stack-thumbnail-frames ()
  "Stack thumbnail frames along edge of display
according to the direction of `thumfr-stack-display-edge'."
  (interactive)
  (let* ((display-width   (x-display-pixel-width))
         (display-height  (if (boundp '1on1-minibuffer-frame)
                              (frame-parameter 1on1-minibuffer-frame 'top)
                            (x-display-pixel-height)))
         (xstart          (if (memq thumfr-stack-display-edge
                                    '(right+down right+up top+to-left bottom+to-left))
                              display-width
                            0))
         (ystart          (if (memq thumfr-stack-display-edge
                                    '(bottom+to-right bottom+to-left left+up right+up))
                              display-height
                            0))
         (xoffset         xstart)
         (yoffset         ystart)
         (thumb-frs       (thumfr-culled-thumbnail-frames))
         last-fr)
    (when thumfr-sort-function (setq thumb-frs  (sort thumb-frs thumfr-sort-function)))

    ;; These cl-loops are similar, more or less symmetric.
    (case thumfr-stack-display-edge
      (left+down
       (dolist (fr  thumb-frs)
         (set-frame-position fr xoffset yoffset)
         (let ((next-position  (thumfr-next-stack-position
                                yoffset ystart (- display-height
                                                  window-mgr-title-bar-pixel-width)
                                                  ;;(frame-pixel-height fr)

                                #'+ (+ (frame-pixel-height fr)
                                       window-mgr-title-bar-pixel-width) #'>
                                xoffset xstart (- display-width (frame-pixel-width fr))
                                #'+ (frame-pixel-width fr) #'>)))
           (setq yoffset  (cdr next-position)
                 xoffset  (car next-position)))
         (thumfr-only-raise-frame fr))
       (when thumb-frs
         (setq thumfr-next-stack-xoffset  xoffset
               thumfr-next-stack-yoffset  yoffset)))
      (left+up
       (dolist (fr  thumb-frs)
         (setq last-fr  fr)
         (set-frame-position
          fr
          xoffset
          (max 0 (- yoffset window-mgr-title-bar-pixel-width (frame-pixel-height fr))))
         (let ((next-position  (thumfr-next-stack-position
                                yoffset ystart (truncate (* (frame-pixel-height fr)
                                                            thumfr-last-row-show))
                                #'-
                                (+ (frame-pixel-height fr) window-mgr-title-bar-pixel-width)
                                #'<
                                xoffset xstart (- display-width (frame-pixel-width fr))
                                #'+
                                (frame-pixel-width fr)
                                #'>)))
           (setq yoffset  (cdr next-position)
                 xoffset  (car next-position))))
       (dolist (fr  (nreverse thumb-frs)) (thumfr-only-raise-frame fr))
       (when thumb-frs
         (setq thumfr-next-stack-xoffset  xoffset
               thumfr-next-stack-yoffset  (max 0 (- yoffset window-mgr-title-bar-pixel-width
                                                    (frame-pixel-height last-fr))))))
      (right+down
       (dolist (fr  thumb-frs)
         (setq last-fr  fr)
         (set-frame-position fr (- xoffset (frame-pixel-width fr)) yoffset)
         (let ((next-position  (thumfr-next-stack-position
                                yoffset ystart (- display-height
                                                  window-mgr-title-bar-pixel-width)
                                                  ;;(frame-pixel-height fr)

                                #'+
                                (+ (frame-pixel-height fr) window-mgr-title-bar-pixel-width)
                                #'>
                                xoffset xstart 0
                                #'-
                                (frame-pixel-width fr)
                                #'<)))
           (setq yoffset  (cdr next-position)
                 xoffset  (car next-position)))
         (thumfr-only-raise-frame fr))
       (when thumb-frs
         (setq thumfr-next-stack-xoffset  (- xoffset (frame-pixel-width last-fr))
               thumfr-next-stack-yoffset  yoffset)))
      (right+up
       (dolist (fr  thumb-frs)
         (setq last-fr  fr)
         (set-frame-position
          fr
          (max 0 (- xoffset (frame-pixel-width fr)))
          (max 0 (- yoffset window-mgr-title-bar-pixel-width (frame-pixel-height fr))))
         (let ((next-position  (thumfr-next-stack-position
                                yoffset ystart (truncate (* (frame-pixel-height fr)
                                                            thumfr-last-row-show))
                                #'-
                                (+ (frame-pixel-height fr) window-mgr-title-bar-pixel-width)
                                #'<
                                xoffset xstart 0
                                #'-
                                (frame-pixel-width fr)
                                #'<)))
           (setq yoffset  (cdr next-position)
                 xoffset  (car next-position))))
       (dolist (fr  (nreverse thumb-frs)) (thumfr-only-raise-frame fr))
       (when thumb-frs
         (setq thumfr-next-stack-xoffset  (max 0 (- xoffset (frame-pixel-width last-fr)))
               thumfr-next-stack-yoffset  (max 0 (- yoffset window-mgr-title-bar-pixel-width
                                                    (frame-pixel-height last-fr))))))
      (top+to-right
       (dolist (fr  thumb-frs)
         (set-frame-position fr xoffset yoffset)
         (let ((next-position  (thumfr-next-stack-position
                                xoffset xstart (- display-width (frame-pixel-width fr))
                                #'+
                                (frame-pixel-width fr)
                                #'>
                                yoffset ystart (- display-height
                                                  window-mgr-title-bar-pixel-width
                                                  (frame-pixel-height fr))
                                #'+
                                (+ (frame-pixel-height fr) window-mgr-title-bar-pixel-width)
                                #'>)))
           (setq yoffset  (car next-position)
                 xoffset  (cdr next-position)))
         (thumfr-only-raise-frame fr))
       (when thumb-frs (setq thumfr-next-stack-xoffset  xoffset
                             thumfr-next-stack-yoffset  yoffset)))
      (top+to-left
       (dolist (fr  thumb-frs)
         (setq last-fr  fr)
         (set-frame-position fr (max 0 (- xoffset (frame-pixel-width fr))) yoffset)
         (let ((next-position  (thumfr-next-stack-position
                                xoffset xstart (truncate (* (frame-pixel-width fr)
                                                            thumfr-last-row-show))
                                #'-
                                (frame-pixel-width fr)
                                #'<
                                yoffset ystart (- display-height
                                                  window-mgr-title-bar-pixel-width
                                                  (frame-pixel-height fr))
                                #'+
                                (+ (frame-pixel-height fr) window-mgr-title-bar-pixel-width)
                                #'>)))
           (setq yoffset  (car next-position)
                 xoffset  (cdr next-position)))
         (thumfr-only-raise-frame fr))
       (when thumb-frs
         (setq thumfr-next-stack-xoffset  (max 0 (- xoffset (frame-pixel-width last-fr)))
               thumfr-next-stack-yoffset  yoffset)))
      (bottom+to-right
       (dolist (fr  thumb-frs)
         (setq last-fr  fr)
         (set-frame-position
          fr
          xoffset
          (max 0 (- yoffset window-mgr-title-bar-pixel-width (frame-pixel-height fr))))
         (let ((next-position  (thumfr-next-stack-position
                                xoffset xstart (- display-width (frame-pixel-width fr))
                                #'+
                                (frame-pixel-width fr)
                                #'>
                                yoffset ystart (- display-height
                                                  window-mgr-title-bar-pixel-width
                                                  (frame-pixel-height fr))
                                #'-
                                (+ (frame-pixel-height fr) window-mgr-title-bar-pixel-width)
                                #'<)))
           (setq yoffset  (car next-position)
                 xoffset  (cdr next-position))))
       (dolist (fr  (nreverse thumb-frs)) (thumfr-only-raise-frame fr))
       (when thumb-frs
         (setq thumfr-next-stack-xoffset  xoffset
               thumfr-next-stack-yoffset  (max 0 (- yoffset window-mgr-title-bar-pixel-width
                                                    (frame-pixel-height last-fr))))))
      (bottom+to-left
       (dolist (fr  thumb-frs)
         (setq last-fr  fr)
         (set-frame-position
          fr
          (max 0 (- xoffset (frame-pixel-width fr)))
          (max 0 (- yoffset window-mgr-title-bar-pixel-width (frame-pixel-height fr))))
         (let ((next-position  (thumfr-next-stack-position
                                xoffset xstart (* (truncate (frame-pixel-width fr)
                                                            thumfr-last-row-show))
                                #'-
                                (frame-pixel-width fr)
                                #'<
                                yoffset ystart (- display-height
                                                  window-mgr-title-bar-pixel-width
                                                  (frame-pixel-height fr))
                                #'-
                                (+ (frame-pixel-height fr) window-mgr-title-bar-pixel-width)
                                #'<)))
           (setq yoffset  (car next-position)
                 xoffset  (cdr next-position))))
       (dolist (fr  (nreverse thumb-frs)) (thumfr-only-raise-frame fr))
       (when thumb-frs
         (setq thumfr-next-stack-xoffset  (max 0 (- xoffset (frame-pixel-width last-fr)))
               thumfr-next-stack-yoffset  (max 0 (- yoffset window-mgr-title-bar-pixel-width
                                                    (frame-pixel-height last-fr)))))))))

;; Helper function for `thumfr-stack-thumbnail-frames'.
(defun thumfr-next-stack-position
  (major-position major-start major-limit major-+/- major-increment major-</>
   minor-position minor-start minor-limit minor-+/- minor-increment minor-</>)
  "Return new position for next-stacked frame.
MAJOR* are the settings for the major direction of movement (x or y).
MINOR* are the settings for the minor direction of movement (x or y).
New position is returned as a cons: (MINOR-POSITION . MAJOR-POSITION).

,*-POSITION, as input, are the positions of the current frame.
,*-START are the starting positions for the first row (or column).
,*-LIMIT are the maximum positions on the display.
,*-+/- are functions `+' or `-', used to increment or decrement.
,*-</> are functions `<' or `>', used to compare."
  (setq major-position  (funcall major-+/- major-position major-increment))
  (when (funcall major-</> major-position major-limit)
    (setq major-position  major-start
          minor-position  (funcall minor-+/- minor-position minor-increment))
    (when (funcall minor-</> minor-position minor-limit)
      (setq minor-position  minor-start)))
  (cons minor-position major-position))


;;;###autoload
(defun thumfr-toggle-sort-thumbnail-frame-stack (force-p)
  "Toggle stacking thumbnail frames between sorting and not.
Non-nil prefix FORCE-P => Sort iff FORCE-P >= 0."
  (interactive "P")
  (cond (thumfr-sort-function
         (setq thumfr-last-sort-function  thumfr-sort-function) ; Save it.
         (when (or (null force-p)  (<= (prefix-numeric-value force-p) 0))
           (setq thumfr-sort-function  nil))) ; Don't sort.
        ((or (null force-p)  (> (prefix-numeric-value force-p) 0)) ; Ask to sort
         (if thumfr-last-sort-function ; Sort using saved sort fn.
             (setq thumfr-sort-function  thumfr-last-sort-function)
           (error "You first need to set `thumfr-sort-function'"))))
  (if thumfr-sort-function
      (message "Stacking of thumbnail frames is now sorted using `%s'."
               thumfr-sort-function)
    (message "Stacking of thumbnail frames is longer sorted.")))

;;;###autoload
(defun thumfr-iconify-thumbnail-frames ()
  "Iconify all thumbnail frames."
  (interactive)
  (let ((thumfr-thumbify-dont-iconify-flag  nil))
    (dolist (fr  (thumfr-culled-thumbnail-frames))
      (iconify-frame fr))))

;;;###autoload
(defun thumfr-deiconify-thumbnail-frames ()
  "Deiconify all thumbnail frames."
  (interactive)
  (dolist (fr  (thumfr-culled-thumbnail-frames 'KEEP-ICONIFIED))
    (make-frame-visible fr)))

;; Define this here to avoid requiring `cl.el' at runtime.
(defun thumfr-delete-if-not (predicate list)
  "Remove all occurrences of ITEM in LIST that do not satisfy PREDICATE.
This is a destructive function: It reuses the storage of LIST whenever
possible."
  (while (and list  (not (funcall predicate (car list))))
    (setq list  (cdr list)))
  (let ((cl-p  list))
    (while (cdr cl-p)
      (if (not (funcall predicate (cadr cl-p)))
          (setcdr cl-p (cddr cl-p))
        (setq cl-p  (cdr cl-p)))))
  list)

;;;###autoload
(defun thumfr-doremi-thumbnail-frames+ ()
  "Successively cycle through frames with `thumfr-fisheye'."
  (interactive)
  (unless (require 'doremi-frm nil t)
    (error "You need library `doremi-frm.el' to use this command"))
  (let ((other-frames  (visible-frame-list)))
    (setq other-frames  (delq 1on1-minibuffer-frame other-frames))
    (doremi (lambda (fr) (thumfr-thumbify-other-frames fr) fr)
            (selected-frame)
            nil                         ; ignored
            nil                         ; ignored
            other-frames)))

(defun thumfr-sort-by-name (frame1 frame2)
  "Alphabetical comparison of names of frames in FRAME1 and FRAME2.
Return non-nil if name of FRAME1 comes before that of FRAME2.
However, if the frame names name buffers visiting files, then compare
the names respecting `read-file-name-completion-ignore-case'."
  (let ((fname1  (frame-parameter frame1 'name))
        (fname2  (frame-parameter frame2 'name)))
    (if (or (not (boundp 'read-file-name-completion-ignore-case))
            (not read-file-name-completion-ignore-case))
        (string-lessp fname1 fname2)
      (let* ((buf1      (get-buffer fname1))
             (bufname1  (and buf1  (buffer-file-name buf1)))
             (file1     (and bufname1  (upcase bufname1)))
             (buf2      (get-buffer fname2))
             (bufname2  (and buf2  (buffer-file-name buf2)))
             (file2     (and bufname2  (upcase bufname2))))
        (if (and file1  file2)
            (string-lessp file1 file2)
          (string-lessp fname1 fname2))))))

(defun thumfr-sort-by-window-id (frame1 frame2)
  "Comparison of `window-id' parameters in FRAME1 and FRAME2.
Return non-nil if `window-id' parameter of first frame comes before
that of second.  The `window-id' can be used as a substitute for time
of window creation."
  (string-lessp (frame-parameter frame1 'window-id) (frame-parameter frame2 'window-id)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'thumb-frm)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; thumb-frm.el ends here
#+end_src

** zoom-frm.el

#+call: hash() :exports none

#+RESULTS:
: 20210601222936042835800

#+name: 20210601222936042835800
#+begin_src emacs-lisp :tangle (meq/tangle-path)
;;; zoom-frm.el --- Commands to zoom frame font size.
;;
;; Filename: zoom-frm.el
;; Description: Commands to zoom frame font size.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 2005-2021, Drew Adams, all rights reserved.
;; Created: Fri Jan 07 10:24:35 2005
;; Version: 0
;; Package-Requires: ((frame-fns "0") (frame-cmds "0"))
;; Last-Updated: Thu Mar 18 09:07:56 2021 (-0700)
;;           By: dradams
;;     Update #: 362
;; URL: https://www.emacswiki.org/emacs/download/zoom-frm.el
;; Doc URL: https://emacswiki.org/emacs/SetFonts
;; Keywords: frames, extensions, convenience
;; Compatibility: GNU Emacs: 20.x, 21.x, 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   `avoid', `backquote', `bytecomp', `cconv', `cl-lib',
;;   `frame-cmds', `frame-fns', `macroexp', `misc-fns', `strings',
;;   `thingatpt', `thingatpt+'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;  Commands to zoom into and out of text.  They zoom a frame or a
;;  buffer, so that the text appears larger or smaller.
;;
;;  Commands `zoom-in', `zoom-out', and `zoom-in/out' do both kinds of
;;  zooming.  They can behave like command `text-scale-adjust',
;;  zooming a buffer wherever it is displayed, or they can zoom an
;;  entire single frame (all of its windows).  Hit `C-u' at any time
;;  while using these commands to toggle between buffer and frame
;;  zooming.
;;
;;  Because it is a more general replacement for `text-scale-adjust',
;;  I suggest you bind `zoom-in/out' to the keys bound by default to
;;  `text-scale-adjust': `C-x C-+', `C-x C-=', `C-x C--', and `C-x
;;  C-0'.
;;
;;  It is also handy to use a mouse button or wheel for zooming, hence
;;  the mouse binding suggestions.  For example, binding `zoom-in' and
;;  `zoom-out' to mouse wheel events gives you the zooming effect you
;;  are perhaps used to in a Web browser.
;;
;;  User option `zoom-frame/buffer' determines which kind of zooming
;;  (frame or buffer) is used by default.  You can customize this
;;  option, but (in Emacs 23 or later) you can also toggle it just by
;;  providing a prefix arg (`C-u') to `zoom-in/out', `zoom-in', or
;;  `zoom-out'.
;;
;;  Note about saving changes made dynamically using the commands
;;  defined here:
;;
;;    Some of the commands defined here change frame properties.  You
;;    can save any changes you have made, by using Customize.  To
;;    visit a Customize buffer of all unsaved changes you have made,
;;    use command `customize-customized'.
;;
;;    Frame parameter changes, such as font size, can be saved for
;;    future use by all frames or all frames of a certain kind.  For
;;    that, you must change the frame parameters of the corresponding
;;    frame-alist variable.
;;
;;    There is no single variable for saving changes to parameters of
;;    the current frame.  Instead, there are several different
;;    frame-alist variables, which you can use to define different
;;    kinds of frames.  These include: `default-frame-alist',
;;    `initial-frame-alist', and `special-display-frame-alist'.  The
;;    complete list of such frame alist variables is available using
;;    function `frame-alist-var-names', defined in library
;;    `frame-cmds.el'.
;;
;;    Example: Suppose you change the font size of a frame and want to
;;    make that the default font size for new frames in the future.
;;    You will need to update the value of variable
;;    `default-frame-alist' to use the `font' parameter setting of the
;;    changed frame.
;;
;;    You can easily copy one or all parameter values from any given
;;    frame to any frame alist (such as `default-frame-alist'), by
;;    using the commands `set-frame-alist-parameter-from-frame' and
;;    `set-all-frame-alist-parameters-from-frame'.  Those commands are
;;    defined in library `frame-cmds.el'.
;;
;;
;;  Commands defined here:
;;
;;    `toggle-zoom-frame', `zoom-all-frames-in',
;;    `zoom-all-frames-out', `zoom-frm-in', `zoom-frm-out',
;;    `zoom-frm-unzoom', `zoom-in', `zoom-in/out' (Emacs 23+),
;;    `zoom-out'.
;;
;;
;;  User options (variables) defined here:
;;
;;    `frame-zoom-font-difference', `zoom-frame/buffer' (Emacs 23+).
;;
;;
;;  Put this in your init file (`~/.emacs'): (require 'zoom-frm)
;;
;;  Suggested key bindings:
;;
;;    Emacs 23 and later:
;;
;;    (define-key ctl-x-map [(control ?+)] 'zoom-in/out)
;;    (define-key ctl-x-map [(control ?-)] 'zoom-in/out)
;;    (define-key ctl-x-map [(control ?=)] 'zoom-in/out)
;;    (define-key ctl-x-map [(control ?0)] 'zoom-in/out)
;;
;;    Any Emacs version:
;;
;;    (global-set-key (if (boundp 'mouse-wheel-down-event) ; Emacs 22+
;;                        (vector (list 'control
;;                                      mouse-wheel-down-event))
;;                      [C-mouse-wheel])    ; Emacs 20, 21
;;                    'zoom-in)
;;    (global-set-key (if (boundp 'mouse-wheel-down-event) ; Emacs 22+
;;                        (vector (list 'control 'meta
;;                                      mouse-wheel-down-event))
;;                      [C-M-mouse-wheel])  ; Emacs 20, 21
;;                    'zoom-all-frames-in)
;;    (when (boundp 'mouse-wheel-up-event) ; Emacs 22+
;;      (global-set-key (vector (list 'control
;;                                    mouse-wheel-up-event))
;;                      'zoom-out)
;;      (global-set-key (vector (list 'control 'meta
;;                                    mouse-wheel-up-event))
;;                      'zoom-all-frames-out))
;;
;;    (global-set-key [S-mouse-1]    'zoom-in)
;;    (global-set-key [C-S-mouse-1]  'zoom-out)
;;    ;; Get rid of `mouse-set-font' or `mouse-appearance-menu':
;;    (global-set-key [S-down-mouse-1] nil)
;;
;;
;;  Some of the commands are not autoloaded by default, because this
;;  library works with old as well as recent Emacs releases.  The
;;  commands that are not autoloaded are not usable in older releases.
;;  You can autoload such commands yourself.  For example, if you use
;;  Emacs 23 or later, you can add this to your init file, to autoload
;;  `zoom-in/out':
;;
;;  (autoload 'zoom-in/out "zoom-frm"
;;            "Zoom current frame or buffer in or out" t)
;;
;;  The first two of the mouse bindings mean that in Emacs 22 or later
;;  you can hold the Control key and rotate the mouse wheel to zoom in
;;  and out, just as you might do in a Web browser.
;;
;;  (In Emacs 20 and 21, Control plus mouse wheeling zooms in, but to
;;  zoom out you need to use `C--' before wheeling with Control.  This
;;  is because Emacs 20 and 21 do not have separate events for the
;;  mouse wheel directions, and it is the prefix arg, not the wheel
;;  direction, that determines the effect.)
;;
;;
;;  See also these files for other frame commands:
;;
;;     `autofit-frame.el' - Automatically fit each frame to its
;;                          selected window.  Uses `fit-frame.el'.
;;
;;     `fit-frame.el'     - 1) Fit a frame to its selected window.
;;                          2) Incrementally resize a frame.
;;
;;     `doremi-frm.el'    - Incrementally adjust frame properties
;;                          using arrow keys and/or mouse wheel.
;;
;;     `frame-cmds.el'    - Miscellaneous frame and window commands.
;;
;;     `thumb-frm.el'     - Shrink frames to a thumbnail size and
;;                          restore them again.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2019/11/19 dadams
;;     zoom-all-frames-(in|out):
;;       Use zoom-frm-(in|out): zoom each relative to its current font.  Visible only.  Autoload.
;; 2015/11/01 dadams
;;     Require cl.el at compile time, for macro case.
;; 2015/01/10 dadams
;;     zoom-in, zoom-out: Added message about new zoom type.
;;     zoom-in/out: Corrected msg: C- modifier was missing.  Reminder at end of doc string.
;; 2013/12/31 dadams
;;     zoom-in/out: Use set-transient-map, if defined.
;; 2013/09//29 dadams
;;     zoom-in/out: Only for Emacs 24.3+ (needs set-temporary-overlay-map).
;; 2013/09/13 dadams
;;     Added: zoom-all-frames-in, zoom-all-frames-out.
;; 2013/04/21 dadams
;;     Added: zoom-in/out.
;; 2011/01/04 dadams
;;     Added autoload cookies for defgroup and defcustom.
;; 2010/07/06 dadams
;;     zoom-(in|out): Put doc strings before interactive spec.  Thx to Yidong Chong.
;; 2009/06/11 dadams
;;     Added buffer zooming, for Emacs 23.
;;       Added zoom-(in|out), group zoom, zoom-frame/buffer.
;; 2006/01/07 dadams
;;     Added :link for sending bug report.
;; 2006/01/06 dadams
;;     frame-zoom-font-difference: Changed :group to Frame-Commands. Added :link.
;; 2005/01/18 dadams
;;     Changed default value of frame-zoom-font-difference.
;;     Added Note on saving changes.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(eval-when-compile (require 'cl-lib)) ;; case

(require 'frame-cmds) ;; enlarge-font


(defvar zoom-frame/buffer) ;; Defined here for Emacs 22+.

;;;;;;;;;;;;;;;;;;;;;;;;


;;; USER OPTIONS (VARIABLES) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;###autoload
(defgroup zoom nil
  "Zoom a frame or buffer."
  :group 'frames :group 'Frame-Commands ; Defined in `frame-cmds.el'.
  :link `(url-link :tag "Send Bug Report"
          ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
zoom-frm.el bug: \
&body=Describe bug here, starting with `emacs -q'.  \
Don't forget to mention your Emacs and library versions."))
  :link '(url-link :tag "Other Libraries by Drew"
          "https://www.emacswiki.org/emacs/DrewsElispLibraries")
  :link '(url-link :tag "Download"
          "https://www.emacswiki.org/emacs/download/zoom-frm.el")
  :link '(url-link :tag "Description"
          "https://www.emacswiki.org/emacs/SetFonts#ChangingFontSize")
  :link '(emacs-commentary-link :tag "Commentary" "zoom-frm"))

;;;###autoload
(defcustom frame-zoom-font-difference 1
  "*Number of points to change the frame font size when zooming.
This applies to commands `zoom-in/out', `zoom-in', `zoom-out',
`zoom-frm-in', and `zoom-frm-out' when zooming a frame.

The absolute value of the value must be less than the current font
size for the frame, because the new font size cannot be less than one
point."
  :type 'integer :group 'zoom)

(when (> emacs-major-version 22)
  (defcustom zoom-frame/buffer 'frame
    "*What to zoom: current frame or current buffer.
See command `zoom-in/out', `zoom-in', or `zoom-out'."
    :type '(choice (const :tag "Zoom frame"  frame) (const :tag "Zoom buffer" buffer))
    :group 'zoom))


;;; FUNCTIONS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(unless (> emacs-major-version 22) (defalias 'zoom-in 'zoom-frm-in))
;;;###autoload
(defun zoom-frm-in (&optional frame flip)
  "Zoom FRAME in by `frame-zoom-font-difference', making text larger.
If `frame-zoom-font-difference' is negative, make text smaller.
With prefix argument FLIP, reverse the direction:
if `frame-zoom-font-difference' is positive, then make text smaller.
This is equal but opposite to `zoom-frm-out'."
  (interactive (list (selected-frame) current-prefix-arg))
  (setq frame  (or frame  (selected-frame)))
  (let ((zoom-factor  (frame-parameter frame 'zoomed))
        (increment    (if flip (- frame-zoom-font-difference) frame-zoom-font-difference)))
    (unless zoom-factor (setq zoom-factor  0))
    (setq zoom-factor  (+ zoom-factor increment))
    (enlarge-font increment frame)
    (modify-frame-parameters frame (list (cons 'zoomed zoom-factor)))))

(unless (> emacs-major-version 22) (defalias 'zoom-out 'zoom-frm-out))
;;;###autoload
(defun zoom-frm-out (&optional frame flip)
  "Zoom FRAME out by `frame-zoom-font-difference', making text smaller.
If `frame-zoom-font-difference' is negative, make text larger.
With prefix argument FLIP, reverse the direction:
if `frame-zoom-font-difference' is positive, then make text larger.
This is equal but opposite to `zoom-frm-in'."
  (interactive (list (selected-frame) current-prefix-arg))
  (setq frame  (or frame  (selected-frame)))
  (let ((frame-zoom-font-difference  (- frame-zoom-font-difference)))
    (zoom-frm-in frame flip)))

;;;###autoload
(defun zoom-frm-unzoom (&optional frame)
  "Cancel zoom of FRAME."
  (interactive)
  (setq frame  (or frame  (selected-frame)))
  (let ((zoom-factor  (frame-parameter frame 'zoomed)))
    (if (not zoom-factor)
        (error "Frame is not zoomed")
      (enlarge-font (- zoom-factor) frame)
      (modify-frame-parameters frame '((zoomed))))))

;;;###autoload
(defun toggle-zoom-frame (&optional frame)
  "Alternately zoom/unzoom FRAME by `frame-zoom-font-difference'."
  (interactive)
  (setq frame  (or frame  (selected-frame)))
  (if (frame-parameter frame 'zoomed) (zoom-frm-unzoom frame) (zoom-frm-in frame)))

(when (> emacs-major-version 22)
  (defun zoom-in (arg)
    "Zoom current frame or buffer in.
With a prefix arg, toggle between zooming frame and zooming buffer.
Frame zooming uses command `zoom-frm-in'.
Buffer zooming uses command `text-scale-increase'."
    (interactive "P")
    (when arg
      (setq zoom-frame/buffer  (if (eq zoom-frame/buffer 'frame) 'buffer 'frame))
      (message "%s zooming from now on" (upcase (symbol-name zoom-frame/buffer)))
      (sit-for 1))
    (if (eq zoom-frame/buffer 'frame)
        (zoom-frm-in)
      (with-current-buffer
          (if (string-match "mouse" (format "%S" (event-basic-type
                                                  last-command-event)))
              (window-buffer (posn-window (event-start last-command-event)))
            (current-buffer))
        (text-scale-increase 1))))

  (defun zoom-out (arg)
    "Zoom current frame or buffer out.
With a prefix arg, toggle between zooming frame and zooming buffer.
Frame zooming uses command `zoom-frm-out'.
Buffer zooming uses command `text-scale-decrease'."
    (interactive "P")
    (when arg
      (setq zoom-frame/buffer  (if (eq zoom-frame/buffer 'frame) 'buffer 'frame))
      (message "%s zooming from now on" (upcase (symbol-name zoom-frame/buffer)))
      (sit-for 1))
    (if (eq zoom-frame/buffer 'frame)
        (zoom-frm-out)
      (with-current-buffer
          (if (string-match "mouse" (format "%S" (event-basic-type
                                                  last-command-event)))
              (window-buffer (posn-window (event-start last-command-event)))
            (current-buffer))
        (text-scale-decrease 1))))

  (when (or (fboundp 'set-transient-map) ; Emacs 24.4+
            (fboundp 'set-temporary-overlay-map)) ; Emacs 24.3

    (defun zoom-in/out (arg)
      "Zoom current frame or buffer in or out.
A prefix arg determines the behavior, as follows:
 none       : Use 1 as the zoom amount.
 plain `C-u': Toggle between zooming frame and zooming buffer.
 0          : Unzoom: reset size to the default.
 other      : Use the numeric value as the zoom amount.

Similar to the behavior of command `text-scale-adjust', you can
continue to use any of the keys `+', `-', `0', and `C-u' repeatedly.
The zoom amount from the initial key sequence is used each time.

Example: `C-3 C-x C-- C-- C-- C--' zooms out 4 times with a zoom
amount of 3 each time.

The zoom amount for frame zooming is a point-size increment/decrement.
The zoom amount for buffer zooming is a number of text-scaling steps.

Frame zooming uses command `zoom-frm-in'.
Buffer zooming uses command `text-scale-increase'.

User option `zoom-frame/buffer' determines the default zoom type:
frame or buffer.  If the option value is `buffer' and you never use
plain `C-u' with this command then it acts like `text-scale-adjust'.

Remember that you can also use `C-u' when you are done zooming."
      (interactive "P")
      (when (or (equal arg '(4))  (eq ?\025 last-command-event)) ; `C-u'
        (setq zoom-frame/buffer  (if (eq zoom-frame/buffer 'frame) 'buffer 'frame)
              arg                1)
        (message "%s zooming from now on" (upcase (symbol-name zoom-frame/buffer)))
        (sit-for 1))
      (let* ((ev               last-command-event)
             (echo-keystrokes  nil)
             (base             (event-basic-type ev))
             (step             (if (or (equal arg '(4))  (eq ?\025 last-command-event)) ; C-u
                                   'C-U-WAS-USED
                                 (setq arg  (prefix-numeric-value arg))
                                 (case base
                                   ((?+ ?=) arg)
                                   (?-      (- arg))
                                   (?0      0)
                                   (t       arg)))))
        (message (if (eq step 0)
                     "Reset to default size.  Use C-x C-+/C-- to zoom in/out"
                   "Use C-x C-+/C-- to zoom in/out, C-0 to reset (unzoom)"))
        (unless (eq step 'C-U-WAS-USED)
          (if (eq zoom-frame/buffer 'frame)
              (if (eq step 0)
                  (zoom-frm-unzoom)
                (let ((frame-zoom-font-difference  step)) (zoom-frm-in)))
            (with-current-buffer
                (if (string-match "mouse" (format "%S" (event-basic-type last-command-event)))
                    (window-buffer (posn-window (event-start last-command-event)))
                  (current-buffer))
              (text-scale-increase step))))
        (let ((fun  (if (fboundp 'set-transient-map)
                        #'set-transient-map
                      #'set-temporary-overlay-map)))
          (funcall fun
                   (let ((map  (make-sparse-keymap)))
                     (dolist (mods  '(() (control)))
                       (dolist (key  '(?- ?+ ?= ?0)) ; The `=' key is often unshifted `+' key.
                         (define-key map (vector (append mods (list key)))
                           `(lambda () (interactive) (zoom-in/out ',arg)))))
                     (define-key map "\C-u" `(lambda () (interactive) (zoom-in/out ',arg)))
                     map)))))))

;;;###autoload
(defun zoom-all-frames-in (&optional flip)
  "Zoom all visible frames in, making text larger.
Zoom by `frame-zoom-font-difference' points.

If `frame-zoom-font-difference' is negative, make text smaller.
With prefix argument FLIP, reverse the direction:
if `frame-zoom-font-difference' is positive, make text smaller.
This is equal but opposite to `zoom-all-frames-out'."
  (interactive "P")
  (dolist (fr  (visible-frame-list))
    (zoom-frm-in fr flip)))

;;;###autoload
(defun zoom-all-frames-out (&optional flip)
  "Zoom all frames out, making text smaller.
Zoom by `frame-zoom-font-difference' points.

If `frame-zoom-font-difference' is negative, make text larger.
With prefix argument FLIP, reverse the direction:
if `frame-zoom-font-difference' is positive, make text larger.
This is equal but opposite to `zoom-all-frames-in'."
  (interactive "P")
  (dolist (fr  (visible-frame-list))
    (zoom-frm-out fr flip)))

;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'zoom-frm)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; zoom-frm.el ends here
#+end_src
