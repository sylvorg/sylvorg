#+setupfile: ~/.emacs.d/README.org

* makefile

#+call: hash() :exports none

#+RESULTS:
: 20210601181725825830000

#+name: 20210601181725825830000
#+begin_src makefile :tangle makefile
.RECIPEPREFIX := |
.DEFAULT_GOAL := super-push

# Adapted From: https://www.systutorials.com/how-to-get-the-full-path-and-directory-of-a-makefile-itself/
mkfilePath := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfileDir := $(dir $(mkfilePath))
emkFile := ~/.emacs.d/makefile

init:
|make -f $(emkFile) init

pull: init
|git -C $(mkfileDir) pull
|git -C $(mkfileDir) subtree pull-all

push: init
|git -C $(mkfileDir) add .
|-git -C $(mkfileDir) commit --allow-empty-message -am ""
|-git -C $(mkfileDir) push
|git -C $(mkfileDir) subtree prune
|-git -C $(mkfileDir) subtree push-all

tangle-setup:
|make -f $(emkFile) tangle-setup

tangle: tangle-setup
|yes yes | fd . $(mkfileDir) \
    -HIe org \
    -x ~/.emacs.d/backup-tangle.sh
|fd . $(mkfileDir) \
    -HId 1 -e py \
    -x chmod +x

super-push: tangle push
#+end_src

* previous projects
** bakery

My pride and joy; based off of [[https://github.com/amoffat][Andrew Moffat's]] [[https://amoffat.github.io/sh/][sh]],
this python module allows you to import shell commands as modules as well. For example:

# How does the code below work exactly, again? Revise it!

#+begin_src python
<<20210601181755824433500>>
<<20210601181800630609300>>
<<20210601181804730771100>>
#+end_src

You might be thinking to yourself, "Cool!" And also, "...Wait what?"

*** breaking it down

-----

#+call: hash() :exports none

#+RESULTS:
: 20210601181755824433500

#+name: 20210601181755824433500
#+begin_src python
from baker.y import git
#+end_src

This will import the =git= utility from your path as a =bakery= object;
note, however, that while the statement is importing =git= from =baker.y=,
there are actually two submodules in play here: =baker= with a =y=,
and =baker= with an =i=.

To facilitate the use of =git(C = [path]).status()=, the latter submodule must be used.
This also prevents the use of something like =git()=, but, since that just shows the help text,
one can simply use =git.help()= instead.

-----

#+call: hash() :exports none

#+RESULTS:
: 20210601181800630609300

#+name: 20210601181800630609300
#+begin_src python
git.clone(
    b = "master",
    recurse_submodule = True,
    "https://github.com/<<username>>/<<username>>",
    "~/<<username>>",
    _run = True,
)
#+end_src

-----

#+call: hash() :exports none

#+RESULTS:
: 20210601181804730771100

#+name: 20210601181804730771100
#+begin_src python
print(git(C = "~/<<username>>").status())
#+end_src

*** want more information?

Get it here! https://gitlab.com/picotech/bakery

Also: eh heh heh... yeah... I like =gitlab's= grouping system... */sheepish grin/*
