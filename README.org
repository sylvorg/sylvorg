#+setupfile: ./settings/README.org
#+include: ./settings/README.org

* makefile

#+call: hash() :exports none

#+RESULTS:
: 20210601181725825830000

#+name: 20210601181725825830000
#+begin_src makefile :tangle (meq/tangle-path)
.RECIPEPREFIX := |
.DEFAULT_GOAL := push

# Adapted From: https://www.systutorials.com/how-to-get-the-full-path-and-directory-of-a-makefile-itself/
mkfilePath := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfileDir := $(dir $(mkfilePath))
emkDir := ~/.emacs.d/
emkFile := $(emkDir)/makefile
emkMake := make -f $(emkFile)

oreo:
|yes yes | $(mkfileDir)/settings/org-tangle.sh oreo.aiern.org

README:
|yes yes | $(mkfileDir)/settings/org-tangle.sh README.org

both: oreo README

tangle: both
|$(emkMake) tangle
|fd . $(mkfileDir) \
    -HId 1 -e sh \
    -x chmod +x

subinit:
|$(emkMake) subinit
|yadm submodule sync --recursive

pull: subinit
|yadm pull

commit: tangle
|-yadm commit --allow-empty-message -am ""

push: commit
|-yadm push

emacs:
|$(emkMake) emacs
emacs-nw:
|$(emkMake) emacs-nw

stow:
|-chmod 700 ~/.ssh
|git -C ~/keybase/secrets pull
|-rm ~/.ssh/id_rsa ~/.ssh/known_hosts
|stow -d ~/keybase -t ~ secrets
|chmod 700 ~/.ssh
|chmod 600 ~/.ssh/id_rsa ~/.ssh/known_hosts
#+end_src

* previous projects
** bakery

My pride and joy; based off of [[https://github.com/amoffat][Andrew Moffat's]] [[https://amoffat.github.io/sh/][sh]],
this python module allows you to import shell commands as modules as well. For example:

# How does the code below work exactly, again? Revise it!

#+begin_src python
<<20210601181755824433500>>
<<20210601181800630609300>>
<<20210601181804730771100>>
#+end_src

You might be thinking to yourself, "Cool!" And also, "...Wait what?"

*** breaking it down

-----

#+call: hash() :exports none

#+RESULTS:
: 20210601181755824433500

#+name: 20210601181755824433500
#+begin_src python
from baker.y import git
#+end_src

This will import the =git= utility from your path as a =bakery= object;
note, however, that while the statement is importing =git= from =baker.y=,
there are actually two submodules in play here: =baker= with a =y=,
and =baker= with an =i=.

To facilitate the use of =git(C = [path]).status()=, the latter submodule must be used.
This also prevents the use of something like =git()=, but, since that just shows the help text,
one can simply use =git.help()= instead.

-----

#+call: hash() :exports none

#+RESULTS:
: 20210601181800630609300

#+name: 20210601181800630609300
#+begin_src python
git.clone(
    b = "master",
    recurse_submodule = True,
    "https://github.com/<<username>>/<<username>>",
    "~/<<username>>",
    _run = True,
)
#+end_src

-----

#+call: hash() :exports none

#+RESULTS:
: 20210601181804730771100

#+name: 20210601181804730771100
#+begin_src python
print(git(C = "~/<<username>>").status())
#+end_src

*** want more information?

Get it here! https://gitlab.com/picotech/bakery

Also: eh heh heh... yeah... I like =gitlab's= grouping system... */sheepish grin/*
