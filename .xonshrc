import sys, os
from pathlib import Path
$AUTO_CD = True
$AUTO_PUSHD = True
$AUTO_SUGGEST = True
$AUTO_SUGGEST_IN_COMPLETIONS = True
$BASH_COMPLETIONS += [ f"{Path.home()}/resources/bashCompletions" ]
$COMPLETION_IN_THREAD = True
$COMPLETIONS_CONFIRM = True
$DOTGLOB = True
$FUZZY_PATH_COMPLETION = True
$HISTCONTROL = { "ignoreboth", "erasedups", "ignoreerr" }
$MOUSE_SUPPORT = True
$PRETTY_PRINT_RESULTS = True
$PROMPT_TOOLKIT_COLOR_DEPTH = "DEPTH_24_BIT"
$SHELL_TYPE = "prompt_toolkit"
$UPDATE_COMPLETIONS_ON_KEYPRESS = True
$UPDATE_OS_ENVIRON = True
$VI_MODE = True
$XONSH_AUTOPAIR = True
$XONSH_CACHE_EVERYTHING = True
$XONSH_HISTORY_BACKEND = "sqlite"
$XONSH_STORE_STDOUT = True

# This enumerates all history files when set to true
$XONSH_DEBUG = False

$XONSH_SHOW_TRACEBACK = True

# Xonsh Prompt
$PROMPT_FIELDS["prompt_end"] = "Wheee! ðŸ˜¹ "
# $PROMPT = "{BOLD_#E5004D}{env_name} {BOLD_#FF4081}{prompt_end}"
# $PROMPT = lambda: $(starship prompt)
execx($(starship init xonsh))
$RIGHT_PROMPT = "{BOLD_#E5004D} {prompt_end}{BOLD_#FC9F71} || {BOLD_#E5004D} {user}@{hostname} "
# $BOTTOM_TOOLBAR = $RIGHT_PROMPT

# Path
sys.path.insert(0, "")
$PATH += [ "$HOME/.local/bin",
	"$HOME/.nimble/bin",
	"/home/linuxbrew/.linuxbrew/bin",
	"/home/linuxbrew/.linuxbrew/sbin",
	"$HOME/.nix-profile/bin",
	"$HOME/.guix-profile/bin",
	"$HOME/go/bin",
	"/usr/local/sbin",
	"/usr/local/bin",
	"/usr/sbin",
	"/usr/bin",
	"/sbin",
	"/bin",
	"/usr/games",
	"/usr/local/games",
	"/snap/bin",
	"/usr/local/go/bin",
	"/usr/lib/node_modules" ]

# Shell
# $EDITOR = "emacsclient -c"
# $VISUAL = "emacsclient -c"

# Etc
$LESSOPEN = "| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
$LESS = " -R "
def _mdg(args, stdin=None):
    mkdir -p @(args) && cd @(args[0])

def _direnv_allow(args, stdin=None):
    if args:
        for argument in args:
            direnv allow @(argument)
    else:
        direnv allow

def _get_fzfdf_output(*args):
    if args:
        return $(fd @((".", *args) if os.path.exists(args[0]) else args) | fzf-tmux).strip("\n")
    else:
        return $(fd | fzf-tmux).strip("\n")

def _cdi(args, stdin=None):
    cd @(_get_fzfdf_output(*args, "-t", "d"))

def _cdr(args, stdin=None):
    cd @($(zoxide query -l | fzf-tmux).strip("\n"))

def _cdf(args, stdin=None):
    cd @($(fasd -ld | fzf-tmux).strip("\n"))

def _rc(args, stdin=None):
    hist = $(history show @(args))
    command = $(echo @(hist) | fzf-tmux).strip("\n").split()
    if command:
        $(@(command))

def _run(args, stdin=None):
    args = list(args)
    args[0] = Path(args[0]).absolute()
    chmod +x @(args[0]) && @(args)

def _Run(args, stdin=None):
    curl --create-dirs -fsSLo @(args[1]) @(args[0])
    _run(args[1:])
# xontrib load coreutils
# xontrib load docker_tabcomplete
# xontrib load schedule
# xontrib load ssh_agent
# xontrib load vox_tabcomplete

xontrib load abbrevs
xontrib load autoxsh
xontrib load bashisms
xontrib load direnv
xontrib load pipeliner
xontrib load readable-traceback
xontrib load sh
xontrib load vox
xontrib load whole_word_jumping

# Jedi was what was causing the python function completions
# instead of the path completions
# xontrib load jedi
execx($(zoxide init xonsh), 'exec', __xonsh__.ctx, filename='zoxide')

aliases["-"] = "pushd"
aliases[".."] = "cd .."
aliases["."] = "exa -la"
aliases["c"] = "clear"
aliases["cdf"] = _cdf
aliases["cdi"] = _cdi
aliases["cdr"] = _cdr
aliases["da"] = _direnv_allow
aliases["emd"] = "systemctl --user start emacs.service"
aliases["git"] = lambda args, stdin=None: $(hub @(args))
aliases["kemd"] = "systemctl --user stop emacs.service"
aliases["la"] = lambda args, stdin=None: $(exa -la --octal-permissions @(args))
aliases["md"] = lambda args, stdin=None: $(mkdir -p @(args))
aliases["mdg"] = _mdg
aliases["mosh"] = lambda args, stdin=None: $(mosh --experimental-remote-ip=remote @(args))
aliases["n"] = "exit"
aliases["rc"] = _rc
aliases["remd"] = "systemctl --user restart emacs.service"
aliases["Run"] = _Run
aliases["run"] = _run
aliases["s"] = "source ~/.xonshrc"
aliases["semd"] = "systemctl status emacs"
aliases["ssh"] = lambda args, stdin=None: $(assh wrapper ssh -- @(args))
aliases["ve"] = lambda args, stdin=None: $(vox enter @(args)) if args else $(vox exit)
aliases["vim"] = lambda args, stdin=None: $(emacsclient -c @(args))

# fasd aliases
aliases["o"] = lambda args, stdin=None: $(fasd -ae xdg-open @(args)) # quick opening files with xdg-open

# quick opening files with emacs
aliases["e"] = lambda args, stdin=None: $(fasd -fe 'emacsclient -c' @(args))
